<#@ template debug="false" hostspecific="true" language="C#" 
#><#@ assembly name="System.Core" 
#><#@ assembly name="System.Data" 
#><#@ import namespace="System.Linq" 
#><#@ import namespace="System.Text" 
#><#@ import namespace="System.Collections.Generic" 
#><#@ output extension=".cs" encoding="utf-8" 
#><#@ include file="..\..\..\private.ttinclude" 
#><#@ include file="..\tt\CommonTextTemplate.ttinclude" 
#><#@ include file="..\tt\MultipleOutputHelper.ttinclude" 
#><# Manager manager = Manager.Create(Host, GenerationEnvironment); #>
<# 
	foreach(Enumeration e in GetEnumerations())
    {
		manager.StartNewFile(String.Format("{0}.tt.cs", e.Name));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Serialization;

namespace Qujck.Pas.Core.Enumerations
{
    public sealed class <#= e.Name #> : IEnumeration, IComparable
    {
        #region static
        private static readonly Dictionary<string, <#= e.Name #>> _list = new Dictionary<string, <#= e.Name #>>();

        public static bool Contains(string key)
        {
            return _list.Any(x => x.Key == key);
        }

        public static bool operator !=(<#= e.Name #> a, <#= e.Name #> b)
        {
            return (!a.Equals(b));
        }

        public static bool operator ==(<#= e.Name #> a, <#= e.Name #> b)
        {
            return (a.Equals(b));
        }

		public static implicit operator <#= e.Name #>(string value)
        {
            if (value == null || value.Trim().Length == 0) return <#= e.Name #>.Null;
            if (Contains(value))
                return _list[value];
            else
                throw new InvalidCastException(string.Format("<#= e.Name #>.{0} not found.", value));
        }

        public static implicit operator String(<#= e.Name #> item)
        {
            return item.Value;
        }

        public static readonly <#= e.Name #> Null = new <#= e.Name #>("");
<#
		foreach(Enumerator en in GetEnumerators(e.Name))
		{
            if (en.Description != null)
            {
#>        /// <summary>
        /// <#= en.Description #>
        /// </summary>
<#          }
#>		public static readonly <#= e.Name #> <#= SafeName(en.Value) #> = new <#= e.Name #>("<#= en.Value #>");
<#		}
#>

        public static IEnumerable<<#= e.Name #>> GetValues()
        {
            yield return Null;
<#
		foreach(Enumerator en in GetEnumerators(e.Name))
		{
#>		    yield return <#= SafeName(en.Value) #>;
<#		}
#>
        }

        #endregion

        #region instance
        private readonly string _value;
        private readonly bool _readonly;
        private <#= e.Name #> _instance;

        private <#= e.Name #>(string value)
        {
            _readonly = true;
            _value = value;
            _instance = this;
            _list[value] = _instance;
        }

		public <#= e.Name #>()
        {
            _readonly = false;
            _instance = <#= e.Name #>.Null;
        }

		[XmlText]
        public string Value
        {
            get
            {
                if (_instance == <#= e.Name #>.Null) return null;
                return _instance._value;
            }
            set
            {
                if (_readonly)
                    throw new InvalidOperationException("Cannot assign a value to an enumeration.");
                if (value == null) _instance = <#= e.Name #>.Null;
                else
                {
                    if (!_list.ContainsKey(value))
                        throw new NullReferenceException(string.Format("<#= e.Name #>.{0} not found.", value));
                    _instance = _list[value];
                }
            }
        }

        public override string ToString()
        {
            return Value;
        }

        public override bool Equals(object obj)
        {
            if (obj == null) return false;

            if (this.GetType() != obj.GetType()) return false;

            // safe because of the GetType check
            <#= e.Name #> item = (<#= e.Name #>)obj;

            return System.Object.ReferenceEquals(_instance, item);
        }

        public override int GetHashCode()
        {
			if (_value == null) return "".GetHashCode();
            else return _value.GetHashCode();
        }

        public int CompareTo(object obj)
        {
            if (obj is <#= e.Name #>)
            {
				if (_instance.Value == null)
				{
					if (obj == null) return 0;
					else return -1;
				}
                <#= e.Name #> compare = (<#= e.Name #>)obj;
                return _instance.Value.CompareTo(compare.Value);
            }
            else
                throw new ArgumentException("Object is not a <#= e.Name #>.");
        }
        #endregion
    }
}
<#
		manager.EndBlock();
	}
	manager.Process(true); 
#>
<#+ 
public string SafeName(string name)
{
    int value;
    if (int.TryParse(name.Substring(0,1), out value))
    {
        return "_" + name;
    }
    else
    {
        return name;
    }
}
 #>