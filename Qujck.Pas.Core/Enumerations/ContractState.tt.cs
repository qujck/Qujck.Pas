//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Serialization;

namespace Qujck.Pas.Core.Enumerations
{
    public sealed class ContractState : IEnumeration, IComparable
    {
        #region static
        private static readonly Dictionary<string, ContractState> _list = new Dictionary<string, ContractState>();

        public static bool Contains(string key)
        {
            return _list.Any(x => x.Key == key);
        }

        public static bool operator !=(ContractState a, ContractState b)
        {
            return (!a.Equals(b));
        }

        public static bool operator ==(ContractState a, ContractState b)
        {
            return (a.Equals(b));
        }

		public static implicit operator ContractState(string value)
        {
            if (value == null || value.Trim().Length == 0) return ContractState.Null;
            if (Contains(value))
                return _list[value];
            else
                throw new InvalidCastException(string.Format("ContractState.{0} not found.", value));
        }

        public static implicit operator String(ContractState item)
        {
            return item.Value;
        }

        public static readonly ContractState Null = new ContractState("");
        /// <summary>
        /// 
        /// </summary>
		public static readonly ContractState ExitedDeath = new ContractState("ExitedDeath");
        /// <summary>
        /// 
        /// </summary>
		public static readonly ContractState InForce = new ContractState("InForce");
        /// <summary>
        /// 
        /// </summary>
		public static readonly ContractState Matured = new ContractState("Matured");
        /// <summary>
        /// 
        /// </summary>
		public static readonly ContractState Ntu = new ContractState("Ntu");
        /// <summary>
        /// 
        /// </summary>
		public static readonly ContractState Registered = new ContractState("Registered");
        /// <summary>
        /// 
        /// </summary>
		public static readonly ContractState Surrendered = new ContractState("Surrendered");

        public static IEnumerable<ContractState> GetValues()
        {
            yield return Null;
		    yield return ExitedDeath;
		    yield return InForce;
		    yield return Matured;
		    yield return Ntu;
		    yield return Registered;
		    yield return Surrendered;
        }

        #endregion

        #region instance
        private readonly string _value;
        private readonly bool _readonly;
        private ContractState _instance;

        private ContractState(string value)
        {
            _readonly = true;
            _value = value;
            _instance = this;
            _list[value] = _instance;
        }

		public ContractState()
        {
            _readonly = false;
            _instance = ContractState.Null;
        }

		[XmlText]
        public string Value
        {
            get
            {
                if (_instance == ContractState.Null) return null;
                return _instance._value;
            }
            set
            {
                if (_readonly)
                    throw new InvalidOperationException("Cannot assign a value to an enumeration.");
                if (value == null) _instance = ContractState.Null;
                else
                {
                    if (!_list.ContainsKey(value))
                        throw new NullReferenceException(string.Format("ContractState.{0} not found.", value));
                    _instance = _list[value];
                }
            }
        }

        public override string ToString()
        {
            return Value;
        }

        public override bool Equals(object obj)
        {
            if (obj == null) return false;

            if (this.GetType() != obj.GetType()) return false;

            // safe because of the GetType check
            ContractState item = (ContractState)obj;

            return System.Object.ReferenceEquals(_instance, item);
        }

        public override int GetHashCode()
        {
			if (_value == null) return "".GetHashCode();
            else return _value.GetHashCode();
        }

        public int CompareTo(object obj)
        {
            if (obj is ContractState)
            {
				if (_instance.Value == null)
				{
					if (obj == null) return 0;
					else return -1;
				}
                ContractState compare = (ContractState)obj;
                return _instance.Value.CompareTo(compare.Value);
            }
            else
                throw new ArgumentException("Object is not a ContractState.");
        }
        #endregion
    }
}
