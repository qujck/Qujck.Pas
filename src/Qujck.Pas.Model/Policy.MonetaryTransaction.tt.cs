//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Policy.DataObjects;

namespace Qujck.Pas.Model.Policy
{
    [Serializable]
    public sealed partial class MonetaryTransaction : AbstractPolicyEntity
    {
        internal MonetaryTransactionDo initialValues { get; private set; }
        internal MonetaryTransactionDo updatedValues { get; private set; }
        internal Action<MonetaryTransactionDo, string> loadMissingValue { private get; set; }

        public MonetaryTransaction()
        {
            this.initialValues = new MonetaryTransactionDo();
            this.updatedValues = new MonetaryTransactionDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Policy";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "MonetaryTransaction";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "amount";
                yield return "relevantYear";
                yield return "referenceNumber";
                yield return "sourceType";
                yield return "type";
                yield return "purchaseStage";
                yield return "reason";
                yield return "date";
                yield return "time";
                yield return "FinancialInstitutionAccount_id";
                yield return "Contract_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [XmlElement(ElementName="amount")]
        public decimal? amount 
	    { 
            get
            {
                if (this.updatedValues.amountHasValue)
                {
                    return this.updatedValues.amount;
                }
                
                if (!this.initialValues.amountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "amount");
                    this.initialValues.amountHasValue = true;
                }

                return this.initialValues.amount;
            }
            set
            {
                this.updatedValues.amount = value;
            }
        }

        [XmlElement(ElementName="relevantYear")]
        public short? relevantYear 
	    { 
            get
            {
                if (this.updatedValues.relevantYearHasValue)
                {
                    return this.updatedValues.relevantYear;
                }
                
                if (!this.initialValues.relevantYearHasValue)
                {
                    this.loadMissingValue(this.initialValues, "relevantYear");
                    this.initialValues.relevantYearHasValue = true;
                }

                return this.initialValues.relevantYear;
            }
            set
            {
                this.updatedValues.relevantYear = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="referenceNumber")]
        public string referenceNumber 
	    { 
            get
            {
                if (this.updatedValues.referenceNumberHasValue)
                {
                    return this.updatedValues.referenceNumber;
                }
                
                if (!this.initialValues.referenceNumberHasValue)
                {
                    this.loadMissingValue(this.initialValues, "referenceNumber");
                    this.initialValues.referenceNumberHasValue = true;
                }

                return this.initialValues.referenceNumber;
            }
            set
            {
                this.updatedValues.referenceNumber = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="sourceType")]
        public string sourceType 
	    { 
            get
            {
                if (this.updatedValues.sourceTypeHasValue)
                {
                    return this.updatedValues.sourceType;
                }
                
                if (!this.initialValues.sourceTypeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "sourceType");
                    this.initialValues.sourceTypeHasValue = true;
                }

                return this.initialValues.sourceType;
            }
            set
            {
                this.updatedValues.sourceType = value;
            }
        }

        [XmlElement(ElementName="type")]
        public MonetaryTransactionType type 
	    { 
            get
            {
                if (this.updatedValues.typeHasValue)
                {
                    return this.updatedValues.type;
                }
                
                if (!this.initialValues.typeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "type");
                    this.initialValues.typeHasValue = true;
                }

                return this.initialValues.type;
            }
            set
            {
                this.updatedValues.type = value;
            }
        }

        [XmlElement(ElementName="purchaseStage")]
        public PurchaseStage purchaseStage 
	    { 
            get
            {
                if (this.updatedValues.purchaseStageHasValue)
                {
                    return this.updatedValues.purchaseStage;
                }
                
                if (!this.initialValues.purchaseStageHasValue)
                {
                    this.loadMissingValue(this.initialValues, "purchaseStage");
                    this.initialValues.purchaseStageHasValue = true;
                }

                return this.initialValues.purchaseStage;
            }
            set
            {
                this.updatedValues.purchaseStage = value;
            }
        }

        [StringLength(75)]
        [XmlElement(ElementName="reason")]
        public string reason 
	    { 
            get
            {
                if (this.updatedValues.reasonHasValue)
                {
                    return this.updatedValues.reason;
                }
                
                if (!this.initialValues.reasonHasValue)
                {
                    this.loadMissingValue(this.initialValues, "reason");
                    this.initialValues.reasonHasValue = true;
                }

                return this.initialValues.reason;
            }
            set
            {
                this.updatedValues.reason = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="date")]
        public System.DateTime date 
	    { 
            get
            {
                if (this.updatedValues.dateHasValue)
                {
                    return this.updatedValues.date;
                }
                
                if (!this.initialValues.dateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "date");
                    this.initialValues.dateHasValue = true;
                }

                return this.initialValues.date;
            }
            set
            {
                this.updatedValues.date = value;
            }
        }

        [XmlElement(ElementName="time")]
        public System.TimeSpan? time 
	    { 
            get
            {
                if (this.updatedValues.timeHasValue)
                {
                    return this.updatedValues.time;
                }
                
                if (!this.initialValues.timeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "time");
                    this.initialValues.timeHasValue = true;
                }

                return this.initialValues.time;
            }
            set
            {
                this.updatedValues.time = value;
            }
        }

        [XmlElement(ElementName="FinancialInstitutionAccount_id")]
        public long? FinancialInstitutionAccount_id 
	    { 
            get
            {
                if (this.updatedValues.FinancialInstitutionAccount_idHasValue)
                {
                    return this.updatedValues.FinancialInstitutionAccount_id;
                }
                
                if (!this.initialValues.FinancialInstitutionAccount_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "FinancialInstitutionAccount_id");
                    this.initialValues.FinancialInstitutionAccount_idHasValue = true;
                }

                return this.initialValues.FinancialInstitutionAccount_id;
            }
            set
            {
                this.updatedValues.FinancialInstitutionAccount_id = value;
            }
        }

        [XmlElement(ElementName="Contract_id")]
        public long Contract_id 
	    { 
            get
            {
                if (this.updatedValues.Contract_idHasValue)
                {
                    return this.updatedValues.Contract_id;
                }
                
                if (!this.initialValues.Contract_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Contract_id");
                    this.initialValues.Contract_idHasValue = true;
                }

                return this.initialValues.Contract_id;
            }
            set
            {
                this.updatedValues.Contract_id = value;
            }
        }

        public bool ContractIsLoaded { get; private set; }
        internal Func<Contract> ContractQuery { private get; set; }
        public Contract Contract
        {
            get
            {
                if (this.ContractQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.ContractQuery();
                    if (!this.ContractIsLoaded)
                    {
                        this.ContractIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        public bool FinancialInstitutionAccountIsLoaded { get; private set; }
        internal Func<FinancialInstitutionAccount> FinancialInstitutionAccountQuery { private get; set; }
        public FinancialInstitutionAccount FinancialInstitutionAccount
        {
            get
            {
                if (this.FinancialInstitutionAccountQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.FinancialInstitutionAccountQuery();
                    if (!this.FinancialInstitutionAccountIsLoaded)
                    {
                        this.FinancialInstitutionAccountIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        public bool FundUnitTransactionsAreLoaded { get; private set; }
        internal Func<IEnumerable<FundUnitTransaction>> FundUnitTransactionsQuery { private get; set; }
        public IEnumerable<FundUnitTransaction> FundUnitTransactions
        {
            get
            {
                if (this.FundUnitTransactionsQuery == null)
                {
                    return Enumerable.Empty<FundUnitTransaction>();
                }
                else
                {
                    var result = this.FundUnitTransactionsQuery();
                    if (!this.FundUnitTransactionsAreLoaded)
                    {
                        this.FundUnitTransactionsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "amount");
            if (e2 != null)
            {
                this.amount = decimal.Parse(e2.Value);
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "relevantYear");
            if (e3 != null)
            {
                this.relevantYear = short.Parse(e3.Value);
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "referenceNumber");
            if (e4 != null) 
            {
                this.referenceNumber = e4.Value;
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "sourceType");
            if (e5 != null) 
            {
                this.sourceType = e5.Value;
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "type");
            if (e6 != null)
            {
                this.type = e6.Value;
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "purchaseStage");
            if (e7 != null)
            {
                this.purchaseStage = e7.Value;
            }

            XElement e8 = elements.FirstOrDefault(x => x.Name == "reason");
            if (e8 != null) 
            {
                this.reason = e8.Value;
            }

            XElement e9 = elements.FirstOrDefault(x => x.Name == "date");
            if (e9 != null)
            {
                this.date = System.DateTime.Parse(e9.Value);
            }

            XElement e10 = elements.FirstOrDefault(x => x.Name == "time");
            if (e10 != null)
            {
                this.time = System.TimeSpan.Parse(e10.Value);
            }

            XElement e11 = elements.FirstOrDefault(x => x.Name == "FinancialInstitutionAccount_id");
            if (e11 != null)
            {
                this.FinancialInstitutionAccount_id = long.Parse(e11.Value);
            }

            XElement e12 = elements.FirstOrDefault(x => x.Name == "Contract_id");
            if (e12 != null)
            {
                this.Contract_id = long.Parse(e12.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.amountHasValue && amount != null)
            {
                writer.WriteElementString("amount", this.updatedValues.amount.ToString());
            }
            else if (this.initialValues.amountHasValue && amount != null)
            {
                writer.WriteElementString("amount", this.initialValues.amount.ToString());
            }

            if (this.updatedValues.relevantYearHasValue && relevantYear != null)
            {
                writer.WriteElementString("relevantYear", this.updatedValues.relevantYear.ToString());
            }
            else if (this.initialValues.relevantYearHasValue && relevantYear != null)
            {
                writer.WriteElementString("relevantYear", this.initialValues.relevantYear.ToString());
            }

            if (this.updatedValues.referenceNumberHasValue && !string.IsNullOrEmpty(referenceNumber))
            {
                writer.WriteElementString("referenceNumber", this.updatedValues.referenceNumber);
            }
            else if (this.initialValues.referenceNumberHasValue && !string.IsNullOrEmpty(referenceNumber))
            {
                writer.WriteElementString("referenceNumber", this.initialValues.referenceNumber);
            }

            if (this.updatedValues.sourceTypeHasValue && !string.IsNullOrEmpty(sourceType))
            {
                writer.WriteElementString("sourceType", this.updatedValues.sourceType);
            }
            else if (this.initialValues.sourceTypeHasValue && !string.IsNullOrEmpty(sourceType))
            {
                writer.WriteElementString("sourceType", this.initialValues.sourceType);
            }

            if (this.updatedValues.typeHasValue && type != MonetaryTransactionType.Null)
            {
                writer.WriteElementString("type", this.updatedValues.type.Value);
            }
            else if (this.initialValues.typeHasValue && type != MonetaryTransactionType.Null)
            {
                writer.WriteElementString("type", this.initialValues.type.Value);
            }

            if (this.updatedValues.purchaseStageHasValue && purchaseStage != PurchaseStage.Null)
            {
                writer.WriteElementString("purchaseStage", this.updatedValues.purchaseStage.Value);
            }
            else if (this.initialValues.purchaseStageHasValue && purchaseStage != PurchaseStage.Null)
            {
                writer.WriteElementString("purchaseStage", this.initialValues.purchaseStage.Value);
            }

            if (this.updatedValues.reasonHasValue && !string.IsNullOrEmpty(reason))
            {
                writer.WriteElementString("reason", this.updatedValues.reason);
            }
            else if (this.initialValues.reasonHasValue && !string.IsNullOrEmpty(reason))
            {
                writer.WriteElementString("reason", this.initialValues.reason);
            }

            if (this.updatedValues.dateHasValue)
            {
                writer.WriteElementString("date", this.updatedValues.date.ToString());
            }
            else if (this.initialValues.dateHasValue)
            {
                writer.WriteElementString("date", this.initialValues.date.ToString());
            }

            if (this.updatedValues.timeHasValue && time != null)
            {
                writer.WriteElementString("time", this.updatedValues.time.ToString());
            }
            else if (this.initialValues.timeHasValue && time != null)
            {
                writer.WriteElementString("time", this.initialValues.time.ToString());
            }

            if (this.updatedValues.FinancialInstitutionAccount_idHasValue && FinancialInstitutionAccount_id != null)
            {
                writer.WriteElementString("FinancialInstitutionAccount_id", this.updatedValues.FinancialInstitutionAccount_id.ToString());
            }
            else if (this.initialValues.FinancialInstitutionAccount_idHasValue && FinancialInstitutionAccount_id != null)
            {
                writer.WriteElementString("FinancialInstitutionAccount_id", this.initialValues.FinancialInstitutionAccount_id.ToString());
            }

            if (this.updatedValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.updatedValues.Contract_id.ToString());
            }
            else if (this.initialValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.initialValues.Contract_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
