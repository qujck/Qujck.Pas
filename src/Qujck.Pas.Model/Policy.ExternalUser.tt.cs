//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Policy.DataObjects;

namespace Qujck.Pas.Model.Policy
{
    [Serializable]
    public sealed partial class ExternalUser : AbstractPolicyEntity
    {
        internal ExternalUserDo initialValues { get; private set; }
        internal ExternalUserDo updatedValues { get; private set; }
        internal Action<ExternalUserDo, string> loadMissingValue { private get; set; }

        public ExternalUser()
        {
            this.initialValues = new ExternalUserDo();
            this.updatedValues = new ExternalUserDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Policy";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "ExternalUser";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "clientID";
                yield return "email";
                yield return "emailVerified";
                yield return "name";
                yield return "nickname";
                yield return "picture";
                yield return "givenName";
                yield return "familyName";
                yield return "locale";
                yield return "userID";
                yield return "Party_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [XmlElement(ElementName="clientID")]
        public string clientID 
	    { 
            get
            {
                if (this.updatedValues.clientIDHasValue)
                {
                    return this.updatedValues.clientID;
                }
                
                if (!this.initialValues.clientIDHasValue)
                {
                    this.loadMissingValue(this.initialValues, "clientID");
                    this.initialValues.clientIDHasValue = true;
                }

                return this.initialValues.clientID;
            }
            set
            {
                this.updatedValues.clientID = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="email")]
        public string email 
	    { 
            get
            {
                if (this.updatedValues.emailHasValue)
                {
                    return this.updatedValues.email;
                }
                
                if (!this.initialValues.emailHasValue)
                {
                    this.loadMissingValue(this.initialValues, "email");
                    this.initialValues.emailHasValue = true;
                }

                return this.initialValues.email;
            }
            set
            {
                this.updatedValues.email = value;
            }
        }

        [RegularExpression(@"[YN]{1}")]
        [XmlElement(ElementName="emailVerified")]
        public Indicator emailVerified 
	    { 
            get
            {
                if (this.updatedValues.emailVerifiedHasValue)
                {
                    return this.updatedValues.emailVerified;
                }
                
                if (!this.initialValues.emailVerifiedHasValue)
                {
                    this.loadMissingValue(this.initialValues, "emailVerified");
                    this.initialValues.emailVerifiedHasValue = true;
                }

                return this.initialValues.emailVerified;
            }
            set
            {
                this.updatedValues.emailVerified = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="name")]
        public string name 
	    { 
            get
            {
                if (this.updatedValues.nameHasValue)
                {
                    return this.updatedValues.name;
                }
                
                if (!this.initialValues.nameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "name");
                    this.initialValues.nameHasValue = true;
                }

                return this.initialValues.name;
            }
            set
            {
                this.updatedValues.name = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="nickname")]
        public string nickname 
	    { 
            get
            {
                if (this.updatedValues.nicknameHasValue)
                {
                    return this.updatedValues.nickname;
                }
                
                if (!this.initialValues.nicknameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "nickname");
                    this.initialValues.nicknameHasValue = true;
                }

                return this.initialValues.nickname;
            }
            set
            {
                this.updatedValues.nickname = value;
            }
        }

        [XmlElement(ElementName="picture")]
        public string picture 
	    { 
            get
            {
                if (this.updatedValues.pictureHasValue)
                {
                    return this.updatedValues.picture;
                }
                
                if (!this.initialValues.pictureHasValue)
                {
                    this.loadMissingValue(this.initialValues, "picture");
                    this.initialValues.pictureHasValue = true;
                }

                return this.initialValues.picture;
            }
            set
            {
                this.updatedValues.picture = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="givenName")]
        public string givenName 
	    { 
            get
            {
                if (this.updatedValues.givenNameHasValue)
                {
                    return this.updatedValues.givenName;
                }
                
                if (!this.initialValues.givenNameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "givenName");
                    this.initialValues.givenNameHasValue = true;
                }

                return this.initialValues.givenName;
            }
            set
            {
                this.updatedValues.givenName = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="familyName")]
        public string familyName 
	    { 
            get
            {
                if (this.updatedValues.familyNameHasValue)
                {
                    return this.updatedValues.familyName;
                }
                
                if (!this.initialValues.familyNameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "familyName");
                    this.initialValues.familyNameHasValue = true;
                }

                return this.initialValues.familyName;
            }
            set
            {
                this.updatedValues.familyName = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="locale")]
        public string locale 
	    { 
            get
            {
                if (this.updatedValues.localeHasValue)
                {
                    return this.updatedValues.locale;
                }
                
                if (!this.initialValues.localeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "locale");
                    this.initialValues.localeHasValue = true;
                }

                return this.initialValues.locale;
            }
            set
            {
                this.updatedValues.locale = value;
            }
        }

        [XmlElement(ElementName="userID")]
        public string userID 
	    { 
            get
            {
                if (this.updatedValues.userIDHasValue)
                {
                    return this.updatedValues.userID;
                }
                
                if (!this.initialValues.userIDHasValue)
                {
                    this.loadMissingValue(this.initialValues, "userID");
                    this.initialValues.userIDHasValue = true;
                }

                return this.initialValues.userID;
            }
            set
            {
                this.updatedValues.userID = value;
            }
        }

        [XmlElement(ElementName="Party_id")]
        public long Party_id 
	    { 
            get
            {
                if (this.updatedValues.Party_idHasValue)
                {
                    return this.updatedValues.Party_id;
                }
                
                if (!this.initialValues.Party_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Party_id");
                    this.initialValues.Party_idHasValue = true;
                }

                return this.initialValues.Party_id;
            }
            set
            {
                this.updatedValues.Party_id = value;
            }
        }

        public bool PartyIsLoaded { get; private set; }
        internal Func<Party> PartyQuery { private get; set; }
        public Party Party
        {
            get
            {
                if (this.PartyQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.PartyQuery();
                    if (!this.PartyIsLoaded)
                    {
                        this.PartyIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "clientID");
            if (e2 != null) 
            {
                this.clientID = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "email");
            if (e3 != null) 
            {
                this.email = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "emailVerified");
            if (e4 != null)
            {
                this.emailVerified = e4.Value;
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "name");
            if (e5 != null) 
            {
                this.name = e5.Value;
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "nickname");
            if (e6 != null) 
            {
                this.nickname = e6.Value;
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "picture");
            if (e7 != null) 
            {
                this.picture = e7.Value;
            }

            XElement e8 = elements.FirstOrDefault(x => x.Name == "givenName");
            if (e8 != null) 
            {
                this.givenName = e8.Value;
            }

            XElement e9 = elements.FirstOrDefault(x => x.Name == "familyName");
            if (e9 != null) 
            {
                this.familyName = e9.Value;
            }

            XElement e10 = elements.FirstOrDefault(x => x.Name == "locale");
            if (e10 != null) 
            {
                this.locale = e10.Value;
            }

            XElement e11 = elements.FirstOrDefault(x => x.Name == "userID");
            if (e11 != null) 
            {
                this.userID = e11.Value;
            }

            XElement e12 = elements.FirstOrDefault(x => x.Name == "Party_id");
            if (e12 != null)
            {
                this.Party_id = long.Parse(e12.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.clientIDHasValue && !string.IsNullOrEmpty(clientID))
            {
                writer.WriteElementString("clientID", this.updatedValues.clientID);
            }
            else if (this.initialValues.clientIDHasValue && !string.IsNullOrEmpty(clientID))
            {
                writer.WriteElementString("clientID", this.initialValues.clientID);
            }

            if (this.updatedValues.emailHasValue && !string.IsNullOrEmpty(email))
            {
                writer.WriteElementString("email", this.updatedValues.email);
            }
            else if (this.initialValues.emailHasValue && !string.IsNullOrEmpty(email))
            {
                writer.WriteElementString("email", this.initialValues.email);
            }

            if (this.updatedValues.emailVerifiedHasValue && emailVerified != Indicator.Null)
            {
                writer.WriteElementString("emailVerified", this.updatedValues.emailVerified.Value);
            }
            else if (this.initialValues.emailVerifiedHasValue && emailVerified != Indicator.Null)
            {
                writer.WriteElementString("emailVerified", this.initialValues.emailVerified.Value);
            }

            if (this.updatedValues.nameHasValue && !string.IsNullOrEmpty(name))
            {
                writer.WriteElementString("name", this.updatedValues.name);
            }
            else if (this.initialValues.nameHasValue && !string.IsNullOrEmpty(name))
            {
                writer.WriteElementString("name", this.initialValues.name);
            }

            if (this.updatedValues.nicknameHasValue && !string.IsNullOrEmpty(nickname))
            {
                writer.WriteElementString("nickname", this.updatedValues.nickname);
            }
            else if (this.initialValues.nicknameHasValue && !string.IsNullOrEmpty(nickname))
            {
                writer.WriteElementString("nickname", this.initialValues.nickname);
            }

            if (this.updatedValues.pictureHasValue && !string.IsNullOrEmpty(picture))
            {
                writer.WriteElementString("picture", this.updatedValues.picture);
            }
            else if (this.initialValues.pictureHasValue && !string.IsNullOrEmpty(picture))
            {
                writer.WriteElementString("picture", this.initialValues.picture);
            }

            if (this.updatedValues.givenNameHasValue && !string.IsNullOrEmpty(givenName))
            {
                writer.WriteElementString("givenName", this.updatedValues.givenName);
            }
            else if (this.initialValues.givenNameHasValue && !string.IsNullOrEmpty(givenName))
            {
                writer.WriteElementString("givenName", this.initialValues.givenName);
            }

            if (this.updatedValues.familyNameHasValue && !string.IsNullOrEmpty(familyName))
            {
                writer.WriteElementString("familyName", this.updatedValues.familyName);
            }
            else if (this.initialValues.familyNameHasValue && !string.IsNullOrEmpty(familyName))
            {
                writer.WriteElementString("familyName", this.initialValues.familyName);
            }

            if (this.updatedValues.localeHasValue && !string.IsNullOrEmpty(locale))
            {
                writer.WriteElementString("locale", this.updatedValues.locale);
            }
            else if (this.initialValues.localeHasValue && !string.IsNullOrEmpty(locale))
            {
                writer.WriteElementString("locale", this.initialValues.locale);
            }

            if (this.updatedValues.userIDHasValue && !string.IsNullOrEmpty(userID))
            {
                writer.WriteElementString("userID", this.updatedValues.userID);
            }
            else if (this.initialValues.userIDHasValue && !string.IsNullOrEmpty(userID))
            {
                writer.WriteElementString("userID", this.initialValues.userID);
            }

            if (this.updatedValues.Party_idHasValue)
            {
                writer.WriteElementString("Party_id", this.updatedValues.Party_id.ToString());
            }
            else if (this.initialValues.Party_idHasValue)
            {
                writer.WriteElementString("Party_id", this.initialValues.Party_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
