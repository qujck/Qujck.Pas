//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Security.DataObjects;

namespace Qujck.Pas.Model.Security
{
    [Serializable]
    public sealed partial class SecurityEntitlement : AbstractSecurityEntity, ICode
    {
        internal SecurityEntitlementDo initialValues { get; private set; }
        internal SecurityEntitlementDo updatedValues { get; private set; }
        internal Action<SecurityEntitlementDo, string> loadMissingValue { private get; set; }

        public SecurityEntitlement()
        {
            this.initialValues = new SecurityEntitlementDo();
            this.updatedValues = new SecurityEntitlementDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Security";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "SecurityEntitlement";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "code";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="code")]
        public string code 
	    { 
            get
            {
                if (this.updatedValues.codeHasValue)
                {
                    return this.updatedValues.code;
                }
                
                if (!this.initialValues.codeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "code");
                    this.initialValues.codeHasValue = true;
                }

                return this.initialValues.code;
            }
            set
            {
                this.updatedValues.code = value;
            }
        }

        public bool SecurityUser_SecurityEntitlementsAreLoaded { get; private set; }
        internal Func<IEnumerable<SecurityUser_SecurityEntitlement>> SecurityUser_SecurityEntitlementsQuery { private get; set; }
        public IEnumerable<SecurityUser_SecurityEntitlement> SecurityUser_SecurityEntitlements
        {
            get
            {
                if (this.SecurityUser_SecurityEntitlementsQuery == null)
                {
                    return Enumerable.Empty<SecurityUser_SecurityEntitlement>();
                }
                else
                {
                    var result = this.SecurityUser_SecurityEntitlementsQuery();
                    if (!this.SecurityUser_SecurityEntitlementsAreLoaded)
                    {
                        this.SecurityUser_SecurityEntitlementsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "code");
            if (e2 != null) 
            {
                this.code = e2.Value;
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.updatedValues.code);
            }
            else if (this.initialValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.initialValues.code);
            }

            this.AfterWriteXml(writer);
        }
    }
}
