<#@ template debug="false" hostspecific="true" language="C#" 
#><#@ assembly name="System.Core" 
#><#@ assembly name="System.Data" 
#><#@ import namespace="System.Linq" 
#><#@ import namespace="System.Text" 
#><#@ import namespace="System.Collections.Generic" 
#><#@ output extension=".cs" encoding="utf-8" 
#><#@ include file="..\..\private.ttinclude" 
#><#@ include file="..\Qujck.Pas.Core\tt\CommonTextTemplate.ttinclude" 
#><#@ include file="..\Qujck.Pas.Core\tt\MultipleOutputHelper.ttinclude" 
#><# Manager manager = Manager.Create(Host, GenerationEnvironment); #>
<# 
foreach(string schemaName in new string[] { "Instruction", "Interface", "Policy", "Standing", "Security" })
{
    foreach(Entity e in GetEntities(schemaName))
    {
        string baseClass = string.Format("Abstract{0}Entity", schemaName);
        manager.StartNewFile(String.Format("{0}.{1}.tt.cs", schemaName, e.Name));

        IEnumerable<Relationship> relationships = schemaName == "Instruction"
            ? GetInstructionRelationships(e.Name)
            : GetEntityRelationships(e.Name, e.Name);

		bool referenceContract = 
            schemaName == "Instruction" && 
            GetEntityDetails(e.Name).Where(d => d.Attribute == "Contract_id").FirstOrDefault() != null;
		bool referenceParty = 
            schemaName == "Instruction" && 
            GetEntityDetails(e.Name).Where(d => d.Attribute == "Party_id").FirstOrDefault() != null;
        bool hasCode = GetEntityDetails(e.Name).Any(u => u.Attribute == "code");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.<#= schemaName #>.DataObjects;
<# if (referenceContract || referenceParty) 
	    {
#>
using Qujck.Pas.Model.Policy;
<#
        }
#>

namespace Qujck.Pas.Model.<#= schemaName #>
{
    [Serializable]
    public sealed partial class <#= e.Name #> : <#= baseClass #><# if (referenceContract) 
	    {
		    #>, IReferenceContract<#
        } #><# if (hasCode)
        {
            #>, ICode<#
        } #><# if (referenceParty)
        {
            #>, IReferenceParty<#
        }#>

    {
        internal <#= e.Name #>Do initialValues { get; private set; }
        internal <#= e.Name #>Do updatedValues { get; private set; }
        internal Action<<#= e.Name #>Do, string> loadMissingValue { private get; set; }

        public <#= e.Name #>()
        {
            this.initialValues = new <#= e.Name #>Do();
            this.updatedValues = new <#= e.Name #>Do();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "<#= schemaName #>";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "<#= e.Name #>";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {<#
                foreach(EntityDetail ed in GetEntityDetails(e.Name))
                {#>

                yield return "<#= ed.Attribute #>";<#
                }#>

            }
        }
<#
        foreach(EntityDetail ed in GetEntityDetails(e.Name))
        {
            if (ed.IsIdentity == null)
            {
#>

<#= CreateProperty(ed) #>
	    { 
            get
            {
                if (this.updatedValues.<#= ed.Attribute #>HasValue)
                {
                    return this.updatedValues.<#= ed.Attribute #>;
                }
                
                if (!this.initialValues.<#= ed.Attribute #>HasValue)
                {
                    this.loadMissingValue(this.initialValues, "<#= ed.Attribute #>");
                    this.initialValues.<#= ed.Attribute #>HasValue = true;
                }

                return this.initialValues.<#= ed.Attribute #>;
            }
            set
            {
                this.updatedValues.<#= ed.Attribute #> = value;
            }
        }
<#
            }
            else
            {#>

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }
<#
            }
        }#>
<#

        if (relationships.Count() > 0)
        {
            foreach(Relationship r in relationships)
            {
                if (r.PKEntity == e.Name)
                {
                    if (r.FKMultiplicity == '?' || r.FKMultiplicity == '.')
                    {
#>

        public bool <#= r.FKEntity #>IsLoaded { get; private set; }
        internal Func<<#= r.FKEntity #>> <#= r.FKEntity #>Query { private get; set; }
        public <#= r.FKEntity #> <#= r.FKEntity #>
        {
            get
            {
                if (this.<#= r.FKEntity #>Query == null)
                {
                    return null;
                }
                else
                {
                    var result = this.<#= r.FKEntity #>Query();
                    if (!this.<#= r.FKEntity #>IsLoaded)
                    {
                        this.<#= r.FKEntity #>IsLoaded = result != null;
                    }

                    return result;
                }
            }
        }
<#
                    }
                    else
                    {
#>

        public bool <#= PluralOf(r.FKEntity) #>AreLoaded { get; private set; }
        internal Func<IEnumerable<<#= r.FKEntity #>>> <#= PluralOf(r.FKEntity) #>Query { private get; set; }
        public IEnumerable<<#= r.FKEntity #>> <#= PluralOf(r.FKEntity) #>
        {
            get
            {
                if (this.<#= PluralOf(r.FKEntity) #>Query == null)
                {
                    return Enumerable.Empty<<#= r.FKEntity #>>();
                }
                else
                {
                    var result = this.<#= PluralOf(r.FKEntity) #>Query();
                    if (!this.<#= PluralOf(r.FKEntity) #>AreLoaded)
                    {
                        this.<#= PluralOf(r.FKEntity) #>AreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }
<#
                    }
                }
                else
                {
#>

        public bool <#= r.PKEntity #>IsLoaded { get; private set; }
        internal Func<<#= r.PKEntity #>> <#= r.PKEntity #>Query { private get; set; }
        public <#= r.PKEntity #> <#= r.PKEntity #>
        {
            get
            {
                if (this.<#= r.PKEntity #>Query == null)
                {
                    return null;
                }
                else
                {
                    var result = this.<#= r.PKEntity #>Query();
                    if (!this.<#= r.PKEntity #>IsLoaded)
                    {
                        this.<#= r.PKEntity #>IsLoaded = result != null;
                    }

                    return result;
                }
            }
        }
<#
                }
            }
        }
#>

<#
			if (referenceContract)
            {#>
        [XmlIgnore]
        [NotMapped]
        public Contract Contract { get; set; }

<#

            }
			if (referenceParty)
            {#>
        [XmlIgnore]
        [NotMapped]
        public Party Party { get; set; }

<#

            }
#>
        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);
<#
            int i = 0;
            foreach(EntityDetail ed in GetEntityDetails(e.Name))
            {
                i++;
#>

            XElement e<#= i #> = elements.FirstOrDefault(x => x.Name == "<#= ed.Attribute #>");
<#
                if (!string.IsNullOrEmpty(ed.Enum))
                {
#>
            if (e<#= i #> != null)
            {
                this.<#= ed.Attribute #> = e<#= i #>.Value;
            }
<#
                }
                else if (ed.DataType.dotNET == "string")
                {
#>
            if (e<#= i #> != null) 
            {
                this.<#= ed.Attribute #> = e<#= i #>.Value;
            }
<#
                }
                else
                {
#>
            if (e<#= i #> != null)
            {
                this.<#= ed.Attribute #> = <#= ed.DataType.dotNET #>.Parse(e<#= i #>.Value);
            }
<#
                }
            }
#>

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);
<#  
            foreach(EntityDetail ed in GetEntityDetails(e.Name))
            {
                if (!string.IsNullOrEmpty(ed.Enum))
                {
#>

            if (this.updatedValues.<#= ed.Attribute #>HasValue && <#= ed.Attribute #> != <#= ed.Enum #>.Null)
            {
                writer.WriteElementString("<#= ed.Attribute #>", this.updatedValues.<#= ed.Attribute #>.Value);
            }
            else if (this.initialValues.<#= ed.Attribute #>HasValue && <#= ed.Attribute #> != <#= ed.Enum #>.Null)
            {
                writer.WriteElementString("<#= ed.Attribute #>", this.initialValues.<#= ed.Attribute #>.Value);
            }
<#
                }
                else if (ed.DataType.dotNET == "string")
                {
#>

            if (this.updatedValues.<#= ed.Attribute #>HasValue && !string.IsNullOrEmpty(<#= ed.Attribute #>))
            {
                writer.WriteElementString("<#= ed.Attribute #>", this.updatedValues.<#= ed.Attribute #>);
            }
            else if (this.initialValues.<#= ed.Attribute #>HasValue && !string.IsNullOrEmpty(<#= ed.Attribute #>))
            {
                writer.WriteElementString("<#= ed.Attribute #>", this.initialValues.<#= ed.Attribute #>);
            }
<#
                }
                else if ((ed.Nullable ?? "Y") == "Y")
                {
#>

            if (this.updatedValues.<#= ed.Attribute #>HasValue && <#= ed.Attribute #> != null)
            {
                writer.WriteElementString("<#= ed.Attribute #>", this.updatedValues.<#= ed.Attribute #>.ToString());
            }
            else if (this.initialValues.<#= ed.Attribute #>HasValue && <#= ed.Attribute #> != null)
            {
                writer.WriteElementString("<#= ed.Attribute #>", this.initialValues.<#= ed.Attribute #>.ToString());
            }
<#
                }
                else if (ed.IsIdentity == null)
                {
#>

            if (this.updatedValues.<#= ed.Attribute #>HasValue)
            {
                writer.WriteElementString("<#= ed.Attribute #>", this.updatedValues.<#= ed.Attribute #>.ToString());
            }
            else if (this.initialValues.<#= ed.Attribute #>HasValue)
            {
                writer.WriteElementString("<#= ed.Attribute #>", this.initialValues.<#= ed.Attribute #>.ToString());
            }
<#
                }
                else
                {
#>

            writer.WriteElementString("<#= ed.Attribute #>", this.initialValues.<#= ed.Attribute #>.ToString());
<#
                }
            }
#>

            this.AfterWriteXml(writer);
        }
    }
}
<#
        manager.EndBlock();
    }
}
manager.Process(true); 
#>