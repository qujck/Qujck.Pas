//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Policy.DataObjects;

namespace Qujck.Pas.Model.Policy
{
    [Serializable]
    public sealed partial class Disbursement : AbstractPolicyEntity
    {
        internal DisbursementDo initialValues { get; private set; }
        internal DisbursementDo updatedValues { get; private set; }
        internal Action<DisbursementDo, string> loadMissingValue { private get; set; }

        public Disbursement()
        {
            this.initialValues = new DisbursementDo();
            this.updatedValues = new DisbursementDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Policy";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "Disbursement";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "amount";
                yield return "paymentMethod";
                yield return "accountName";
                yield return "accountSortCode";
                yield return "accountNumber";
                yield return "Contract_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [XmlElement(ElementName="amount")]
        public decimal? amount 
	    { 
            get
            {
                if (this.updatedValues.amountHasValue)
                {
                    return this.updatedValues.amount;
                }
                
                if (!this.initialValues.amountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "amount");
                    this.initialValues.amountHasValue = true;
                }

                return this.initialValues.amount;
            }
            set
            {
                this.updatedValues.amount = value;
            }
        }

        [XmlElement(ElementName="paymentMethod")]
        public PaymentMethod paymentMethod 
	    { 
            get
            {
                if (this.updatedValues.paymentMethodHasValue)
                {
                    return this.updatedValues.paymentMethod;
                }
                
                if (!this.initialValues.paymentMethodHasValue)
                {
                    this.loadMissingValue(this.initialValues, "paymentMethod");
                    this.initialValues.paymentMethodHasValue = true;
                }

                return this.initialValues.paymentMethod;
            }
            set
            {
                this.updatedValues.paymentMethod = value;
            }
        }

        [StringLength(35)]
        [XmlElement(ElementName="accountName")]
        public string accountName 
	    { 
            get
            {
                if (this.updatedValues.accountNameHasValue)
                {
                    return this.updatedValues.accountName;
                }
                
                if (!this.initialValues.accountNameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "accountName");
                    this.initialValues.accountNameHasValue = true;
                }

                return this.initialValues.accountName;
            }
            set
            {
                this.updatedValues.accountName = value;
            }
        }

        [StringLength(6)]
        [RegularExpression(@"\d{6}")]
        [XmlElement(ElementName="accountSortCode")]
        public string accountSortCode 
	    { 
            get
            {
                if (this.updatedValues.accountSortCodeHasValue)
                {
                    return this.updatedValues.accountSortCode;
                }
                
                if (!this.initialValues.accountSortCodeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "accountSortCode");
                    this.initialValues.accountSortCodeHasValue = true;
                }

                return this.initialValues.accountSortCode;
            }
            set
            {
                this.updatedValues.accountSortCode = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="accountNumber")]
        public string accountNumber 
	    { 
            get
            {
                if (this.updatedValues.accountNumberHasValue)
                {
                    return this.updatedValues.accountNumber;
                }
                
                if (!this.initialValues.accountNumberHasValue)
                {
                    this.loadMissingValue(this.initialValues, "accountNumber");
                    this.initialValues.accountNumberHasValue = true;
                }

                return this.initialValues.accountNumber;
            }
            set
            {
                this.updatedValues.accountNumber = value;
            }
        }

        [XmlElement(ElementName="Contract_id")]
        public long Contract_id 
	    { 
            get
            {
                if (this.updatedValues.Contract_idHasValue)
                {
                    return this.updatedValues.Contract_id;
                }
                
                if (!this.initialValues.Contract_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Contract_id");
                    this.initialValues.Contract_idHasValue = true;
                }

                return this.initialValues.Contract_id;
            }
            set
            {
                this.updatedValues.Contract_id = value;
            }
        }

        public bool ContractIsLoaded { get; private set; }
        internal Func<Contract> ContractQuery { private get; set; }
        public Contract Contract
        {
            get
            {
                if (this.ContractQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.ContractQuery();
                    if (!this.ContractIsLoaded)
                    {
                        this.ContractIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "amount");
            if (e2 != null)
            {
                this.amount = decimal.Parse(e2.Value);
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "paymentMethod");
            if (e3 != null)
            {
                this.paymentMethod = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "accountName");
            if (e4 != null) 
            {
                this.accountName = e4.Value;
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "accountSortCode");
            if (e5 != null) 
            {
                this.accountSortCode = e5.Value;
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "accountNumber");
            if (e6 != null) 
            {
                this.accountNumber = e6.Value;
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "Contract_id");
            if (e7 != null)
            {
                this.Contract_id = long.Parse(e7.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.amountHasValue && amount != null)
            {
                writer.WriteElementString("amount", this.updatedValues.amount.ToString());
            }
            else if (this.initialValues.amountHasValue && amount != null)
            {
                writer.WriteElementString("amount", this.initialValues.amount.ToString());
            }

            if (this.updatedValues.paymentMethodHasValue && paymentMethod != PaymentMethod.Null)
            {
                writer.WriteElementString("paymentMethod", this.updatedValues.paymentMethod.Value);
            }
            else if (this.initialValues.paymentMethodHasValue && paymentMethod != PaymentMethod.Null)
            {
                writer.WriteElementString("paymentMethod", this.initialValues.paymentMethod.Value);
            }

            if (this.updatedValues.accountNameHasValue && !string.IsNullOrEmpty(accountName))
            {
                writer.WriteElementString("accountName", this.updatedValues.accountName);
            }
            else if (this.initialValues.accountNameHasValue && !string.IsNullOrEmpty(accountName))
            {
                writer.WriteElementString("accountName", this.initialValues.accountName);
            }

            if (this.updatedValues.accountSortCodeHasValue && !string.IsNullOrEmpty(accountSortCode))
            {
                writer.WriteElementString("accountSortCode", this.updatedValues.accountSortCode);
            }
            else if (this.initialValues.accountSortCodeHasValue && !string.IsNullOrEmpty(accountSortCode))
            {
                writer.WriteElementString("accountSortCode", this.initialValues.accountSortCode);
            }

            if (this.updatedValues.accountNumberHasValue && !string.IsNullOrEmpty(accountNumber))
            {
                writer.WriteElementString("accountNumber", this.updatedValues.accountNumber);
            }
            else if (this.initialValues.accountNumberHasValue && !string.IsNullOrEmpty(accountNumber))
            {
                writer.WriteElementString("accountNumber", this.initialValues.accountNumber);
            }

            if (this.updatedValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.updatedValues.Contract_id.ToString());
            }
            else if (this.initialValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.initialValues.Contract_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
