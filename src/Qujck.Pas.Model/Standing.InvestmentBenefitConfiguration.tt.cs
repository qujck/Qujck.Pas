//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Standing.DataObjects;

namespace Qujck.Pas.Model.Standing
{
    [Serializable]
    public sealed partial class InvestmentBenefitConfiguration : AbstractStandingEntity, ICode
    {
        internal InvestmentBenefitConfigurationDo initialValues { get; private set; }
        internal InvestmentBenefitConfigurationDo updatedValues { get; private set; }
        internal Action<InvestmentBenefitConfigurationDo, string> loadMissingValue { private get; set; }

        public InvestmentBenefitConfiguration()
        {
            this.initialValues = new InvestmentBenefitConfigurationDo();
            this.updatedValues = new InvestmentBenefitConfigurationDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Standing";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "InvestmentBenefitConfiguration";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "code";
                yield return "type";
                yield return "minimumAmount";
                yield return "maximumAmount";
                yield return "minimumPercentage";
                yield return "maximumPercentage";
                yield return "maximumChangePercentage";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="code")]
        public string code 
	    { 
            get
            {
                if (this.updatedValues.codeHasValue)
                {
                    return this.updatedValues.code;
                }
                
                if (!this.initialValues.codeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "code");
                    this.initialValues.codeHasValue = true;
                }

                return this.initialValues.code;
            }
            set
            {
                this.updatedValues.code = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="type")]
        public string type 
	    { 
            get
            {
                if (this.updatedValues.typeHasValue)
                {
                    return this.updatedValues.type;
                }
                
                if (!this.initialValues.typeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "type");
                    this.initialValues.typeHasValue = true;
                }

                return this.initialValues.type;
            }
            set
            {
                this.updatedValues.type = value;
            }
        }

        [XmlElement(ElementName="minimumAmount")]
        public decimal minimumAmount 
	    { 
            get
            {
                if (this.updatedValues.minimumAmountHasValue)
                {
                    return this.updatedValues.minimumAmount;
                }
                
                if (!this.initialValues.minimumAmountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "minimumAmount");
                    this.initialValues.minimumAmountHasValue = true;
                }

                return this.initialValues.minimumAmount;
            }
            set
            {
                this.updatedValues.minimumAmount = value;
            }
        }

        [XmlElement(ElementName="maximumAmount")]
        public decimal maximumAmount 
	    { 
            get
            {
                if (this.updatedValues.maximumAmountHasValue)
                {
                    return this.updatedValues.maximumAmount;
                }
                
                if (!this.initialValues.maximumAmountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maximumAmount");
                    this.initialValues.maximumAmountHasValue = true;
                }

                return this.initialValues.maximumAmount;
            }
            set
            {
                this.updatedValues.maximumAmount = value;
            }
        }

        [XmlElement(ElementName="minimumPercentage")]
        public decimal minimumPercentage 
	    { 
            get
            {
                if (this.updatedValues.minimumPercentageHasValue)
                {
                    return this.updatedValues.minimumPercentage;
                }
                
                if (!this.initialValues.minimumPercentageHasValue)
                {
                    this.loadMissingValue(this.initialValues, "minimumPercentage");
                    this.initialValues.minimumPercentageHasValue = true;
                }

                return this.initialValues.minimumPercentage;
            }
            set
            {
                this.updatedValues.minimumPercentage = value;
            }
        }

        [XmlElement(ElementName="maximumPercentage")]
        public decimal maximumPercentage 
	    { 
            get
            {
                if (this.updatedValues.maximumPercentageHasValue)
                {
                    return this.updatedValues.maximumPercentage;
                }
                
                if (!this.initialValues.maximumPercentageHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maximumPercentage");
                    this.initialValues.maximumPercentageHasValue = true;
                }

                return this.initialValues.maximumPercentage;
            }
            set
            {
                this.updatedValues.maximumPercentage = value;
            }
        }

        [XmlElement(ElementName="maximumChangePercentage")]
        public decimal maximumChangePercentage 
	    { 
            get
            {
                if (this.updatedValues.maximumChangePercentageHasValue)
                {
                    return this.updatedValues.maximumChangePercentage;
                }
                
                if (!this.initialValues.maximumChangePercentageHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maximumChangePercentage");
                    this.initialValues.maximumChangePercentageHasValue = true;
                }

                return this.initialValues.maximumChangePercentage;
            }
            set
            {
                this.updatedValues.maximumChangePercentage = value;
            }
        }

        public bool InvestmentBenefitConfiguration_FundsAreLoaded { get; private set; }
        internal Func<IEnumerable<InvestmentBenefitConfiguration_Fund>> InvestmentBenefitConfiguration_FundsQuery { private get; set; }
        public IEnumerable<InvestmentBenefitConfiguration_Fund> InvestmentBenefitConfiguration_Funds
        {
            get
            {
                if (this.InvestmentBenefitConfiguration_FundsQuery == null)
                {
                    return Enumerable.Empty<InvestmentBenefitConfiguration_Fund>();
                }
                else
                {
                    var result = this.InvestmentBenefitConfiguration_FundsQuery();
                    if (!this.InvestmentBenefitConfiguration_FundsAreLoaded)
                    {
                        this.InvestmentBenefitConfiguration_FundsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool ProductConfiguration_InvestmentBenefitConfigurationsAreLoaded { get; private set; }
        internal Func<IEnumerable<ProductConfiguration_InvestmentBenefitConfiguration>> ProductConfiguration_InvestmentBenefitConfigurationsQuery { private get; set; }
        public IEnumerable<ProductConfiguration_InvestmentBenefitConfiguration> ProductConfiguration_InvestmentBenefitConfigurations
        {
            get
            {
                if (this.ProductConfiguration_InvestmentBenefitConfigurationsQuery == null)
                {
                    return Enumerable.Empty<ProductConfiguration_InvestmentBenefitConfiguration>();
                }
                else
                {
                    var result = this.ProductConfiguration_InvestmentBenefitConfigurationsQuery();
                    if (!this.ProductConfiguration_InvestmentBenefitConfigurationsAreLoaded)
                    {
                        this.ProductConfiguration_InvestmentBenefitConfigurationsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "code");
            if (e2 != null) 
            {
                this.code = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "type");
            if (e3 != null) 
            {
                this.type = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "minimumAmount");
            if (e4 != null)
            {
                this.minimumAmount = decimal.Parse(e4.Value);
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "maximumAmount");
            if (e5 != null)
            {
                this.maximumAmount = decimal.Parse(e5.Value);
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "minimumPercentage");
            if (e6 != null)
            {
                this.minimumPercentage = decimal.Parse(e6.Value);
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "maximumPercentage");
            if (e7 != null)
            {
                this.maximumPercentage = decimal.Parse(e7.Value);
            }

            XElement e8 = elements.FirstOrDefault(x => x.Name == "maximumChangePercentage");
            if (e8 != null)
            {
                this.maximumChangePercentage = decimal.Parse(e8.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.updatedValues.code);
            }
            else if (this.initialValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.initialValues.code);
            }

            if (this.updatedValues.typeHasValue && !string.IsNullOrEmpty(type))
            {
                writer.WriteElementString("type", this.updatedValues.type);
            }
            else if (this.initialValues.typeHasValue && !string.IsNullOrEmpty(type))
            {
                writer.WriteElementString("type", this.initialValues.type);
            }

            if (this.updatedValues.minimumAmountHasValue)
            {
                writer.WriteElementString("minimumAmount", this.updatedValues.minimumAmount.ToString());
            }
            else if (this.initialValues.minimumAmountHasValue)
            {
                writer.WriteElementString("minimumAmount", this.initialValues.minimumAmount.ToString());
            }

            if (this.updatedValues.maximumAmountHasValue)
            {
                writer.WriteElementString("maximumAmount", this.updatedValues.maximumAmount.ToString());
            }
            else if (this.initialValues.maximumAmountHasValue)
            {
                writer.WriteElementString("maximumAmount", this.initialValues.maximumAmount.ToString());
            }

            if (this.updatedValues.minimumPercentageHasValue)
            {
                writer.WriteElementString("minimumPercentage", this.updatedValues.minimumPercentage.ToString());
            }
            else if (this.initialValues.minimumPercentageHasValue)
            {
                writer.WriteElementString("minimumPercentage", this.initialValues.minimumPercentage.ToString());
            }

            if (this.updatedValues.maximumPercentageHasValue)
            {
                writer.WriteElementString("maximumPercentage", this.updatedValues.maximumPercentage.ToString());
            }
            else if (this.initialValues.maximumPercentageHasValue)
            {
                writer.WriteElementString("maximumPercentage", this.initialValues.maximumPercentage.ToString());
            }

            if (this.updatedValues.maximumChangePercentageHasValue)
            {
                writer.WriteElementString("maximumChangePercentage", this.updatedValues.maximumChangePercentage.ToString());
            }
            else if (this.initialValues.maximumChangePercentageHasValue)
            {
                writer.WriteElementString("maximumChangePercentage", this.initialValues.maximumChangePercentage.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
