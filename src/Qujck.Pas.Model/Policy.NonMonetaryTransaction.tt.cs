//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Policy.DataObjects;

namespace Qujck.Pas.Model.Policy
{
    [Serializable]
    public sealed partial class NonMonetaryTransaction : AbstractPolicyEntity
    {
        internal NonMonetaryTransactionDo initialValues { get; private set; }
        internal NonMonetaryTransactionDo updatedValues { get; private set; }
        internal Action<NonMonetaryTransactionDo, string> loadMissingValue { private get; set; }

        public NonMonetaryTransaction()
        {
            this.initialValues = new NonMonetaryTransactionDo();
            this.updatedValues = new NonMonetaryTransactionDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Policy";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "NonMonetaryTransaction";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "type";
                yield return "date";
                yield return "time";
                yield return "referenceType";
                yield return "reference_id";
                yield return "Party_id";
                yield return "Contract_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [XmlElement(ElementName="type")]
        public NonMonetaryTransactionType type 
	    { 
            get
            {
                if (this.updatedValues.typeHasValue)
                {
                    return this.updatedValues.type;
                }
                
                if (!this.initialValues.typeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "type");
                    this.initialValues.typeHasValue = true;
                }

                return this.initialValues.type;
            }
            set
            {
                this.updatedValues.type = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="date")]
        public System.DateTime date 
	    { 
            get
            {
                if (this.updatedValues.dateHasValue)
                {
                    return this.updatedValues.date;
                }
                
                if (!this.initialValues.dateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "date");
                    this.initialValues.dateHasValue = true;
                }

                return this.initialValues.date;
            }
            set
            {
                this.updatedValues.date = value;
            }
        }

        [XmlElement(ElementName="time")]
        public System.TimeSpan? time 
	    { 
            get
            {
                if (this.updatedValues.timeHasValue)
                {
                    return this.updatedValues.time;
                }
                
                if (!this.initialValues.timeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "time");
                    this.initialValues.timeHasValue = true;
                }

                return this.initialValues.time;
            }
            set
            {
                this.updatedValues.time = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="referenceType")]
        public string referenceType 
	    { 
            get
            {
                if (this.updatedValues.referenceTypeHasValue)
                {
                    return this.updatedValues.referenceType;
                }
                
                if (!this.initialValues.referenceTypeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "referenceType");
                    this.initialValues.referenceTypeHasValue = true;
                }

                return this.initialValues.referenceType;
            }
            set
            {
                this.updatedValues.referenceType = value;
            }
        }

        [XmlElement(ElementName="reference_id")]
        public long reference_id 
	    { 
            get
            {
                if (this.updatedValues.reference_idHasValue)
                {
                    return this.updatedValues.reference_id;
                }
                
                if (!this.initialValues.reference_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "reference_id");
                    this.initialValues.reference_idHasValue = true;
                }

                return this.initialValues.reference_id;
            }
            set
            {
                this.updatedValues.reference_id = value;
            }
        }

        [XmlElement(ElementName="Party_id")]
        public long? Party_id 
	    { 
            get
            {
                if (this.updatedValues.Party_idHasValue)
                {
                    return this.updatedValues.Party_id;
                }
                
                if (!this.initialValues.Party_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Party_id");
                    this.initialValues.Party_idHasValue = true;
                }

                return this.initialValues.Party_id;
            }
            set
            {
                this.updatedValues.Party_id = value;
            }
        }

        [XmlElement(ElementName="Contract_id")]
        public long? Contract_id 
	    { 
            get
            {
                if (this.updatedValues.Contract_idHasValue)
                {
                    return this.updatedValues.Contract_id;
                }
                
                if (!this.initialValues.Contract_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Contract_id");
                    this.initialValues.Contract_idHasValue = true;
                }

                return this.initialValues.Contract_id;
            }
            set
            {
                this.updatedValues.Contract_id = value;
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "type");
            if (e2 != null)
            {
                this.type = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "date");
            if (e3 != null)
            {
                this.date = System.DateTime.Parse(e3.Value);
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "time");
            if (e4 != null)
            {
                this.time = System.TimeSpan.Parse(e4.Value);
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "referenceType");
            if (e5 != null) 
            {
                this.referenceType = e5.Value;
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "reference_id");
            if (e6 != null)
            {
                this.reference_id = long.Parse(e6.Value);
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "Party_id");
            if (e7 != null)
            {
                this.Party_id = long.Parse(e7.Value);
            }

            XElement e8 = elements.FirstOrDefault(x => x.Name == "Contract_id");
            if (e8 != null)
            {
                this.Contract_id = long.Parse(e8.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.typeHasValue && type != NonMonetaryTransactionType.Null)
            {
                writer.WriteElementString("type", this.updatedValues.type.Value);
            }
            else if (this.initialValues.typeHasValue && type != NonMonetaryTransactionType.Null)
            {
                writer.WriteElementString("type", this.initialValues.type.Value);
            }

            if (this.updatedValues.dateHasValue)
            {
                writer.WriteElementString("date", this.updatedValues.date.ToString());
            }
            else if (this.initialValues.dateHasValue)
            {
                writer.WriteElementString("date", this.initialValues.date.ToString());
            }

            if (this.updatedValues.timeHasValue && time != null)
            {
                writer.WriteElementString("time", this.updatedValues.time.ToString());
            }
            else if (this.initialValues.timeHasValue && time != null)
            {
                writer.WriteElementString("time", this.initialValues.time.ToString());
            }

            if (this.updatedValues.referenceTypeHasValue && !string.IsNullOrEmpty(referenceType))
            {
                writer.WriteElementString("referenceType", this.updatedValues.referenceType);
            }
            else if (this.initialValues.referenceTypeHasValue && !string.IsNullOrEmpty(referenceType))
            {
                writer.WriteElementString("referenceType", this.initialValues.referenceType);
            }

            if (this.updatedValues.reference_idHasValue)
            {
                writer.WriteElementString("reference_id", this.updatedValues.reference_id.ToString());
            }
            else if (this.initialValues.reference_idHasValue)
            {
                writer.WriteElementString("reference_id", this.initialValues.reference_id.ToString());
            }

            if (this.updatedValues.Party_idHasValue && Party_id != null)
            {
                writer.WriteElementString("Party_id", this.updatedValues.Party_id.ToString());
            }
            else if (this.initialValues.Party_idHasValue && Party_id != null)
            {
                writer.WriteElementString("Party_id", this.initialValues.Party_id.ToString());
            }

            if (this.updatedValues.Contract_idHasValue && Contract_id != null)
            {
                writer.WriteElementString("Contract_id", this.updatedValues.Contract_id.ToString());
            }
            else if (this.initialValues.Contract_idHasValue && Contract_id != null)
            {
                writer.WriteElementString("Contract_id", this.initialValues.Contract_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
