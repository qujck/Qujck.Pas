//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Instruction.DataObjects;
using Qujck.Pas.Model.Policy;

namespace Qujck.Pas.Model.Instruction
{
    [Serializable]
    public sealed partial class RiskCoverCalculation : AbstractInstructionEntity, IReferenceContract
    {
        internal RiskCoverCalculationDo initialValues { get; private set; }
        internal RiskCoverCalculationDo updatedValues { get; private set; }
        internal Action<RiskCoverCalculationDo, string> loadMissingValue { private get; set; }

        public RiskCoverCalculation()
        {
            this.initialValues = new RiskCoverCalculationDo();
            this.updatedValues = new RiskCoverCalculationDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Instruction";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "RiskCoverCalculation";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "RiskRate_code";
                yield return "life1Party_id";
                yield return "life1DateOfBirth";
                yield return "life1Sex";
                yield return "life1Smoker";
                yield return "life2Party_id";
                yield return "life2DateOfBirth";
                yield return "life2Sex";
                yield return "life2Smoker";
                yield return "startDate";
                yield return "endDate";
                yield return "coverAmount";
                yield return "costAmount";
                yield return "rate";
                yield return "RiskCover_id";
                yield return "Contract_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="RiskRate_code")]
        public string RiskRate_code 
	    { 
            get
            {
                if (this.updatedValues.RiskRate_codeHasValue)
                {
                    return this.updatedValues.RiskRate_code;
                }
                
                if (!this.initialValues.RiskRate_codeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "RiskRate_code");
                    this.initialValues.RiskRate_codeHasValue = true;
                }

                return this.initialValues.RiskRate_code;
            }
            set
            {
                this.updatedValues.RiskRate_code = value;
            }
        }

        [XmlElement(ElementName="life1Party_id")]
        public long? life1Party_id 
	    { 
            get
            {
                if (this.updatedValues.life1Party_idHasValue)
                {
                    return this.updatedValues.life1Party_id;
                }
                
                if (!this.initialValues.life1Party_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "life1Party_id");
                    this.initialValues.life1Party_idHasValue = true;
                }

                return this.initialValues.life1Party_id;
            }
            set
            {
                this.updatedValues.life1Party_id = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="life1DateOfBirth")]
        public System.DateTime? life1DateOfBirth 
	    { 
            get
            {
                if (this.updatedValues.life1DateOfBirthHasValue)
                {
                    return this.updatedValues.life1DateOfBirth;
                }
                
                if (!this.initialValues.life1DateOfBirthHasValue)
                {
                    this.loadMissingValue(this.initialValues, "life1DateOfBirth");
                    this.initialValues.life1DateOfBirthHasValue = true;
                }

                return this.initialValues.life1DateOfBirth;
            }
            set
            {
                this.updatedValues.life1DateOfBirth = value;
            }
        }

        [XmlElement(ElementName="life1Sex")]
        public SexType life1Sex 
	    { 
            get
            {
                if (this.updatedValues.life1SexHasValue)
                {
                    return this.updatedValues.life1Sex;
                }
                
                if (!this.initialValues.life1SexHasValue)
                {
                    this.loadMissingValue(this.initialValues, "life1Sex");
                    this.initialValues.life1SexHasValue = true;
                }

                return this.initialValues.life1Sex;
            }
            set
            {
                this.updatedValues.life1Sex = value;
            }
        }

        [RegularExpression(@"[YN]{1}")]
        [XmlElement(ElementName="life1Smoker")]
        public Indicator life1Smoker 
	    { 
            get
            {
                if (this.updatedValues.life1SmokerHasValue)
                {
                    return this.updatedValues.life1Smoker;
                }
                
                if (!this.initialValues.life1SmokerHasValue)
                {
                    this.loadMissingValue(this.initialValues, "life1Smoker");
                    this.initialValues.life1SmokerHasValue = true;
                }

                return this.initialValues.life1Smoker;
            }
            set
            {
                this.updatedValues.life1Smoker = value;
            }
        }

        [XmlElement(ElementName="life2Party_id")]
        public long? life2Party_id 
	    { 
            get
            {
                if (this.updatedValues.life2Party_idHasValue)
                {
                    return this.updatedValues.life2Party_id;
                }
                
                if (!this.initialValues.life2Party_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "life2Party_id");
                    this.initialValues.life2Party_idHasValue = true;
                }

                return this.initialValues.life2Party_id;
            }
            set
            {
                this.updatedValues.life2Party_id = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="life2DateOfBirth")]
        public System.DateTime? life2DateOfBirth 
	    { 
            get
            {
                if (this.updatedValues.life2DateOfBirthHasValue)
                {
                    return this.updatedValues.life2DateOfBirth;
                }
                
                if (!this.initialValues.life2DateOfBirthHasValue)
                {
                    this.loadMissingValue(this.initialValues, "life2DateOfBirth");
                    this.initialValues.life2DateOfBirthHasValue = true;
                }

                return this.initialValues.life2DateOfBirth;
            }
            set
            {
                this.updatedValues.life2DateOfBirth = value;
            }
        }

        [XmlElement(ElementName="life2Sex")]
        public SexType life2Sex 
	    { 
            get
            {
                if (this.updatedValues.life2SexHasValue)
                {
                    return this.updatedValues.life2Sex;
                }
                
                if (!this.initialValues.life2SexHasValue)
                {
                    this.loadMissingValue(this.initialValues, "life2Sex");
                    this.initialValues.life2SexHasValue = true;
                }

                return this.initialValues.life2Sex;
            }
            set
            {
                this.updatedValues.life2Sex = value;
            }
        }

        [RegularExpression(@"[YN]{1}")]
        [XmlElement(ElementName="life2Smoker")]
        public Indicator life2Smoker 
	    { 
            get
            {
                if (this.updatedValues.life2SmokerHasValue)
                {
                    return this.updatedValues.life2Smoker;
                }
                
                if (!this.initialValues.life2SmokerHasValue)
                {
                    this.loadMissingValue(this.initialValues, "life2Smoker");
                    this.initialValues.life2SmokerHasValue = true;
                }

                return this.initialValues.life2Smoker;
            }
            set
            {
                this.updatedValues.life2Smoker = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="startDate")]
        public System.DateTime? startDate 
	    { 
            get
            {
                if (this.updatedValues.startDateHasValue)
                {
                    return this.updatedValues.startDate;
                }
                
                if (!this.initialValues.startDateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "startDate");
                    this.initialValues.startDateHasValue = true;
                }

                return this.initialValues.startDate;
            }
            set
            {
                this.updatedValues.startDate = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="endDate")]
        public System.DateTime? endDate 
	    { 
            get
            {
                if (this.updatedValues.endDateHasValue)
                {
                    return this.updatedValues.endDate;
                }
                
                if (!this.initialValues.endDateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "endDate");
                    this.initialValues.endDateHasValue = true;
                }

                return this.initialValues.endDate;
            }
            set
            {
                this.updatedValues.endDate = value;
            }
        }

        [XmlElement(ElementName="coverAmount")]
        public decimal? coverAmount 
	    { 
            get
            {
                if (this.updatedValues.coverAmountHasValue)
                {
                    return this.updatedValues.coverAmount;
                }
                
                if (!this.initialValues.coverAmountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "coverAmount");
                    this.initialValues.coverAmountHasValue = true;
                }

                return this.initialValues.coverAmount;
            }
            set
            {
                this.updatedValues.coverAmount = value;
            }
        }

        [XmlElement(ElementName="costAmount")]
        public decimal? costAmount 
	    { 
            get
            {
                if (this.updatedValues.costAmountHasValue)
                {
                    return this.updatedValues.costAmount;
                }
                
                if (!this.initialValues.costAmountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "costAmount");
                    this.initialValues.costAmountHasValue = true;
                }

                return this.initialValues.costAmount;
            }
            set
            {
                this.updatedValues.costAmount = value;
            }
        }

        [XmlElement(ElementName="rate")]
        public decimal? rate 
	    { 
            get
            {
                if (this.updatedValues.rateHasValue)
                {
                    return this.updatedValues.rate;
                }
                
                if (!this.initialValues.rateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "rate");
                    this.initialValues.rateHasValue = true;
                }

                return this.initialValues.rate;
            }
            set
            {
                this.updatedValues.rate = value;
            }
        }

        [XmlElement(ElementName="RiskCover_id")]
        public long RiskCover_id 
	    { 
            get
            {
                if (this.updatedValues.RiskCover_idHasValue)
                {
                    return this.updatedValues.RiskCover_id;
                }
                
                if (!this.initialValues.RiskCover_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "RiskCover_id");
                    this.initialValues.RiskCover_idHasValue = true;
                }

                return this.initialValues.RiskCover_id;
            }
            set
            {
                this.updatedValues.RiskCover_id = value;
            }
        }

        [XmlElement(ElementName="Contract_id")]
        public long Contract_id 
	    { 
            get
            {
                if (this.updatedValues.Contract_idHasValue)
                {
                    return this.updatedValues.Contract_id;
                }
                
                if (!this.initialValues.Contract_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Contract_id");
                    this.initialValues.Contract_idHasValue = true;
                }

                return this.initialValues.Contract_id;
            }
            set
            {
                this.updatedValues.Contract_id = value;
            }
        }

        [XmlIgnore]
        [NotMapped]
        public Contract Contract { get; set; }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "RiskRate_code");
            if (e2 != null) 
            {
                this.RiskRate_code = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "life1Party_id");
            if (e3 != null)
            {
                this.life1Party_id = long.Parse(e3.Value);
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "life1DateOfBirth");
            if (e4 != null)
            {
                this.life1DateOfBirth = System.DateTime.Parse(e4.Value);
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "life1Sex");
            if (e5 != null)
            {
                this.life1Sex = e5.Value;
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "life1Smoker");
            if (e6 != null)
            {
                this.life1Smoker = e6.Value;
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "life2Party_id");
            if (e7 != null)
            {
                this.life2Party_id = long.Parse(e7.Value);
            }

            XElement e8 = elements.FirstOrDefault(x => x.Name == "life2DateOfBirth");
            if (e8 != null)
            {
                this.life2DateOfBirth = System.DateTime.Parse(e8.Value);
            }

            XElement e9 = elements.FirstOrDefault(x => x.Name == "life2Sex");
            if (e9 != null)
            {
                this.life2Sex = e9.Value;
            }

            XElement e10 = elements.FirstOrDefault(x => x.Name == "life2Smoker");
            if (e10 != null)
            {
                this.life2Smoker = e10.Value;
            }

            XElement e11 = elements.FirstOrDefault(x => x.Name == "startDate");
            if (e11 != null)
            {
                this.startDate = System.DateTime.Parse(e11.Value);
            }

            XElement e12 = elements.FirstOrDefault(x => x.Name == "endDate");
            if (e12 != null)
            {
                this.endDate = System.DateTime.Parse(e12.Value);
            }

            XElement e13 = elements.FirstOrDefault(x => x.Name == "coverAmount");
            if (e13 != null)
            {
                this.coverAmount = decimal.Parse(e13.Value);
            }

            XElement e14 = elements.FirstOrDefault(x => x.Name == "costAmount");
            if (e14 != null)
            {
                this.costAmount = decimal.Parse(e14.Value);
            }

            XElement e15 = elements.FirstOrDefault(x => x.Name == "rate");
            if (e15 != null)
            {
                this.rate = decimal.Parse(e15.Value);
            }

            XElement e16 = elements.FirstOrDefault(x => x.Name == "RiskCover_id");
            if (e16 != null)
            {
                this.RiskCover_id = long.Parse(e16.Value);
            }

            XElement e17 = elements.FirstOrDefault(x => x.Name == "Contract_id");
            if (e17 != null)
            {
                this.Contract_id = long.Parse(e17.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.RiskRate_codeHasValue && !string.IsNullOrEmpty(RiskRate_code))
            {
                writer.WriteElementString("RiskRate_code", this.updatedValues.RiskRate_code);
            }
            else if (this.initialValues.RiskRate_codeHasValue && !string.IsNullOrEmpty(RiskRate_code))
            {
                writer.WriteElementString("RiskRate_code", this.initialValues.RiskRate_code);
            }

            if (this.updatedValues.life1Party_idHasValue && life1Party_id != null)
            {
                writer.WriteElementString("life1Party_id", this.updatedValues.life1Party_id.ToString());
            }
            else if (this.initialValues.life1Party_idHasValue && life1Party_id != null)
            {
                writer.WriteElementString("life1Party_id", this.initialValues.life1Party_id.ToString());
            }

            if (this.updatedValues.life1DateOfBirthHasValue && life1DateOfBirth != null)
            {
                writer.WriteElementString("life1DateOfBirth", this.updatedValues.life1DateOfBirth.ToString());
            }
            else if (this.initialValues.life1DateOfBirthHasValue && life1DateOfBirth != null)
            {
                writer.WriteElementString("life1DateOfBirth", this.initialValues.life1DateOfBirth.ToString());
            }

            if (this.updatedValues.life1SexHasValue && life1Sex != SexType.Null)
            {
                writer.WriteElementString("life1Sex", this.updatedValues.life1Sex.Value);
            }
            else if (this.initialValues.life1SexHasValue && life1Sex != SexType.Null)
            {
                writer.WriteElementString("life1Sex", this.initialValues.life1Sex.Value);
            }

            if (this.updatedValues.life1SmokerHasValue && life1Smoker != Indicator.Null)
            {
                writer.WriteElementString("life1Smoker", this.updatedValues.life1Smoker.Value);
            }
            else if (this.initialValues.life1SmokerHasValue && life1Smoker != Indicator.Null)
            {
                writer.WriteElementString("life1Smoker", this.initialValues.life1Smoker.Value);
            }

            if (this.updatedValues.life2Party_idHasValue && life2Party_id != null)
            {
                writer.WriteElementString("life2Party_id", this.updatedValues.life2Party_id.ToString());
            }
            else if (this.initialValues.life2Party_idHasValue && life2Party_id != null)
            {
                writer.WriteElementString("life2Party_id", this.initialValues.life2Party_id.ToString());
            }

            if (this.updatedValues.life2DateOfBirthHasValue && life2DateOfBirth != null)
            {
                writer.WriteElementString("life2DateOfBirth", this.updatedValues.life2DateOfBirth.ToString());
            }
            else if (this.initialValues.life2DateOfBirthHasValue && life2DateOfBirth != null)
            {
                writer.WriteElementString("life2DateOfBirth", this.initialValues.life2DateOfBirth.ToString());
            }

            if (this.updatedValues.life2SexHasValue && life2Sex != SexType.Null)
            {
                writer.WriteElementString("life2Sex", this.updatedValues.life2Sex.Value);
            }
            else if (this.initialValues.life2SexHasValue && life2Sex != SexType.Null)
            {
                writer.WriteElementString("life2Sex", this.initialValues.life2Sex.Value);
            }

            if (this.updatedValues.life2SmokerHasValue && life2Smoker != Indicator.Null)
            {
                writer.WriteElementString("life2Smoker", this.updatedValues.life2Smoker.Value);
            }
            else if (this.initialValues.life2SmokerHasValue && life2Smoker != Indicator.Null)
            {
                writer.WriteElementString("life2Smoker", this.initialValues.life2Smoker.Value);
            }

            if (this.updatedValues.startDateHasValue && startDate != null)
            {
                writer.WriteElementString("startDate", this.updatedValues.startDate.ToString());
            }
            else if (this.initialValues.startDateHasValue && startDate != null)
            {
                writer.WriteElementString("startDate", this.initialValues.startDate.ToString());
            }

            if (this.updatedValues.endDateHasValue && endDate != null)
            {
                writer.WriteElementString("endDate", this.updatedValues.endDate.ToString());
            }
            else if (this.initialValues.endDateHasValue && endDate != null)
            {
                writer.WriteElementString("endDate", this.initialValues.endDate.ToString());
            }

            if (this.updatedValues.coverAmountHasValue && coverAmount != null)
            {
                writer.WriteElementString("coverAmount", this.updatedValues.coverAmount.ToString());
            }
            else if (this.initialValues.coverAmountHasValue && coverAmount != null)
            {
                writer.WriteElementString("coverAmount", this.initialValues.coverAmount.ToString());
            }

            if (this.updatedValues.costAmountHasValue && costAmount != null)
            {
                writer.WriteElementString("costAmount", this.updatedValues.costAmount.ToString());
            }
            else if (this.initialValues.costAmountHasValue && costAmount != null)
            {
                writer.WriteElementString("costAmount", this.initialValues.costAmount.ToString());
            }

            if (this.updatedValues.rateHasValue && rate != null)
            {
                writer.WriteElementString("rate", this.updatedValues.rate.ToString());
            }
            else if (this.initialValues.rateHasValue && rate != null)
            {
                writer.WriteElementString("rate", this.initialValues.rate.ToString());
            }

            if (this.updatedValues.RiskCover_idHasValue)
            {
                writer.WriteElementString("RiskCover_id", this.updatedValues.RiskCover_id.ToString());
            }
            else if (this.initialValues.RiskCover_idHasValue)
            {
                writer.WriteElementString("RiskCover_id", this.initialValues.RiskCover_id.ToString());
            }

            if (this.updatedValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.updatedValues.Contract_id.ToString());
            }
            else if (this.initialValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.initialValues.Contract_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
