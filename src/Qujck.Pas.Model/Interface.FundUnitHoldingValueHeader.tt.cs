//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Interface.DataObjects;

namespace Qujck.Pas.Model.Interface
{
    [Serializable]
    public sealed partial class FundUnitHoldingValueHeader : AbstractInterfaceEntity
    {
        internal FundUnitHoldingValueHeaderDo initialValues { get; private set; }
        internal FundUnitHoldingValueHeaderDo updatedValues { get; private set; }
        internal Action<FundUnitHoldingValueHeaderDo, string> loadMissingValue { private get; set; }

        public FundUnitHoldingValueHeader()
        {
            this.initialValues = new FundUnitHoldingValueHeaderDo();
            this.updatedValues = new FundUnitHoldingValueHeaderDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Interface";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "FundUnitHoldingValueHeader";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "Contract_id";
                yield return "effectiveDate";
                yield return "unitValue";
                yield return "transactionValue";
                yield return "type";
                yield return "status";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [XmlElement(ElementName="Contract_id")]
        public long Contract_id 
	    { 
            get
            {
                if (this.updatedValues.Contract_idHasValue)
                {
                    return this.updatedValues.Contract_id;
                }
                
                if (!this.initialValues.Contract_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Contract_id");
                    this.initialValues.Contract_idHasValue = true;
                }

                return this.initialValues.Contract_id;
            }
            set
            {
                this.updatedValues.Contract_id = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="effectiveDate")]
        public System.DateTime effectiveDate 
	    { 
            get
            {
                if (this.updatedValues.effectiveDateHasValue)
                {
                    return this.updatedValues.effectiveDate;
                }
                
                if (!this.initialValues.effectiveDateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "effectiveDate");
                    this.initialValues.effectiveDateHasValue = true;
                }

                return this.initialValues.effectiveDate;
            }
            set
            {
                this.updatedValues.effectiveDate = value;
            }
        }

        [XmlElement(ElementName="unitValue")]
        public decimal unitValue 
	    { 
            get
            {
                if (this.updatedValues.unitValueHasValue)
                {
                    return this.updatedValues.unitValue;
                }
                
                if (!this.initialValues.unitValueHasValue)
                {
                    this.loadMissingValue(this.initialValues, "unitValue");
                    this.initialValues.unitValueHasValue = true;
                }

                return this.initialValues.unitValue;
            }
            set
            {
                this.updatedValues.unitValue = value;
            }
        }

        [XmlElement(ElementName="transactionValue")]
        public decimal transactionValue 
	    { 
            get
            {
                if (this.updatedValues.transactionValueHasValue)
                {
                    return this.updatedValues.transactionValue;
                }
                
                if (!this.initialValues.transactionValueHasValue)
                {
                    this.loadMissingValue(this.initialValues, "transactionValue");
                    this.initialValues.transactionValueHasValue = true;
                }

                return this.initialValues.transactionValue;
            }
            set
            {
                this.updatedValues.transactionValue = value;
            }
        }

        [XmlElement(ElementName="type")]
        public FundUnitHoldingValueType type 
	    { 
            get
            {
                if (this.updatedValues.typeHasValue)
                {
                    return this.updatedValues.type;
                }
                
                if (!this.initialValues.typeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "type");
                    this.initialValues.typeHasValue = true;
                }

                return this.initialValues.type;
            }
            set
            {
                this.updatedValues.type = value;
            }
        }

        [XmlElement(ElementName="status")]
        public FundUnitHoldingValueStatus status 
	    { 
            get
            {
                if (this.updatedValues.statusHasValue)
                {
                    return this.updatedValues.status;
                }
                
                if (!this.initialValues.statusHasValue)
                {
                    this.loadMissingValue(this.initialValues, "status");
                    this.initialValues.statusHasValue = true;
                }

                return this.initialValues.status;
            }
            set
            {
                this.updatedValues.status = value;
            }
        }

        public bool FundUnitHoldingValueDetailsAreLoaded { get; private set; }
        internal Func<IEnumerable<FundUnitHoldingValueDetail>> FundUnitHoldingValueDetailsQuery { private get; set; }
        public IEnumerable<FundUnitHoldingValueDetail> FundUnitHoldingValueDetails
        {
            get
            {
                if (this.FundUnitHoldingValueDetailsQuery == null)
                {
                    return Enumerable.Empty<FundUnitHoldingValueDetail>();
                }
                else
                {
                    var result = this.FundUnitHoldingValueDetailsQuery();
                    if (!this.FundUnitHoldingValueDetailsAreLoaded)
                    {
                        this.FundUnitHoldingValueDetailsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "Contract_id");
            if (e2 != null)
            {
                this.Contract_id = long.Parse(e2.Value);
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "effectiveDate");
            if (e3 != null)
            {
                this.effectiveDate = System.DateTime.Parse(e3.Value);
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "unitValue");
            if (e4 != null)
            {
                this.unitValue = decimal.Parse(e4.Value);
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "transactionValue");
            if (e5 != null)
            {
                this.transactionValue = decimal.Parse(e5.Value);
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "type");
            if (e6 != null)
            {
                this.type = e6.Value;
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "status");
            if (e7 != null)
            {
                this.status = e7.Value;
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.updatedValues.Contract_id.ToString());
            }
            else if (this.initialValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.initialValues.Contract_id.ToString());
            }

            if (this.updatedValues.effectiveDateHasValue)
            {
                writer.WriteElementString("effectiveDate", this.updatedValues.effectiveDate.ToString());
            }
            else if (this.initialValues.effectiveDateHasValue)
            {
                writer.WriteElementString("effectiveDate", this.initialValues.effectiveDate.ToString());
            }

            if (this.updatedValues.unitValueHasValue)
            {
                writer.WriteElementString("unitValue", this.updatedValues.unitValue.ToString());
            }
            else if (this.initialValues.unitValueHasValue)
            {
                writer.WriteElementString("unitValue", this.initialValues.unitValue.ToString());
            }

            if (this.updatedValues.transactionValueHasValue)
            {
                writer.WriteElementString("transactionValue", this.updatedValues.transactionValue.ToString());
            }
            else if (this.initialValues.transactionValueHasValue)
            {
                writer.WriteElementString("transactionValue", this.initialValues.transactionValue.ToString());
            }

            if (this.updatedValues.typeHasValue && type != FundUnitHoldingValueType.Null)
            {
                writer.WriteElementString("type", this.updatedValues.type.Value);
            }
            else if (this.initialValues.typeHasValue && type != FundUnitHoldingValueType.Null)
            {
                writer.WriteElementString("type", this.initialValues.type.Value);
            }

            if (this.updatedValues.statusHasValue && status != FundUnitHoldingValueStatus.Null)
            {
                writer.WriteElementString("status", this.updatedValues.status.Value);
            }
            else if (this.initialValues.statusHasValue && status != FundUnitHoldingValueStatus.Null)
            {
                writer.WriteElementString("status", this.initialValues.status.Value);
            }

            this.AfterWriteXml(writer);
        }
    }
}
