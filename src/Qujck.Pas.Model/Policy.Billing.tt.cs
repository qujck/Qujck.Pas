//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Policy.DataObjects;

namespace Qujck.Pas.Model.Policy
{
    [Serializable]
    public sealed partial class Billing : AbstractPolicyEntity
    {
        internal BillingDo initialValues { get; private set; }
        internal BillingDo updatedValues { get; private set; }
        internal Action<BillingDo, string> loadMissingValue { private get; set; }

        public Billing()
        {
            this.initialValues = new BillingDo();
            this.updatedValues = new BillingDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Policy";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "Billing";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "contributionDate";
                yield return "amount";
                yield return "status";
                yield return "arrearsLevel";
                yield return "MoneyIn_id";
                yield return "Contract_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="contributionDate")]
        public System.DateTime contributionDate 
	    { 
            get
            {
                if (this.updatedValues.contributionDateHasValue)
                {
                    return this.updatedValues.contributionDate;
                }
                
                if (!this.initialValues.contributionDateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "contributionDate");
                    this.initialValues.contributionDateHasValue = true;
                }

                return this.initialValues.contributionDate;
            }
            set
            {
                this.updatedValues.contributionDate = value;
            }
        }

        [XmlElement(ElementName="amount")]
        public decimal amount 
	    { 
            get
            {
                if (this.updatedValues.amountHasValue)
                {
                    return this.updatedValues.amount;
                }
                
                if (!this.initialValues.amountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "amount");
                    this.initialValues.amountHasValue = true;
                }

                return this.initialValues.amount;
            }
            set
            {
                this.updatedValues.amount = value;
            }
        }

        [XmlElement(ElementName="status")]
        public BillingState status 
	    { 
            get
            {
                if (this.updatedValues.statusHasValue)
                {
                    return this.updatedValues.status;
                }
                
                if (!this.initialValues.statusHasValue)
                {
                    this.loadMissingValue(this.initialValues, "status");
                    this.initialValues.statusHasValue = true;
                }

                return this.initialValues.status;
            }
            set
            {
                this.updatedValues.status = value;
            }
        }

        [XmlElement(ElementName="arrearsLevel")]
        public short? arrearsLevel 
	    { 
            get
            {
                if (this.updatedValues.arrearsLevelHasValue)
                {
                    return this.updatedValues.arrearsLevel;
                }
                
                if (!this.initialValues.arrearsLevelHasValue)
                {
                    this.loadMissingValue(this.initialValues, "arrearsLevel");
                    this.initialValues.arrearsLevelHasValue = true;
                }

                return this.initialValues.arrearsLevel;
            }
            set
            {
                this.updatedValues.arrearsLevel = value;
            }
        }

        [XmlElement(ElementName="MoneyIn_id")]
        public long MoneyIn_id 
	    { 
            get
            {
                if (this.updatedValues.MoneyIn_idHasValue)
                {
                    return this.updatedValues.MoneyIn_id;
                }
                
                if (!this.initialValues.MoneyIn_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "MoneyIn_id");
                    this.initialValues.MoneyIn_idHasValue = true;
                }

                return this.initialValues.MoneyIn_id;
            }
            set
            {
                this.updatedValues.MoneyIn_id = value;
            }
        }

        [XmlElement(ElementName="Contract_id")]
        public long Contract_id 
	    { 
            get
            {
                if (this.updatedValues.Contract_idHasValue)
                {
                    return this.updatedValues.Contract_id;
                }
                
                if (!this.initialValues.Contract_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Contract_id");
                    this.initialValues.Contract_idHasValue = true;
                }

                return this.initialValues.Contract_id;
            }
            set
            {
                this.updatedValues.Contract_id = value;
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "contributionDate");
            if (e2 != null)
            {
                this.contributionDate = System.DateTime.Parse(e2.Value);
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "amount");
            if (e3 != null)
            {
                this.amount = decimal.Parse(e3.Value);
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "status");
            if (e4 != null)
            {
                this.status = e4.Value;
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "arrearsLevel");
            if (e5 != null)
            {
                this.arrearsLevel = short.Parse(e5.Value);
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "MoneyIn_id");
            if (e6 != null)
            {
                this.MoneyIn_id = long.Parse(e6.Value);
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "Contract_id");
            if (e7 != null)
            {
                this.Contract_id = long.Parse(e7.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.contributionDateHasValue)
            {
                writer.WriteElementString("contributionDate", this.updatedValues.contributionDate.ToString());
            }
            else if (this.initialValues.contributionDateHasValue)
            {
                writer.WriteElementString("contributionDate", this.initialValues.contributionDate.ToString());
            }

            if (this.updatedValues.amountHasValue)
            {
                writer.WriteElementString("amount", this.updatedValues.amount.ToString());
            }
            else if (this.initialValues.amountHasValue)
            {
                writer.WriteElementString("amount", this.initialValues.amount.ToString());
            }

            if (this.updatedValues.statusHasValue && status != BillingState.Null)
            {
                writer.WriteElementString("status", this.updatedValues.status.Value);
            }
            else if (this.initialValues.statusHasValue && status != BillingState.Null)
            {
                writer.WriteElementString("status", this.initialValues.status.Value);
            }

            if (this.updatedValues.arrearsLevelHasValue && arrearsLevel != null)
            {
                writer.WriteElementString("arrearsLevel", this.updatedValues.arrearsLevel.ToString());
            }
            else if (this.initialValues.arrearsLevelHasValue && arrearsLevel != null)
            {
                writer.WriteElementString("arrearsLevel", this.initialValues.arrearsLevel.ToString());
            }

            if (this.updatedValues.MoneyIn_idHasValue)
            {
                writer.WriteElementString("MoneyIn_id", this.updatedValues.MoneyIn_id.ToString());
            }
            else if (this.initialValues.MoneyIn_idHasValue)
            {
                writer.WriteElementString("MoneyIn_id", this.initialValues.MoneyIn_id.ToString());
            }

            if (this.updatedValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.updatedValues.Contract_id.ToString());
            }
            else if (this.initialValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.initialValues.Contract_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
