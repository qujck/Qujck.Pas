//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Instruction.DataObjects;

namespace Qujck.Pas.Model.Instruction
{
    [Serializable]
    public sealed partial class Batch : AbstractInstructionEntity
    {
        internal BatchDo initialValues { get; private set; }
        internal BatchDo updatedValues { get; private set; }
        internal Action<BatchDo, string> loadMissingValue { private get; set; }

        public Batch()
        {
            this.initialValues = new BatchDo();
            this.updatedValues = new BatchDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Instruction";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "Batch";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "date";
                yield return "type";
                yield return "sequence";
                yield return "status";
                yield return "startTime";
                yield return "endTime";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        /// <summary>
        /// Business date of the batch
        /// <summary>
        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="date")]
        public System.DateTime? date 
	    { 
            get
            {
                if (this.updatedValues.dateHasValue)
                {
                    return this.updatedValues.date;
                }
                
                if (!this.initialValues.dateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "date");
                    this.initialValues.dateHasValue = true;
                }

                return this.initialValues.date;
            }
            set
            {
                this.updatedValues.date = value;
            }
        }

        [XmlElement(ElementName="type")]
        public BatchType type 
	    { 
            get
            {
                if (this.updatedValues.typeHasValue)
                {
                    return this.updatedValues.type;
                }
                
                if (!this.initialValues.typeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "type");
                    this.initialValues.typeHasValue = true;
                }

                return this.initialValues.type;
            }
            set
            {
                this.updatedValues.type = value;
            }
        }

        /// <summary>
        /// Sequence of the instruction taken from BatchInstructionConfiguration
        /// <summary>
        [XmlElement(ElementName="sequence")]
        public short? sequence 
	    { 
            get
            {
                if (this.updatedValues.sequenceHasValue)
                {
                    return this.updatedValues.sequence;
                }
                
                if (!this.initialValues.sequenceHasValue)
                {
                    this.loadMissingValue(this.initialValues, "sequence");
                    this.initialValues.sequenceHasValue = true;
                }

                return this.initialValues.sequence;
            }
            set
            {
                this.updatedValues.sequence = value;
            }
        }

        /// <summary>
        /// Current status of the batch
        /// <summary>
        [XmlElement(ElementName="status")]
        public BatchState status 
	    { 
            get
            {
                if (this.updatedValues.statusHasValue)
                {
                    return this.updatedValues.status;
                }
                
                if (!this.initialValues.statusHasValue)
                {
                    this.loadMissingValue(this.initialValues, "status");
                    this.initialValues.statusHasValue = true;
                }

                return this.initialValues.status;
            }
            set
            {
                this.updatedValues.status = value;
            }
        }

        [XmlElement(ElementName="startTime")]
        public System.TimeSpan? startTime 
	    { 
            get
            {
                if (this.updatedValues.startTimeHasValue)
                {
                    return this.updatedValues.startTime;
                }
                
                if (!this.initialValues.startTimeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "startTime");
                    this.initialValues.startTimeHasValue = true;
                }

                return this.initialValues.startTime;
            }
            set
            {
                this.updatedValues.startTime = value;
            }
        }

        [XmlElement(ElementName="endTime")]
        public System.TimeSpan? endTime 
	    { 
            get
            {
                if (this.updatedValues.endTimeHasValue)
                {
                    return this.updatedValues.endTime;
                }
                
                if (!this.initialValues.endTimeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "endTime");
                    this.initialValues.endTimeHasValue = true;
                }

                return this.initialValues.endTime;
            }
            set
            {
                this.updatedValues.endTime = value;
            }
        }

        public bool BatchInstructionsAreLoaded { get; private set; }
        internal Func<IEnumerable<BatchInstruction>> BatchInstructionsQuery { private get; set; }
        public IEnumerable<BatchInstruction> BatchInstructions
        {
            get
            {
                if (this.BatchInstructionsQuery == null)
                {
                    return Enumerable.Empty<BatchInstruction>();
                }
                else
                {
                    var result = this.BatchInstructionsQuery();
                    if (!this.BatchInstructionsAreLoaded)
                    {
                        this.BatchInstructionsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "date");
            if (e2 != null)
            {
                this.date = System.DateTime.Parse(e2.Value);
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "type");
            if (e3 != null)
            {
                this.type = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "sequence");
            if (e4 != null)
            {
                this.sequence = short.Parse(e4.Value);
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "status");
            if (e5 != null)
            {
                this.status = e5.Value;
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "startTime");
            if (e6 != null)
            {
                this.startTime = System.TimeSpan.Parse(e6.Value);
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "endTime");
            if (e7 != null)
            {
                this.endTime = System.TimeSpan.Parse(e7.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.dateHasValue && date != null)
            {
                writer.WriteElementString("date", this.updatedValues.date.ToString());
            }
            else if (this.initialValues.dateHasValue && date != null)
            {
                writer.WriteElementString("date", this.initialValues.date.ToString());
            }

            if (this.updatedValues.typeHasValue && type != BatchType.Null)
            {
                writer.WriteElementString("type", this.updatedValues.type.Value);
            }
            else if (this.initialValues.typeHasValue && type != BatchType.Null)
            {
                writer.WriteElementString("type", this.initialValues.type.Value);
            }

            if (this.updatedValues.sequenceHasValue && sequence != null)
            {
                writer.WriteElementString("sequence", this.updatedValues.sequence.ToString());
            }
            else if (this.initialValues.sequenceHasValue && sequence != null)
            {
                writer.WriteElementString("sequence", this.initialValues.sequence.ToString());
            }

            if (this.updatedValues.statusHasValue && status != BatchState.Null)
            {
                writer.WriteElementString("status", this.updatedValues.status.Value);
            }
            else if (this.initialValues.statusHasValue && status != BatchState.Null)
            {
                writer.WriteElementString("status", this.initialValues.status.Value);
            }

            if (this.updatedValues.startTimeHasValue && startTime != null)
            {
                writer.WriteElementString("startTime", this.updatedValues.startTime.ToString());
            }
            else if (this.initialValues.startTimeHasValue && startTime != null)
            {
                writer.WriteElementString("startTime", this.initialValues.startTime.ToString());
            }

            if (this.updatedValues.endTimeHasValue && endTime != null)
            {
                writer.WriteElementString("endTime", this.updatedValues.endTime.ToString());
            }
            else if (this.initialValues.endTimeHasValue && endTime != null)
            {
                writer.WriteElementString("endTime", this.initialValues.endTime.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
