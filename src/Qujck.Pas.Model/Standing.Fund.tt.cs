//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Standing.DataObjects;

namespace Qujck.Pas.Model.Standing
{
    [Serializable]
    public sealed partial class Fund : AbstractStandingEntity, ICode
    {
        internal FundDo initialValues { get; private set; }
        internal FundDo updatedValues { get; private set; }
        internal Action<FundDo, string> loadMissingValue { private get; set; }

        public Fund()
        {
            this.initialValues = new FundDo();
            this.updatedValues = new FundDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Standing";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "Fund";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "code";
                yield return "name";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="code")]
        public string code 
	    { 
            get
            {
                if (this.updatedValues.codeHasValue)
                {
                    return this.updatedValues.code;
                }
                
                if (!this.initialValues.codeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "code");
                    this.initialValues.codeHasValue = true;
                }

                return this.initialValues.code;
            }
            set
            {
                this.updatedValues.code = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="name")]
        public string name 
	    { 
            get
            {
                if (this.updatedValues.nameHasValue)
                {
                    return this.updatedValues.name;
                }
                
                if (!this.initialValues.nameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "name");
                    this.initialValues.nameHasValue = true;
                }

                return this.initialValues.name;
            }
            set
            {
                this.updatedValues.name = value;
            }
        }

        public bool FundUnitsAreLoaded { get; private set; }
        internal Func<IEnumerable<FundUnit>> FundUnitsQuery { private get; set; }
        public IEnumerable<FundUnit> FundUnits
        {
            get
            {
                if (this.FundUnitsQuery == null)
                {
                    return Enumerable.Empty<FundUnit>();
                }
                else
                {
                    var result = this.FundUnitsQuery();
                    if (!this.FundUnitsAreLoaded)
                    {
                        this.FundUnitsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool InvestmentBenefitConfiguration_FundsAreLoaded { get; private set; }
        internal Func<IEnumerable<InvestmentBenefitConfiguration_Fund>> InvestmentBenefitConfiguration_FundsQuery { private get; set; }
        public IEnumerable<InvestmentBenefitConfiguration_Fund> InvestmentBenefitConfiguration_Funds
        {
            get
            {
                if (this.InvestmentBenefitConfiguration_FundsQuery == null)
                {
                    return Enumerable.Empty<InvestmentBenefitConfiguration_Fund>();
                }
                else
                {
                    var result = this.InvestmentBenefitConfiguration_FundsQuery();
                    if (!this.InvestmentBenefitConfiguration_FundsAreLoaded)
                    {
                        this.InvestmentBenefitConfiguration_FundsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool MoneyInConfiguration_FundsAreLoaded { get; private set; }
        internal Func<IEnumerable<MoneyInConfiguration_Fund>> MoneyInConfiguration_FundsQuery { private get; set; }
        public IEnumerable<MoneyInConfiguration_Fund> MoneyInConfiguration_Funds
        {
            get
            {
                if (this.MoneyInConfiguration_FundsQuery == null)
                {
                    return Enumerable.Empty<MoneyInConfiguration_Fund>();
                }
                else
                {
                    var result = this.MoneyInConfiguration_FundsQuery();
                    if (!this.MoneyInConfiguration_FundsAreLoaded)
                    {
                        this.MoneyInConfiguration_FundsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "code");
            if (e2 != null) 
            {
                this.code = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "name");
            if (e3 != null) 
            {
                this.name = e3.Value;
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.updatedValues.code);
            }
            else if (this.initialValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.initialValues.code);
            }

            if (this.updatedValues.nameHasValue && !string.IsNullOrEmpty(name))
            {
                writer.WriteElementString("name", this.updatedValues.name);
            }
            else if (this.initialValues.nameHasValue && !string.IsNullOrEmpty(name))
            {
                writer.WriteElementString("name", this.initialValues.name);
            }

            this.AfterWriteXml(writer);
        }
    }
}
