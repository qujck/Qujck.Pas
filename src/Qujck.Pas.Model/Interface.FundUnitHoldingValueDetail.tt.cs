//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Interface.DataObjects;

namespace Qujck.Pas.Model.Interface
{
    [Serializable]
    public sealed partial class FundUnitHoldingValueDetail : AbstractInterfaceEntity
    {
        internal FundUnitHoldingValueDetailDo initialValues { get; private set; }
        internal FundUnitHoldingValueDetailDo updatedValues { get; private set; }
        internal Action<FundUnitHoldingValueDetailDo, string> loadMissingValue { private get; set; }

        public FundUnitHoldingValueDetail()
        {
            this.initialValues = new FundUnitHoldingValueDetailDo();
            this.updatedValues = new FundUnitHoldingValueDetailDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Interface";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "FundUnitHoldingValueDetail";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "Fund_code";
                yield return "Fund_name";
                yield return "numberOfUnits";
                yield return "unitPrice";
                yield return "unitValue";
                yield return "currency";
                yield return "FundUnitHoldingValueHeader_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="Fund_code")]
        public string Fund_code 
	    { 
            get
            {
                if (this.updatedValues.Fund_codeHasValue)
                {
                    return this.updatedValues.Fund_code;
                }
                
                if (!this.initialValues.Fund_codeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Fund_code");
                    this.initialValues.Fund_codeHasValue = true;
                }

                return this.initialValues.Fund_code;
            }
            set
            {
                this.updatedValues.Fund_code = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="Fund_name")]
        public string Fund_name 
	    { 
            get
            {
                if (this.updatedValues.Fund_nameHasValue)
                {
                    return this.updatedValues.Fund_name;
                }
                
                if (!this.initialValues.Fund_nameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Fund_name");
                    this.initialValues.Fund_nameHasValue = true;
                }

                return this.initialValues.Fund_name;
            }
            set
            {
                this.updatedValues.Fund_name = value;
            }
        }

        [XmlElement(ElementName="numberOfUnits")]
        public decimal numberOfUnits 
	    { 
            get
            {
                if (this.updatedValues.numberOfUnitsHasValue)
                {
                    return this.updatedValues.numberOfUnits;
                }
                
                if (!this.initialValues.numberOfUnitsHasValue)
                {
                    this.loadMissingValue(this.initialValues, "numberOfUnits");
                    this.initialValues.numberOfUnitsHasValue = true;
                }

                return this.initialValues.numberOfUnits;
            }
            set
            {
                this.updatedValues.numberOfUnits = value;
            }
        }

        [XmlElement(ElementName="unitPrice")]
        public decimal unitPrice 
	    { 
            get
            {
                if (this.updatedValues.unitPriceHasValue)
                {
                    return this.updatedValues.unitPrice;
                }
                
                if (!this.initialValues.unitPriceHasValue)
                {
                    this.loadMissingValue(this.initialValues, "unitPrice");
                    this.initialValues.unitPriceHasValue = true;
                }

                return this.initialValues.unitPrice;
            }
            set
            {
                this.updatedValues.unitPrice = value;
            }
        }

        [XmlElement(ElementName="unitValue")]
        public decimal unitValue 
	    { 
            get
            {
                if (this.updatedValues.unitValueHasValue)
                {
                    return this.updatedValues.unitValue;
                }
                
                if (!this.initialValues.unitValueHasValue)
                {
                    this.loadMissingValue(this.initialValues, "unitValue");
                    this.initialValues.unitValueHasValue = true;
                }

                return this.initialValues.unitValue;
            }
            set
            {
                this.updatedValues.unitValue = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="currency")]
        public string currency 
	    { 
            get
            {
                if (this.updatedValues.currencyHasValue)
                {
                    return this.updatedValues.currency;
                }
                
                if (!this.initialValues.currencyHasValue)
                {
                    this.loadMissingValue(this.initialValues, "currency");
                    this.initialValues.currencyHasValue = true;
                }

                return this.initialValues.currency;
            }
            set
            {
                this.updatedValues.currency = value;
            }
        }

        [XmlElement(ElementName="FundUnitHoldingValueHeader_id")]
        public long FundUnitHoldingValueHeader_id 
	    { 
            get
            {
                if (this.updatedValues.FundUnitHoldingValueHeader_idHasValue)
                {
                    return this.updatedValues.FundUnitHoldingValueHeader_id;
                }
                
                if (!this.initialValues.FundUnitHoldingValueHeader_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "FundUnitHoldingValueHeader_id");
                    this.initialValues.FundUnitHoldingValueHeader_idHasValue = true;
                }

                return this.initialValues.FundUnitHoldingValueHeader_id;
            }
            set
            {
                this.updatedValues.FundUnitHoldingValueHeader_id = value;
            }
        }

        public bool FundUnitHoldingValueHeaderIsLoaded { get; private set; }
        internal Func<FundUnitHoldingValueHeader> FundUnitHoldingValueHeaderQuery { private get; set; }
        public FundUnitHoldingValueHeader FundUnitHoldingValueHeader
        {
            get
            {
                if (this.FundUnitHoldingValueHeaderQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.FundUnitHoldingValueHeaderQuery();
                    if (!this.FundUnitHoldingValueHeaderIsLoaded)
                    {
                        this.FundUnitHoldingValueHeaderIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "Fund_code");
            if (e2 != null) 
            {
                this.Fund_code = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "Fund_name");
            if (e3 != null) 
            {
                this.Fund_name = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "numberOfUnits");
            if (e4 != null)
            {
                this.numberOfUnits = decimal.Parse(e4.Value);
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "unitPrice");
            if (e5 != null)
            {
                this.unitPrice = decimal.Parse(e5.Value);
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "unitValue");
            if (e6 != null)
            {
                this.unitValue = decimal.Parse(e6.Value);
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "currency");
            if (e7 != null) 
            {
                this.currency = e7.Value;
            }

            XElement e8 = elements.FirstOrDefault(x => x.Name == "FundUnitHoldingValueHeader_id");
            if (e8 != null)
            {
                this.FundUnitHoldingValueHeader_id = long.Parse(e8.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.Fund_codeHasValue && !string.IsNullOrEmpty(Fund_code))
            {
                writer.WriteElementString("Fund_code", this.updatedValues.Fund_code);
            }
            else if (this.initialValues.Fund_codeHasValue && !string.IsNullOrEmpty(Fund_code))
            {
                writer.WriteElementString("Fund_code", this.initialValues.Fund_code);
            }

            if (this.updatedValues.Fund_nameHasValue && !string.IsNullOrEmpty(Fund_name))
            {
                writer.WriteElementString("Fund_name", this.updatedValues.Fund_name);
            }
            else if (this.initialValues.Fund_nameHasValue && !string.IsNullOrEmpty(Fund_name))
            {
                writer.WriteElementString("Fund_name", this.initialValues.Fund_name);
            }

            if (this.updatedValues.numberOfUnitsHasValue)
            {
                writer.WriteElementString("numberOfUnits", this.updatedValues.numberOfUnits.ToString());
            }
            else if (this.initialValues.numberOfUnitsHasValue)
            {
                writer.WriteElementString("numberOfUnits", this.initialValues.numberOfUnits.ToString());
            }

            if (this.updatedValues.unitPriceHasValue)
            {
                writer.WriteElementString("unitPrice", this.updatedValues.unitPrice.ToString());
            }
            else if (this.initialValues.unitPriceHasValue)
            {
                writer.WriteElementString("unitPrice", this.initialValues.unitPrice.ToString());
            }

            if (this.updatedValues.unitValueHasValue)
            {
                writer.WriteElementString("unitValue", this.updatedValues.unitValue.ToString());
            }
            else if (this.initialValues.unitValueHasValue)
            {
                writer.WriteElementString("unitValue", this.initialValues.unitValue.ToString());
            }

            if (this.updatedValues.currencyHasValue && !string.IsNullOrEmpty(currency))
            {
                writer.WriteElementString("currency", this.updatedValues.currency);
            }
            else if (this.initialValues.currencyHasValue && !string.IsNullOrEmpty(currency))
            {
                writer.WriteElementString("currency", this.initialValues.currency);
            }

            if (this.updatedValues.FundUnitHoldingValueHeader_idHasValue)
            {
                writer.WriteElementString("FundUnitHoldingValueHeader_id", this.updatedValues.FundUnitHoldingValueHeader_id.ToString());
            }
            else if (this.initialValues.FundUnitHoldingValueHeader_idHasValue)
            {
                writer.WriteElementString("FundUnitHoldingValueHeader_id", this.initialValues.FundUnitHoldingValueHeader_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
