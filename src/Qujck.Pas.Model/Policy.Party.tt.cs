//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Policy.DataObjects;

namespace Qujck.Pas.Model.Policy
{
    [Serializable]
    public sealed partial class Party : AbstractPolicyEntity
    {
        internal PartyDo initialValues { get; private set; }
        internal PartyDo updatedValues { get; private set; }
        internal Action<PartyDo, string> loadMissingValue { private get; set; }

        public Party()
        {
            this.initialValues = new PartyDo();
            this.updatedValues = new PartyDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Policy";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "Party";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "title";
                yield return "forenames";
                yield return "surname";
                yield return "maidenSurname";
                yield return "birthName";
                yield return "honorific";
                yield return "salutation";
                yield return "alias";
                yield return "fullName";
                yield return "correspondenceName";
                yield return "sex";
                yield return "maritalStatus";
                yield return "dateOfBirth";
                yield return "age";
                yield return "nationality";
                yield return "countryOfBirth";
                yield return "countryOfResidence";
                yield return "countryOfDomicile";
                yield return "numberOfYearsInUKResident";
                yield return "primaryEmploymentStatus";
                yield return "NINumber";
                yield return "taxRate";
                yield return "taxCode";
                yield return "contractedOut";
                yield return "maximumBenefitsRegime";
                yield return "controllingDirector";
                yield return "deathStatus";
                yield return "dateOfDeath";
                yield return "preferredMethodOfCommunication";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [XmlElement(ElementName="title")]
        public Title title 
	    { 
            get
            {
                if (this.updatedValues.titleHasValue)
                {
                    return this.updatedValues.title;
                }
                
                if (!this.initialValues.titleHasValue)
                {
                    this.loadMissingValue(this.initialValues, "title");
                    this.initialValues.titleHasValue = true;
                }

                return this.initialValues.title;
            }
            set
            {
                this.updatedValues.title = value;
            }
        }

        [StringLength(35)]
        [XmlElement(ElementName="forenames")]
        public string forenames 
	    { 
            get
            {
                if (this.updatedValues.forenamesHasValue)
                {
                    return this.updatedValues.forenames;
                }
                
                if (!this.initialValues.forenamesHasValue)
                {
                    this.loadMissingValue(this.initialValues, "forenames");
                    this.initialValues.forenamesHasValue = true;
                }

                return this.initialValues.forenames;
            }
            set
            {
                this.updatedValues.forenames = value;
            }
        }

        [StringLength(35)]
        [XmlElement(ElementName="surname")]
        public string surname 
	    { 
            get
            {
                if (this.updatedValues.surnameHasValue)
                {
                    return this.updatedValues.surname;
                }
                
                if (!this.initialValues.surnameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "surname");
                    this.initialValues.surnameHasValue = true;
                }

                return this.initialValues.surname;
            }
            set
            {
                this.updatedValues.surname = value;
            }
        }

        [StringLength(35)]
        [XmlElement(ElementName="maidenSurname")]
        public string maidenSurname 
	    { 
            get
            {
                if (this.updatedValues.maidenSurnameHasValue)
                {
                    return this.updatedValues.maidenSurname;
                }
                
                if (!this.initialValues.maidenSurnameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maidenSurname");
                    this.initialValues.maidenSurnameHasValue = true;
                }

                return this.initialValues.maidenSurname;
            }
            set
            {
                this.updatedValues.maidenSurname = value;
            }
        }

        [StringLength(35)]
        [XmlElement(ElementName="birthName")]
        public string birthName 
	    { 
            get
            {
                if (this.updatedValues.birthNameHasValue)
                {
                    return this.updatedValues.birthName;
                }
                
                if (!this.initialValues.birthNameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "birthName");
                    this.initialValues.birthNameHasValue = true;
                }

                return this.initialValues.birthName;
            }
            set
            {
                this.updatedValues.birthName = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="honorific")]
        public string honorific 
	    { 
            get
            {
                if (this.updatedValues.honorificHasValue)
                {
                    return this.updatedValues.honorific;
                }
                
                if (!this.initialValues.honorificHasValue)
                {
                    this.loadMissingValue(this.initialValues, "honorific");
                    this.initialValues.honorificHasValue = true;
                }

                return this.initialValues.honorific;
            }
            set
            {
                this.updatedValues.honorific = value;
            }
        }

        [StringLength(35)]
        [XmlElement(ElementName="salutation")]
        public string salutation 
	    { 
            get
            {
                if (this.updatedValues.salutationHasValue)
                {
                    return this.updatedValues.salutation;
                }
                
                if (!this.initialValues.salutationHasValue)
                {
                    this.loadMissingValue(this.initialValues, "salutation");
                    this.initialValues.salutationHasValue = true;
                }

                return this.initialValues.salutation;
            }
            set
            {
                this.updatedValues.salutation = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="alias")]
        public string alias 
	    { 
            get
            {
                if (this.updatedValues.aliasHasValue)
                {
                    return this.updatedValues.alias;
                }
                
                if (!this.initialValues.aliasHasValue)
                {
                    this.loadMissingValue(this.initialValues, "alias");
                    this.initialValues.aliasHasValue = true;
                }

                return this.initialValues.alias;
            }
            set
            {
                this.updatedValues.alias = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="fullName")]
        public string fullName 
	    { 
            get
            {
                if (this.updatedValues.fullNameHasValue)
                {
                    return this.updatedValues.fullName;
                }
                
                if (!this.initialValues.fullNameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "fullName");
                    this.initialValues.fullNameHasValue = true;
                }

                return this.initialValues.fullName;
            }
            set
            {
                this.updatedValues.fullName = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="correspondenceName")]
        public string correspondenceName 
	    { 
            get
            {
                if (this.updatedValues.correspondenceNameHasValue)
                {
                    return this.updatedValues.correspondenceName;
                }
                
                if (!this.initialValues.correspondenceNameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "correspondenceName");
                    this.initialValues.correspondenceNameHasValue = true;
                }

                return this.initialValues.correspondenceName;
            }
            set
            {
                this.updatedValues.correspondenceName = value;
            }
        }

        [XmlElement(ElementName="sex")]
        public SexType sex 
	    { 
            get
            {
                if (this.updatedValues.sexHasValue)
                {
                    return this.updatedValues.sex;
                }
                
                if (!this.initialValues.sexHasValue)
                {
                    this.loadMissingValue(this.initialValues, "sex");
                    this.initialValues.sexHasValue = true;
                }

                return this.initialValues.sex;
            }
            set
            {
                this.updatedValues.sex = value;
            }
        }

        [XmlElement(ElementName="maritalStatus")]
        public MaritalState maritalStatus 
	    { 
            get
            {
                if (this.updatedValues.maritalStatusHasValue)
                {
                    return this.updatedValues.maritalStatus;
                }
                
                if (!this.initialValues.maritalStatusHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maritalStatus");
                    this.initialValues.maritalStatusHasValue = true;
                }

                return this.initialValues.maritalStatus;
            }
            set
            {
                this.updatedValues.maritalStatus = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="dateOfBirth")]
        public System.DateTime? dateOfBirth 
	    { 
            get
            {
                if (this.updatedValues.dateOfBirthHasValue)
                {
                    return this.updatedValues.dateOfBirth;
                }
                
                if (!this.initialValues.dateOfBirthHasValue)
                {
                    this.loadMissingValue(this.initialValues, "dateOfBirth");
                    this.initialValues.dateOfBirthHasValue = true;
                }

                return this.initialValues.dateOfBirth;
            }
            set
            {
                this.updatedValues.dateOfBirth = value;
            }
        }

        [XmlElement(ElementName="age")]
        public short? age 
	    { 
            get
            {
                if (this.updatedValues.ageHasValue)
                {
                    return this.updatedValues.age;
                }
                
                if (!this.initialValues.ageHasValue)
                {
                    this.loadMissingValue(this.initialValues, "age");
                    this.initialValues.ageHasValue = true;
                }

                return this.initialValues.age;
            }
            set
            {
                this.updatedValues.age = value;
            }
        }

        [XmlElement(ElementName="nationality")]
        public Nationality nationality 
	    { 
            get
            {
                if (this.updatedValues.nationalityHasValue)
                {
                    return this.updatedValues.nationality;
                }
                
                if (!this.initialValues.nationalityHasValue)
                {
                    this.loadMissingValue(this.initialValues, "nationality");
                    this.initialValues.nationalityHasValue = true;
                }

                return this.initialValues.nationality;
            }
            set
            {
                this.updatedValues.nationality = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="countryOfBirth")]
        public string countryOfBirth 
	    { 
            get
            {
                if (this.updatedValues.countryOfBirthHasValue)
                {
                    return this.updatedValues.countryOfBirth;
                }
                
                if (!this.initialValues.countryOfBirthHasValue)
                {
                    this.loadMissingValue(this.initialValues, "countryOfBirth");
                    this.initialValues.countryOfBirthHasValue = true;
                }

                return this.initialValues.countryOfBirth;
            }
            set
            {
                this.updatedValues.countryOfBirth = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="countryOfResidence")]
        public string countryOfResidence 
	    { 
            get
            {
                if (this.updatedValues.countryOfResidenceHasValue)
                {
                    return this.updatedValues.countryOfResidence;
                }
                
                if (!this.initialValues.countryOfResidenceHasValue)
                {
                    this.loadMissingValue(this.initialValues, "countryOfResidence");
                    this.initialValues.countryOfResidenceHasValue = true;
                }

                return this.initialValues.countryOfResidence;
            }
            set
            {
                this.updatedValues.countryOfResidence = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="countryOfDomicile")]
        public string countryOfDomicile 
	    { 
            get
            {
                if (this.updatedValues.countryOfDomicileHasValue)
                {
                    return this.updatedValues.countryOfDomicile;
                }
                
                if (!this.initialValues.countryOfDomicileHasValue)
                {
                    this.loadMissingValue(this.initialValues, "countryOfDomicile");
                    this.initialValues.countryOfDomicileHasValue = true;
                }

                return this.initialValues.countryOfDomicile;
            }
            set
            {
                this.updatedValues.countryOfDomicile = value;
            }
        }

        [XmlElement(ElementName="numberOfYearsInUKResident")]
        public short? numberOfYearsInUKResident 
	    { 
            get
            {
                if (this.updatedValues.numberOfYearsInUKResidentHasValue)
                {
                    return this.updatedValues.numberOfYearsInUKResident;
                }
                
                if (!this.initialValues.numberOfYearsInUKResidentHasValue)
                {
                    this.loadMissingValue(this.initialValues, "numberOfYearsInUKResident");
                    this.initialValues.numberOfYearsInUKResidentHasValue = true;
                }

                return this.initialValues.numberOfYearsInUKResident;
            }
            set
            {
                this.updatedValues.numberOfYearsInUKResident = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="primaryEmploymentStatus")]
        public string primaryEmploymentStatus 
	    { 
            get
            {
                if (this.updatedValues.primaryEmploymentStatusHasValue)
                {
                    return this.updatedValues.primaryEmploymentStatus;
                }
                
                if (!this.initialValues.primaryEmploymentStatusHasValue)
                {
                    this.loadMissingValue(this.initialValues, "primaryEmploymentStatus");
                    this.initialValues.primaryEmploymentStatusHasValue = true;
                }

                return this.initialValues.primaryEmploymentStatus;
            }
            set
            {
                this.updatedValues.primaryEmploymentStatus = value;
            }
        }

        [StringLength(9)]
        [RegularExpression(@"[A-CEGHJ-NOPR-TW-Z]{1}[A-CEGHJ-NPR-TW-Z]{1}[0-9]{6}[ABCD\s]{1}")]
        [XmlElement(ElementName="NINumber")]
        public string NINumber 
	    { 
            get
            {
                if (this.updatedValues.NINumberHasValue)
                {
                    return this.updatedValues.NINumber;
                }
                
                if (!this.initialValues.NINumberHasValue)
                {
                    this.loadMissingValue(this.initialValues, "NINumber");
                    this.initialValues.NINumberHasValue = true;
                }

                return this.initialValues.NINumber;
            }
            set
            {
                this.updatedValues.NINumber = value;
            }
        }

        [XmlElement(ElementName="taxRate")]
        public decimal? taxRate 
	    { 
            get
            {
                if (this.updatedValues.taxRateHasValue)
                {
                    return this.updatedValues.taxRate;
                }
                
                if (!this.initialValues.taxRateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "taxRate");
                    this.initialValues.taxRateHasValue = true;
                }

                return this.initialValues.taxRate;
            }
            set
            {
                this.updatedValues.taxRate = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="taxCode")]
        public string taxCode 
	    { 
            get
            {
                if (this.updatedValues.taxCodeHasValue)
                {
                    return this.updatedValues.taxCode;
                }
                
                if (!this.initialValues.taxCodeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "taxCode");
                    this.initialValues.taxCodeHasValue = true;
                }

                return this.initialValues.taxCode;
            }
            set
            {
                this.updatedValues.taxCode = value;
            }
        }

        [RegularExpression(@"[YN]{1}")]
        [XmlElement(ElementName="contractedOut")]
        public Indicator contractedOut 
	    { 
            get
            {
                if (this.updatedValues.contractedOutHasValue)
                {
                    return this.updatedValues.contractedOut;
                }
                
                if (!this.initialValues.contractedOutHasValue)
                {
                    this.loadMissingValue(this.initialValues, "contractedOut");
                    this.initialValues.contractedOutHasValue = true;
                }

                return this.initialValues.contractedOut;
            }
            set
            {
                this.updatedValues.contractedOut = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="maximumBenefitsRegime")]
        public string maximumBenefitsRegime 
	    { 
            get
            {
                if (this.updatedValues.maximumBenefitsRegimeHasValue)
                {
                    return this.updatedValues.maximumBenefitsRegime;
                }
                
                if (!this.initialValues.maximumBenefitsRegimeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maximumBenefitsRegime");
                    this.initialValues.maximumBenefitsRegimeHasValue = true;
                }

                return this.initialValues.maximumBenefitsRegime;
            }
            set
            {
                this.updatedValues.maximumBenefitsRegime = value;
            }
        }

        [RegularExpression(@"[YN]{1}")]
        [XmlElement(ElementName="controllingDirector")]
        public Indicator controllingDirector 
	    { 
            get
            {
                if (this.updatedValues.controllingDirectorHasValue)
                {
                    return this.updatedValues.controllingDirector;
                }
                
                if (!this.initialValues.controllingDirectorHasValue)
                {
                    this.loadMissingValue(this.initialValues, "controllingDirector");
                    this.initialValues.controllingDirectorHasValue = true;
                }

                return this.initialValues.controllingDirector;
            }
            set
            {
                this.updatedValues.controllingDirector = value;
            }
        }

        [XmlElement(ElementName="deathStatus")]
        public DeathState deathStatus 
	    { 
            get
            {
                if (this.updatedValues.deathStatusHasValue)
                {
                    return this.updatedValues.deathStatus;
                }
                
                if (!this.initialValues.deathStatusHasValue)
                {
                    this.loadMissingValue(this.initialValues, "deathStatus");
                    this.initialValues.deathStatusHasValue = true;
                }

                return this.initialValues.deathStatus;
            }
            set
            {
                this.updatedValues.deathStatus = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="dateOfDeath")]
        public System.DateTime? dateOfDeath 
	    { 
            get
            {
                if (this.updatedValues.dateOfDeathHasValue)
                {
                    return this.updatedValues.dateOfDeath;
                }
                
                if (!this.initialValues.dateOfDeathHasValue)
                {
                    this.loadMissingValue(this.initialValues, "dateOfDeath");
                    this.initialValues.dateOfDeathHasValue = true;
                }

                return this.initialValues.dateOfDeath;
            }
            set
            {
                this.updatedValues.dateOfDeath = value;
            }
        }

        [XmlElement(ElementName="preferredMethodOfCommunication")]
        public CommunicationMethod preferredMethodOfCommunication 
	    { 
            get
            {
                if (this.updatedValues.preferredMethodOfCommunicationHasValue)
                {
                    return this.updatedValues.preferredMethodOfCommunication;
                }
                
                if (!this.initialValues.preferredMethodOfCommunicationHasValue)
                {
                    this.loadMissingValue(this.initialValues, "preferredMethodOfCommunication");
                    this.initialValues.preferredMethodOfCommunicationHasValue = true;
                }

                return this.initialValues.preferredMethodOfCommunication;
            }
            set
            {
                this.updatedValues.preferredMethodOfCommunication = value;
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "title");
            if (e2 != null)
            {
                this.title = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "forenames");
            if (e3 != null) 
            {
                this.forenames = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "surname");
            if (e4 != null) 
            {
                this.surname = e4.Value;
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "maidenSurname");
            if (e5 != null) 
            {
                this.maidenSurname = e5.Value;
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "birthName");
            if (e6 != null) 
            {
                this.birthName = e6.Value;
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "honorific");
            if (e7 != null) 
            {
                this.honorific = e7.Value;
            }

            XElement e8 = elements.FirstOrDefault(x => x.Name == "salutation");
            if (e8 != null) 
            {
                this.salutation = e8.Value;
            }

            XElement e9 = elements.FirstOrDefault(x => x.Name == "alias");
            if (e9 != null) 
            {
                this.alias = e9.Value;
            }

            XElement e10 = elements.FirstOrDefault(x => x.Name == "fullName");
            if (e10 != null) 
            {
                this.fullName = e10.Value;
            }

            XElement e11 = elements.FirstOrDefault(x => x.Name == "correspondenceName");
            if (e11 != null) 
            {
                this.correspondenceName = e11.Value;
            }

            XElement e12 = elements.FirstOrDefault(x => x.Name == "sex");
            if (e12 != null)
            {
                this.sex = e12.Value;
            }

            XElement e13 = elements.FirstOrDefault(x => x.Name == "maritalStatus");
            if (e13 != null)
            {
                this.maritalStatus = e13.Value;
            }

            XElement e14 = elements.FirstOrDefault(x => x.Name == "dateOfBirth");
            if (e14 != null)
            {
                this.dateOfBirth = System.DateTime.Parse(e14.Value);
            }

            XElement e15 = elements.FirstOrDefault(x => x.Name == "age");
            if (e15 != null)
            {
                this.age = short.Parse(e15.Value);
            }

            XElement e16 = elements.FirstOrDefault(x => x.Name == "nationality");
            if (e16 != null)
            {
                this.nationality = e16.Value;
            }

            XElement e17 = elements.FirstOrDefault(x => x.Name == "countryOfBirth");
            if (e17 != null) 
            {
                this.countryOfBirth = e17.Value;
            }

            XElement e18 = elements.FirstOrDefault(x => x.Name == "countryOfResidence");
            if (e18 != null) 
            {
                this.countryOfResidence = e18.Value;
            }

            XElement e19 = elements.FirstOrDefault(x => x.Name == "countryOfDomicile");
            if (e19 != null) 
            {
                this.countryOfDomicile = e19.Value;
            }

            XElement e20 = elements.FirstOrDefault(x => x.Name == "numberOfYearsInUKResident");
            if (e20 != null)
            {
                this.numberOfYearsInUKResident = short.Parse(e20.Value);
            }

            XElement e21 = elements.FirstOrDefault(x => x.Name == "primaryEmploymentStatus");
            if (e21 != null) 
            {
                this.primaryEmploymentStatus = e21.Value;
            }

            XElement e22 = elements.FirstOrDefault(x => x.Name == "NINumber");
            if (e22 != null) 
            {
                this.NINumber = e22.Value;
            }

            XElement e23 = elements.FirstOrDefault(x => x.Name == "taxRate");
            if (e23 != null)
            {
                this.taxRate = decimal.Parse(e23.Value);
            }

            XElement e24 = elements.FirstOrDefault(x => x.Name == "taxCode");
            if (e24 != null) 
            {
                this.taxCode = e24.Value;
            }

            XElement e25 = elements.FirstOrDefault(x => x.Name == "contractedOut");
            if (e25 != null)
            {
                this.contractedOut = e25.Value;
            }

            XElement e26 = elements.FirstOrDefault(x => x.Name == "maximumBenefitsRegime");
            if (e26 != null) 
            {
                this.maximumBenefitsRegime = e26.Value;
            }

            XElement e27 = elements.FirstOrDefault(x => x.Name == "controllingDirector");
            if (e27 != null)
            {
                this.controllingDirector = e27.Value;
            }

            XElement e28 = elements.FirstOrDefault(x => x.Name == "deathStatus");
            if (e28 != null)
            {
                this.deathStatus = e28.Value;
            }

            XElement e29 = elements.FirstOrDefault(x => x.Name == "dateOfDeath");
            if (e29 != null)
            {
                this.dateOfDeath = System.DateTime.Parse(e29.Value);
            }

            XElement e30 = elements.FirstOrDefault(x => x.Name == "preferredMethodOfCommunication");
            if (e30 != null)
            {
                this.preferredMethodOfCommunication = e30.Value;
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.titleHasValue && title != Title.Null)
            {
                writer.WriteElementString("title", this.updatedValues.title.Value);
            }
            else if (this.initialValues.titleHasValue && title != Title.Null)
            {
                writer.WriteElementString("title", this.initialValues.title.Value);
            }

            if (this.updatedValues.forenamesHasValue && !string.IsNullOrEmpty(forenames))
            {
                writer.WriteElementString("forenames", this.updatedValues.forenames);
            }
            else if (this.initialValues.forenamesHasValue && !string.IsNullOrEmpty(forenames))
            {
                writer.WriteElementString("forenames", this.initialValues.forenames);
            }

            if (this.updatedValues.surnameHasValue && !string.IsNullOrEmpty(surname))
            {
                writer.WriteElementString("surname", this.updatedValues.surname);
            }
            else if (this.initialValues.surnameHasValue && !string.IsNullOrEmpty(surname))
            {
                writer.WriteElementString("surname", this.initialValues.surname);
            }

            if (this.updatedValues.maidenSurnameHasValue && !string.IsNullOrEmpty(maidenSurname))
            {
                writer.WriteElementString("maidenSurname", this.updatedValues.maidenSurname);
            }
            else if (this.initialValues.maidenSurnameHasValue && !string.IsNullOrEmpty(maidenSurname))
            {
                writer.WriteElementString("maidenSurname", this.initialValues.maidenSurname);
            }

            if (this.updatedValues.birthNameHasValue && !string.IsNullOrEmpty(birthName))
            {
                writer.WriteElementString("birthName", this.updatedValues.birthName);
            }
            else if (this.initialValues.birthNameHasValue && !string.IsNullOrEmpty(birthName))
            {
                writer.WriteElementString("birthName", this.initialValues.birthName);
            }

            if (this.updatedValues.honorificHasValue && !string.IsNullOrEmpty(honorific))
            {
                writer.WriteElementString("honorific", this.updatedValues.honorific);
            }
            else if (this.initialValues.honorificHasValue && !string.IsNullOrEmpty(honorific))
            {
                writer.WriteElementString("honorific", this.initialValues.honorific);
            }

            if (this.updatedValues.salutationHasValue && !string.IsNullOrEmpty(salutation))
            {
                writer.WriteElementString("salutation", this.updatedValues.salutation);
            }
            else if (this.initialValues.salutationHasValue && !string.IsNullOrEmpty(salutation))
            {
                writer.WriteElementString("salutation", this.initialValues.salutation);
            }

            if (this.updatedValues.aliasHasValue && !string.IsNullOrEmpty(alias))
            {
                writer.WriteElementString("alias", this.updatedValues.alias);
            }
            else if (this.initialValues.aliasHasValue && !string.IsNullOrEmpty(alias))
            {
                writer.WriteElementString("alias", this.initialValues.alias);
            }

            if (this.updatedValues.fullNameHasValue && !string.IsNullOrEmpty(fullName))
            {
                writer.WriteElementString("fullName", this.updatedValues.fullName);
            }
            else if (this.initialValues.fullNameHasValue && !string.IsNullOrEmpty(fullName))
            {
                writer.WriteElementString("fullName", this.initialValues.fullName);
            }

            if (this.updatedValues.correspondenceNameHasValue && !string.IsNullOrEmpty(correspondenceName))
            {
                writer.WriteElementString("correspondenceName", this.updatedValues.correspondenceName);
            }
            else if (this.initialValues.correspondenceNameHasValue && !string.IsNullOrEmpty(correspondenceName))
            {
                writer.WriteElementString("correspondenceName", this.initialValues.correspondenceName);
            }

            if (this.updatedValues.sexHasValue && sex != SexType.Null)
            {
                writer.WriteElementString("sex", this.updatedValues.sex.Value);
            }
            else if (this.initialValues.sexHasValue && sex != SexType.Null)
            {
                writer.WriteElementString("sex", this.initialValues.sex.Value);
            }

            if (this.updatedValues.maritalStatusHasValue && maritalStatus != MaritalState.Null)
            {
                writer.WriteElementString("maritalStatus", this.updatedValues.maritalStatus.Value);
            }
            else if (this.initialValues.maritalStatusHasValue && maritalStatus != MaritalState.Null)
            {
                writer.WriteElementString("maritalStatus", this.initialValues.maritalStatus.Value);
            }

            if (this.updatedValues.dateOfBirthHasValue && dateOfBirth != null)
            {
                writer.WriteElementString("dateOfBirth", this.updatedValues.dateOfBirth.ToString());
            }
            else if (this.initialValues.dateOfBirthHasValue && dateOfBirth != null)
            {
                writer.WriteElementString("dateOfBirth", this.initialValues.dateOfBirth.ToString());
            }

            if (this.updatedValues.ageHasValue && age != null)
            {
                writer.WriteElementString("age", this.updatedValues.age.ToString());
            }
            else if (this.initialValues.ageHasValue && age != null)
            {
                writer.WriteElementString("age", this.initialValues.age.ToString());
            }

            if (this.updatedValues.nationalityHasValue && nationality != Nationality.Null)
            {
                writer.WriteElementString("nationality", this.updatedValues.nationality.Value);
            }
            else if (this.initialValues.nationalityHasValue && nationality != Nationality.Null)
            {
                writer.WriteElementString("nationality", this.initialValues.nationality.Value);
            }

            if (this.updatedValues.countryOfBirthHasValue && !string.IsNullOrEmpty(countryOfBirth))
            {
                writer.WriteElementString("countryOfBirth", this.updatedValues.countryOfBirth);
            }
            else if (this.initialValues.countryOfBirthHasValue && !string.IsNullOrEmpty(countryOfBirth))
            {
                writer.WriteElementString("countryOfBirth", this.initialValues.countryOfBirth);
            }

            if (this.updatedValues.countryOfResidenceHasValue && !string.IsNullOrEmpty(countryOfResidence))
            {
                writer.WriteElementString("countryOfResidence", this.updatedValues.countryOfResidence);
            }
            else if (this.initialValues.countryOfResidenceHasValue && !string.IsNullOrEmpty(countryOfResidence))
            {
                writer.WriteElementString("countryOfResidence", this.initialValues.countryOfResidence);
            }

            if (this.updatedValues.countryOfDomicileHasValue && !string.IsNullOrEmpty(countryOfDomicile))
            {
                writer.WriteElementString("countryOfDomicile", this.updatedValues.countryOfDomicile);
            }
            else if (this.initialValues.countryOfDomicileHasValue && !string.IsNullOrEmpty(countryOfDomicile))
            {
                writer.WriteElementString("countryOfDomicile", this.initialValues.countryOfDomicile);
            }

            if (this.updatedValues.numberOfYearsInUKResidentHasValue && numberOfYearsInUKResident != null)
            {
                writer.WriteElementString("numberOfYearsInUKResident", this.updatedValues.numberOfYearsInUKResident.ToString());
            }
            else if (this.initialValues.numberOfYearsInUKResidentHasValue && numberOfYearsInUKResident != null)
            {
                writer.WriteElementString("numberOfYearsInUKResident", this.initialValues.numberOfYearsInUKResident.ToString());
            }

            if (this.updatedValues.primaryEmploymentStatusHasValue && !string.IsNullOrEmpty(primaryEmploymentStatus))
            {
                writer.WriteElementString("primaryEmploymentStatus", this.updatedValues.primaryEmploymentStatus);
            }
            else if (this.initialValues.primaryEmploymentStatusHasValue && !string.IsNullOrEmpty(primaryEmploymentStatus))
            {
                writer.WriteElementString("primaryEmploymentStatus", this.initialValues.primaryEmploymentStatus);
            }

            if (this.updatedValues.NINumberHasValue && !string.IsNullOrEmpty(NINumber))
            {
                writer.WriteElementString("NINumber", this.updatedValues.NINumber);
            }
            else if (this.initialValues.NINumberHasValue && !string.IsNullOrEmpty(NINumber))
            {
                writer.WriteElementString("NINumber", this.initialValues.NINumber);
            }

            if (this.updatedValues.taxRateHasValue && taxRate != null)
            {
                writer.WriteElementString("taxRate", this.updatedValues.taxRate.ToString());
            }
            else if (this.initialValues.taxRateHasValue && taxRate != null)
            {
                writer.WriteElementString("taxRate", this.initialValues.taxRate.ToString());
            }

            if (this.updatedValues.taxCodeHasValue && !string.IsNullOrEmpty(taxCode))
            {
                writer.WriteElementString("taxCode", this.updatedValues.taxCode);
            }
            else if (this.initialValues.taxCodeHasValue && !string.IsNullOrEmpty(taxCode))
            {
                writer.WriteElementString("taxCode", this.initialValues.taxCode);
            }

            if (this.updatedValues.contractedOutHasValue && contractedOut != Indicator.Null)
            {
                writer.WriteElementString("contractedOut", this.updatedValues.contractedOut.Value);
            }
            else if (this.initialValues.contractedOutHasValue && contractedOut != Indicator.Null)
            {
                writer.WriteElementString("contractedOut", this.initialValues.contractedOut.Value);
            }

            if (this.updatedValues.maximumBenefitsRegimeHasValue && !string.IsNullOrEmpty(maximumBenefitsRegime))
            {
                writer.WriteElementString("maximumBenefitsRegime", this.updatedValues.maximumBenefitsRegime);
            }
            else if (this.initialValues.maximumBenefitsRegimeHasValue && !string.IsNullOrEmpty(maximumBenefitsRegime))
            {
                writer.WriteElementString("maximumBenefitsRegime", this.initialValues.maximumBenefitsRegime);
            }

            if (this.updatedValues.controllingDirectorHasValue && controllingDirector != Indicator.Null)
            {
                writer.WriteElementString("controllingDirector", this.updatedValues.controllingDirector.Value);
            }
            else if (this.initialValues.controllingDirectorHasValue && controllingDirector != Indicator.Null)
            {
                writer.WriteElementString("controllingDirector", this.initialValues.controllingDirector.Value);
            }

            if (this.updatedValues.deathStatusHasValue && deathStatus != DeathState.Null)
            {
                writer.WriteElementString("deathStatus", this.updatedValues.deathStatus.Value);
            }
            else if (this.initialValues.deathStatusHasValue && deathStatus != DeathState.Null)
            {
                writer.WriteElementString("deathStatus", this.initialValues.deathStatus.Value);
            }

            if (this.updatedValues.dateOfDeathHasValue && dateOfDeath != null)
            {
                writer.WriteElementString("dateOfDeath", this.updatedValues.dateOfDeath.ToString());
            }
            else if (this.initialValues.dateOfDeathHasValue && dateOfDeath != null)
            {
                writer.WriteElementString("dateOfDeath", this.initialValues.dateOfDeath.ToString());
            }

            if (this.updatedValues.preferredMethodOfCommunicationHasValue && preferredMethodOfCommunication != CommunicationMethod.Null)
            {
                writer.WriteElementString("preferredMethodOfCommunication", this.updatedValues.preferredMethodOfCommunication.Value);
            }
            else if (this.initialValues.preferredMethodOfCommunicationHasValue && preferredMethodOfCommunication != CommunicationMethod.Null)
            {
                writer.WriteElementString("preferredMethodOfCommunication", this.initialValues.preferredMethodOfCommunication.Value);
            }

            this.AfterWriteXml(writer);
        }
    }
}
