//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Policy.DataObjects;

namespace Qujck.Pas.Model.Policy
{
    [Serializable]
    public sealed partial class InvestmentBenefit : AbstractPolicyEntity
    {
        internal InvestmentBenefitDo initialValues { get; private set; }
        internal InvestmentBenefitDo updatedValues { get; private set; }
        internal Action<InvestmentBenefitDo, string> loadMissingValue { private get; set; }

        public InvestmentBenefit()
        {
            this.initialValues = new InvestmentBenefitDo();
            this.updatedValues = new InvestmentBenefitDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Policy";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "InvestmentBenefit";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "type";
                yield return "paymentBasis";
                yield return "amount";
                yield return "amountCcy";
                yield return "amountPercent";
                yield return "amountCalculationBasis";
                yield return "changeBasis";
                yield return "changeIndex";
                yield return "changePercent";
                yield return "changeStartDate";
                yield return "changeEndDate";
                yield return "nextChangeDate";
                yield return "paymentMethod";
                yield return "frequency";
                yield return "paymentDay";
                yield return "startBasis";
                yield return "startDate";
                yield return "endDate";
                yield return "nextPaymentDate";
                yield return "fundWithdrawalBasis";
                yield return "FinancialInstitutionAccount_id";
                yield return "InvestmentBenefitConfiguration_code";
                yield return "Contract_id";
                yield return "escalationId";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [XmlElement(ElementName="type")]
        public InvestmentBenefitType type 
	    { 
            get
            {
                if (this.updatedValues.typeHasValue)
                {
                    return this.updatedValues.type;
                }
                
                if (!this.initialValues.typeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "type");
                    this.initialValues.typeHasValue = true;
                }

                return this.initialValues.type;
            }
            set
            {
                this.updatedValues.type = value;
            }
        }

        [XmlElement(ElementName="paymentBasis")]
        public PaymentBasis paymentBasis 
	    { 
            get
            {
                if (this.updatedValues.paymentBasisHasValue)
                {
                    return this.updatedValues.paymentBasis;
                }
                
                if (!this.initialValues.paymentBasisHasValue)
                {
                    this.loadMissingValue(this.initialValues, "paymentBasis");
                    this.initialValues.paymentBasisHasValue = true;
                }

                return this.initialValues.paymentBasis;
            }
            set
            {
                this.updatedValues.paymentBasis = value;
            }
        }

        [XmlElement(ElementName="amount")]
        public decimal? amount 
	    { 
            get
            {
                if (this.updatedValues.amountHasValue)
                {
                    return this.updatedValues.amount;
                }
                
                if (!this.initialValues.amountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "amount");
                    this.initialValues.amountHasValue = true;
                }

                return this.initialValues.amount;
            }
            set
            {
                this.updatedValues.amount = value;
            }
        }

        [XmlElement(ElementName="amountCcy")]
        public Currency amountCcy 
	    { 
            get
            {
                if (this.updatedValues.amountCcyHasValue)
                {
                    return this.updatedValues.amountCcy;
                }
                
                if (!this.initialValues.amountCcyHasValue)
                {
                    this.loadMissingValue(this.initialValues, "amountCcy");
                    this.initialValues.amountCcyHasValue = true;
                }

                return this.initialValues.amountCcy;
            }
            set
            {
                this.updatedValues.amountCcy = value;
            }
        }

        [XmlElement(ElementName="amountPercent")]
        public decimal? amountPercent 
	    { 
            get
            {
                if (this.updatedValues.amountPercentHasValue)
                {
                    return this.updatedValues.amountPercent;
                }
                
                if (!this.initialValues.amountPercentHasValue)
                {
                    this.loadMissingValue(this.initialValues, "amountPercent");
                    this.initialValues.amountPercentHasValue = true;
                }

                return this.initialValues.amountPercent;
            }
            set
            {
                this.updatedValues.amountPercent = value;
            }
        }

        [XmlElement(ElementName="amountCalculationBasis")]
        public AmountCalculationBasis amountCalculationBasis 
	    { 
            get
            {
                if (this.updatedValues.amountCalculationBasisHasValue)
                {
                    return this.updatedValues.amountCalculationBasis;
                }
                
                if (!this.initialValues.amountCalculationBasisHasValue)
                {
                    this.loadMissingValue(this.initialValues, "amountCalculationBasis");
                    this.initialValues.amountCalculationBasisHasValue = true;
                }

                return this.initialValues.amountCalculationBasis;
            }
            set
            {
                this.updatedValues.amountCalculationBasis = value;
            }
        }

        [XmlElement(ElementName="changeBasis")]
        public ChangeBasis changeBasis 
	    { 
            get
            {
                if (this.updatedValues.changeBasisHasValue)
                {
                    return this.updatedValues.changeBasis;
                }
                
                if (!this.initialValues.changeBasisHasValue)
                {
                    this.loadMissingValue(this.initialValues, "changeBasis");
                    this.initialValues.changeBasisHasValue = true;
                }

                return this.initialValues.changeBasis;
            }
            set
            {
                this.updatedValues.changeBasis = value;
            }
        }

        [XmlElement(ElementName="changeIndex")]
        public ChangeIndex changeIndex 
	    { 
            get
            {
                if (this.updatedValues.changeIndexHasValue)
                {
                    return this.updatedValues.changeIndex;
                }
                
                if (!this.initialValues.changeIndexHasValue)
                {
                    this.loadMissingValue(this.initialValues, "changeIndex");
                    this.initialValues.changeIndexHasValue = true;
                }

                return this.initialValues.changeIndex;
            }
            set
            {
                this.updatedValues.changeIndex = value;
            }
        }

        [XmlElement(ElementName="changePercent")]
        public decimal? changePercent 
	    { 
            get
            {
                if (this.updatedValues.changePercentHasValue)
                {
                    return this.updatedValues.changePercent;
                }
                
                if (!this.initialValues.changePercentHasValue)
                {
                    this.loadMissingValue(this.initialValues, "changePercent");
                    this.initialValues.changePercentHasValue = true;
                }

                return this.initialValues.changePercent;
            }
            set
            {
                this.updatedValues.changePercent = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="changeStartDate")]
        public System.DateTime? changeStartDate 
	    { 
            get
            {
                if (this.updatedValues.changeStartDateHasValue)
                {
                    return this.updatedValues.changeStartDate;
                }
                
                if (!this.initialValues.changeStartDateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "changeStartDate");
                    this.initialValues.changeStartDateHasValue = true;
                }

                return this.initialValues.changeStartDate;
            }
            set
            {
                this.updatedValues.changeStartDate = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="changeEndDate")]
        public System.DateTime? changeEndDate 
	    { 
            get
            {
                if (this.updatedValues.changeEndDateHasValue)
                {
                    return this.updatedValues.changeEndDate;
                }
                
                if (!this.initialValues.changeEndDateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "changeEndDate");
                    this.initialValues.changeEndDateHasValue = true;
                }

                return this.initialValues.changeEndDate;
            }
            set
            {
                this.updatedValues.changeEndDate = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="nextChangeDate")]
        public System.DateTime? nextChangeDate 
	    { 
            get
            {
                if (this.updatedValues.nextChangeDateHasValue)
                {
                    return this.updatedValues.nextChangeDate;
                }
                
                if (!this.initialValues.nextChangeDateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "nextChangeDate");
                    this.initialValues.nextChangeDateHasValue = true;
                }

                return this.initialValues.nextChangeDate;
            }
            set
            {
                this.updatedValues.nextChangeDate = value;
            }
        }

        [XmlElement(ElementName="paymentMethod")]
        public PaymentMethod paymentMethod 
	    { 
            get
            {
                if (this.updatedValues.paymentMethodHasValue)
                {
                    return this.updatedValues.paymentMethod;
                }
                
                if (!this.initialValues.paymentMethodHasValue)
                {
                    this.loadMissingValue(this.initialValues, "paymentMethod");
                    this.initialValues.paymentMethodHasValue = true;
                }

                return this.initialValues.paymentMethod;
            }
            set
            {
                this.updatedValues.paymentMethod = value;
            }
        }

        [XmlElement(ElementName="frequency")]
        public Frequency frequency 
	    { 
            get
            {
                if (this.updatedValues.frequencyHasValue)
                {
                    return this.updatedValues.frequency;
                }
                
                if (!this.initialValues.frequencyHasValue)
                {
                    this.loadMissingValue(this.initialValues, "frequency");
                    this.initialValues.frequencyHasValue = true;
                }

                return this.initialValues.frequency;
            }
            set
            {
                this.updatedValues.frequency = value;
            }
        }

        [XmlElement(ElementName="paymentDay")]
        public short? paymentDay 
	    { 
            get
            {
                if (this.updatedValues.paymentDayHasValue)
                {
                    return this.updatedValues.paymentDay;
                }
                
                if (!this.initialValues.paymentDayHasValue)
                {
                    this.loadMissingValue(this.initialValues, "paymentDay");
                    this.initialValues.paymentDayHasValue = true;
                }

                return this.initialValues.paymentDay;
            }
            set
            {
                this.updatedValues.paymentDay = value;
            }
        }

        [XmlElement(ElementName="startBasis")]
        public StartBasis startBasis 
	    { 
            get
            {
                if (this.updatedValues.startBasisHasValue)
                {
                    return this.updatedValues.startBasis;
                }
                
                if (!this.initialValues.startBasisHasValue)
                {
                    this.loadMissingValue(this.initialValues, "startBasis");
                    this.initialValues.startBasisHasValue = true;
                }

                return this.initialValues.startBasis;
            }
            set
            {
                this.updatedValues.startBasis = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="startDate")]
        public System.DateTime? startDate 
	    { 
            get
            {
                if (this.updatedValues.startDateHasValue)
                {
                    return this.updatedValues.startDate;
                }
                
                if (!this.initialValues.startDateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "startDate");
                    this.initialValues.startDateHasValue = true;
                }

                return this.initialValues.startDate;
            }
            set
            {
                this.updatedValues.startDate = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="endDate")]
        public System.DateTime? endDate 
	    { 
            get
            {
                if (this.updatedValues.endDateHasValue)
                {
                    return this.updatedValues.endDate;
                }
                
                if (!this.initialValues.endDateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "endDate");
                    this.initialValues.endDateHasValue = true;
                }

                return this.initialValues.endDate;
            }
            set
            {
                this.updatedValues.endDate = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="nextPaymentDate")]
        public System.DateTime? nextPaymentDate 
	    { 
            get
            {
                if (this.updatedValues.nextPaymentDateHasValue)
                {
                    return this.updatedValues.nextPaymentDate;
                }
                
                if (!this.initialValues.nextPaymentDateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "nextPaymentDate");
                    this.initialValues.nextPaymentDateHasValue = true;
                }

                return this.initialValues.nextPaymentDate;
            }
            set
            {
                this.updatedValues.nextPaymentDate = value;
            }
        }

        [XmlElement(ElementName="fundWithdrawalBasis")]
        public FundWithdrawalBasis fundWithdrawalBasis 
	    { 
            get
            {
                if (this.updatedValues.fundWithdrawalBasisHasValue)
                {
                    return this.updatedValues.fundWithdrawalBasis;
                }
                
                if (!this.initialValues.fundWithdrawalBasisHasValue)
                {
                    this.loadMissingValue(this.initialValues, "fundWithdrawalBasis");
                    this.initialValues.fundWithdrawalBasisHasValue = true;
                }

                return this.initialValues.fundWithdrawalBasis;
            }
            set
            {
                this.updatedValues.fundWithdrawalBasis = value;
            }
        }

        [XmlElement(ElementName="FinancialInstitutionAccount_id")]
        public long? FinancialInstitutionAccount_id 
	    { 
            get
            {
                if (this.updatedValues.FinancialInstitutionAccount_idHasValue)
                {
                    return this.updatedValues.FinancialInstitutionAccount_id;
                }
                
                if (!this.initialValues.FinancialInstitutionAccount_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "FinancialInstitutionAccount_id");
                    this.initialValues.FinancialInstitutionAccount_idHasValue = true;
                }

                return this.initialValues.FinancialInstitutionAccount_id;
            }
            set
            {
                this.updatedValues.FinancialInstitutionAccount_id = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="InvestmentBenefitConfiguration_code")]
        public string InvestmentBenefitConfiguration_code 
	    { 
            get
            {
                if (this.updatedValues.InvestmentBenefitConfiguration_codeHasValue)
                {
                    return this.updatedValues.InvestmentBenefitConfiguration_code;
                }
                
                if (!this.initialValues.InvestmentBenefitConfiguration_codeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "InvestmentBenefitConfiguration_code");
                    this.initialValues.InvestmentBenefitConfiguration_codeHasValue = true;
                }

                return this.initialValues.InvestmentBenefitConfiguration_code;
            }
            set
            {
                this.updatedValues.InvestmentBenefitConfiguration_code = value;
            }
        }

        [XmlElement(ElementName="Contract_id")]
        public long Contract_id 
	    { 
            get
            {
                if (this.updatedValues.Contract_idHasValue)
                {
                    return this.updatedValues.Contract_id;
                }
                
                if (!this.initialValues.Contract_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Contract_id");
                    this.initialValues.Contract_idHasValue = true;
                }

                return this.initialValues.Contract_id;
            }
            set
            {
                this.updatedValues.Contract_id = value;
            }
        }

        [XmlElement(ElementName="escalationId")]
        public long? escalationId 
	    { 
            get
            {
                if (this.updatedValues.escalationIdHasValue)
                {
                    return this.updatedValues.escalationId;
                }
                
                if (!this.initialValues.escalationIdHasValue)
                {
                    this.loadMissingValue(this.initialValues, "escalationId");
                    this.initialValues.escalationIdHasValue = true;
                }

                return this.initialValues.escalationId;
            }
            set
            {
                this.updatedValues.escalationId = value;
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "type");
            if (e2 != null)
            {
                this.type = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "paymentBasis");
            if (e3 != null)
            {
                this.paymentBasis = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "amount");
            if (e4 != null)
            {
                this.amount = decimal.Parse(e4.Value);
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "amountCcy");
            if (e5 != null)
            {
                this.amountCcy = e5.Value;
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "amountPercent");
            if (e6 != null)
            {
                this.amountPercent = decimal.Parse(e6.Value);
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "amountCalculationBasis");
            if (e7 != null)
            {
                this.amountCalculationBasis = e7.Value;
            }

            XElement e8 = elements.FirstOrDefault(x => x.Name == "changeBasis");
            if (e8 != null)
            {
                this.changeBasis = e8.Value;
            }

            XElement e9 = elements.FirstOrDefault(x => x.Name == "changeIndex");
            if (e9 != null)
            {
                this.changeIndex = e9.Value;
            }

            XElement e10 = elements.FirstOrDefault(x => x.Name == "changePercent");
            if (e10 != null)
            {
                this.changePercent = decimal.Parse(e10.Value);
            }

            XElement e11 = elements.FirstOrDefault(x => x.Name == "changeStartDate");
            if (e11 != null)
            {
                this.changeStartDate = System.DateTime.Parse(e11.Value);
            }

            XElement e12 = elements.FirstOrDefault(x => x.Name == "changeEndDate");
            if (e12 != null)
            {
                this.changeEndDate = System.DateTime.Parse(e12.Value);
            }

            XElement e13 = elements.FirstOrDefault(x => x.Name == "nextChangeDate");
            if (e13 != null)
            {
                this.nextChangeDate = System.DateTime.Parse(e13.Value);
            }

            XElement e14 = elements.FirstOrDefault(x => x.Name == "paymentMethod");
            if (e14 != null)
            {
                this.paymentMethod = e14.Value;
            }

            XElement e15 = elements.FirstOrDefault(x => x.Name == "frequency");
            if (e15 != null)
            {
                this.frequency = e15.Value;
            }

            XElement e16 = elements.FirstOrDefault(x => x.Name == "paymentDay");
            if (e16 != null)
            {
                this.paymentDay = short.Parse(e16.Value);
            }

            XElement e17 = elements.FirstOrDefault(x => x.Name == "startBasis");
            if (e17 != null)
            {
                this.startBasis = e17.Value;
            }

            XElement e18 = elements.FirstOrDefault(x => x.Name == "startDate");
            if (e18 != null)
            {
                this.startDate = System.DateTime.Parse(e18.Value);
            }

            XElement e19 = elements.FirstOrDefault(x => x.Name == "endDate");
            if (e19 != null)
            {
                this.endDate = System.DateTime.Parse(e19.Value);
            }

            XElement e20 = elements.FirstOrDefault(x => x.Name == "nextPaymentDate");
            if (e20 != null)
            {
                this.nextPaymentDate = System.DateTime.Parse(e20.Value);
            }

            XElement e21 = elements.FirstOrDefault(x => x.Name == "fundWithdrawalBasis");
            if (e21 != null)
            {
                this.fundWithdrawalBasis = e21.Value;
            }

            XElement e22 = elements.FirstOrDefault(x => x.Name == "FinancialInstitutionAccount_id");
            if (e22 != null)
            {
                this.FinancialInstitutionAccount_id = long.Parse(e22.Value);
            }

            XElement e23 = elements.FirstOrDefault(x => x.Name == "InvestmentBenefitConfiguration_code");
            if (e23 != null) 
            {
                this.InvestmentBenefitConfiguration_code = e23.Value;
            }

            XElement e24 = elements.FirstOrDefault(x => x.Name == "Contract_id");
            if (e24 != null)
            {
                this.Contract_id = long.Parse(e24.Value);
            }

            XElement e25 = elements.FirstOrDefault(x => x.Name == "escalationId");
            if (e25 != null)
            {
                this.escalationId = long.Parse(e25.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.typeHasValue && type != InvestmentBenefitType.Null)
            {
                writer.WriteElementString("type", this.updatedValues.type.Value);
            }
            else if (this.initialValues.typeHasValue && type != InvestmentBenefitType.Null)
            {
                writer.WriteElementString("type", this.initialValues.type.Value);
            }

            if (this.updatedValues.paymentBasisHasValue && paymentBasis != PaymentBasis.Null)
            {
                writer.WriteElementString("paymentBasis", this.updatedValues.paymentBasis.Value);
            }
            else if (this.initialValues.paymentBasisHasValue && paymentBasis != PaymentBasis.Null)
            {
                writer.WriteElementString("paymentBasis", this.initialValues.paymentBasis.Value);
            }

            if (this.updatedValues.amountHasValue && amount != null)
            {
                writer.WriteElementString("amount", this.updatedValues.amount.ToString());
            }
            else if (this.initialValues.amountHasValue && amount != null)
            {
                writer.WriteElementString("amount", this.initialValues.amount.ToString());
            }

            if (this.updatedValues.amountCcyHasValue && amountCcy != Currency.Null)
            {
                writer.WriteElementString("amountCcy", this.updatedValues.amountCcy.Value);
            }
            else if (this.initialValues.amountCcyHasValue && amountCcy != Currency.Null)
            {
                writer.WriteElementString("amountCcy", this.initialValues.amountCcy.Value);
            }

            if (this.updatedValues.amountPercentHasValue && amountPercent != null)
            {
                writer.WriteElementString("amountPercent", this.updatedValues.amountPercent.ToString());
            }
            else if (this.initialValues.amountPercentHasValue && amountPercent != null)
            {
                writer.WriteElementString("amountPercent", this.initialValues.amountPercent.ToString());
            }

            if (this.updatedValues.amountCalculationBasisHasValue && amountCalculationBasis != AmountCalculationBasis.Null)
            {
                writer.WriteElementString("amountCalculationBasis", this.updatedValues.amountCalculationBasis.Value);
            }
            else if (this.initialValues.amountCalculationBasisHasValue && amountCalculationBasis != AmountCalculationBasis.Null)
            {
                writer.WriteElementString("amountCalculationBasis", this.initialValues.amountCalculationBasis.Value);
            }

            if (this.updatedValues.changeBasisHasValue && changeBasis != ChangeBasis.Null)
            {
                writer.WriteElementString("changeBasis", this.updatedValues.changeBasis.Value);
            }
            else if (this.initialValues.changeBasisHasValue && changeBasis != ChangeBasis.Null)
            {
                writer.WriteElementString("changeBasis", this.initialValues.changeBasis.Value);
            }

            if (this.updatedValues.changeIndexHasValue && changeIndex != ChangeIndex.Null)
            {
                writer.WriteElementString("changeIndex", this.updatedValues.changeIndex.Value);
            }
            else if (this.initialValues.changeIndexHasValue && changeIndex != ChangeIndex.Null)
            {
                writer.WriteElementString("changeIndex", this.initialValues.changeIndex.Value);
            }

            if (this.updatedValues.changePercentHasValue && changePercent != null)
            {
                writer.WriteElementString("changePercent", this.updatedValues.changePercent.ToString());
            }
            else if (this.initialValues.changePercentHasValue && changePercent != null)
            {
                writer.WriteElementString("changePercent", this.initialValues.changePercent.ToString());
            }

            if (this.updatedValues.changeStartDateHasValue && changeStartDate != null)
            {
                writer.WriteElementString("changeStartDate", this.updatedValues.changeStartDate.ToString());
            }
            else if (this.initialValues.changeStartDateHasValue && changeStartDate != null)
            {
                writer.WriteElementString("changeStartDate", this.initialValues.changeStartDate.ToString());
            }

            if (this.updatedValues.changeEndDateHasValue && changeEndDate != null)
            {
                writer.WriteElementString("changeEndDate", this.updatedValues.changeEndDate.ToString());
            }
            else if (this.initialValues.changeEndDateHasValue && changeEndDate != null)
            {
                writer.WriteElementString("changeEndDate", this.initialValues.changeEndDate.ToString());
            }

            if (this.updatedValues.nextChangeDateHasValue && nextChangeDate != null)
            {
                writer.WriteElementString("nextChangeDate", this.updatedValues.nextChangeDate.ToString());
            }
            else if (this.initialValues.nextChangeDateHasValue && nextChangeDate != null)
            {
                writer.WriteElementString("nextChangeDate", this.initialValues.nextChangeDate.ToString());
            }

            if (this.updatedValues.paymentMethodHasValue && paymentMethod != PaymentMethod.Null)
            {
                writer.WriteElementString("paymentMethod", this.updatedValues.paymentMethod.Value);
            }
            else if (this.initialValues.paymentMethodHasValue && paymentMethod != PaymentMethod.Null)
            {
                writer.WriteElementString("paymentMethod", this.initialValues.paymentMethod.Value);
            }

            if (this.updatedValues.frequencyHasValue && frequency != Frequency.Null)
            {
                writer.WriteElementString("frequency", this.updatedValues.frequency.Value);
            }
            else if (this.initialValues.frequencyHasValue && frequency != Frequency.Null)
            {
                writer.WriteElementString("frequency", this.initialValues.frequency.Value);
            }

            if (this.updatedValues.paymentDayHasValue && paymentDay != null)
            {
                writer.WriteElementString("paymentDay", this.updatedValues.paymentDay.ToString());
            }
            else if (this.initialValues.paymentDayHasValue && paymentDay != null)
            {
                writer.WriteElementString("paymentDay", this.initialValues.paymentDay.ToString());
            }

            if (this.updatedValues.startBasisHasValue && startBasis != StartBasis.Null)
            {
                writer.WriteElementString("startBasis", this.updatedValues.startBasis.Value);
            }
            else if (this.initialValues.startBasisHasValue && startBasis != StartBasis.Null)
            {
                writer.WriteElementString("startBasis", this.initialValues.startBasis.Value);
            }

            if (this.updatedValues.startDateHasValue && startDate != null)
            {
                writer.WriteElementString("startDate", this.updatedValues.startDate.ToString());
            }
            else if (this.initialValues.startDateHasValue && startDate != null)
            {
                writer.WriteElementString("startDate", this.initialValues.startDate.ToString());
            }

            if (this.updatedValues.endDateHasValue && endDate != null)
            {
                writer.WriteElementString("endDate", this.updatedValues.endDate.ToString());
            }
            else if (this.initialValues.endDateHasValue && endDate != null)
            {
                writer.WriteElementString("endDate", this.initialValues.endDate.ToString());
            }

            if (this.updatedValues.nextPaymentDateHasValue && nextPaymentDate != null)
            {
                writer.WriteElementString("nextPaymentDate", this.updatedValues.nextPaymentDate.ToString());
            }
            else if (this.initialValues.nextPaymentDateHasValue && nextPaymentDate != null)
            {
                writer.WriteElementString("nextPaymentDate", this.initialValues.nextPaymentDate.ToString());
            }

            if (this.updatedValues.fundWithdrawalBasisHasValue && fundWithdrawalBasis != FundWithdrawalBasis.Null)
            {
                writer.WriteElementString("fundWithdrawalBasis", this.updatedValues.fundWithdrawalBasis.Value);
            }
            else if (this.initialValues.fundWithdrawalBasisHasValue && fundWithdrawalBasis != FundWithdrawalBasis.Null)
            {
                writer.WriteElementString("fundWithdrawalBasis", this.initialValues.fundWithdrawalBasis.Value);
            }

            if (this.updatedValues.FinancialInstitutionAccount_idHasValue && FinancialInstitutionAccount_id != null)
            {
                writer.WriteElementString("FinancialInstitutionAccount_id", this.updatedValues.FinancialInstitutionAccount_id.ToString());
            }
            else if (this.initialValues.FinancialInstitutionAccount_idHasValue && FinancialInstitutionAccount_id != null)
            {
                writer.WriteElementString("FinancialInstitutionAccount_id", this.initialValues.FinancialInstitutionAccount_id.ToString());
            }

            if (this.updatedValues.InvestmentBenefitConfiguration_codeHasValue && !string.IsNullOrEmpty(InvestmentBenefitConfiguration_code))
            {
                writer.WriteElementString("InvestmentBenefitConfiguration_code", this.updatedValues.InvestmentBenefitConfiguration_code);
            }
            else if (this.initialValues.InvestmentBenefitConfiguration_codeHasValue && !string.IsNullOrEmpty(InvestmentBenefitConfiguration_code))
            {
                writer.WriteElementString("InvestmentBenefitConfiguration_code", this.initialValues.InvestmentBenefitConfiguration_code);
            }

            if (this.updatedValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.updatedValues.Contract_id.ToString());
            }
            else if (this.initialValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.initialValues.Contract_id.ToString());
            }

            if (this.updatedValues.escalationIdHasValue && escalationId != null)
            {
                writer.WriteElementString("escalationId", this.updatedValues.escalationId.ToString());
            }
            else if (this.initialValues.escalationIdHasValue && escalationId != null)
            {
                writer.WriteElementString("escalationId", this.initialValues.escalationId.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
