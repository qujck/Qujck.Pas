<#@ template debug="false" hostspecific="true" language="C#" 
#><#@ assembly name="System.Core" 
#><#@ assembly name="System.Data" 
#><#@ import namespace="System.Linq" 
#><#@ import namespace="System.Text" 
#><#@ import namespace="System.Collections.Generic" 
#><#@ output extension=".cs" encoding="utf-8" 
#><#@ include file="..\..\..\..\private.ttinclude" 
#><#@ include file="..\..\Qujck.Pas.Core\tt\CommonTextTemplate.ttinclude" 
#><#@ include file="..\..\Qujck.Pas.Core\tt\MultipleOutputHelper.ttinclude" 
#><# Manager manager = Manager.Create(Host, GenerationEnvironment); #>
<# 
foreach(string schemaName in new string[] { "Infrastructure", "Instruction", "Interface", "Policy", "Standing", "Security" })
{
    foreach(Entity e in GetEntities(schemaName))
    {
        string baseClass = string.Format("Abstract{0}Entity", schemaName);
        manager.StartNewFile(String.Format("{0}.{1}Do.tt.cs", schemaName, e.Name));

        int relationships = GetEntityRelationships(e.Name, e.Name).Count();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Qujck.Pas.Core.Enumerations;

namespace Qujck.Pas.Model.<#= schemaName #>.DataObjects
{
    [Serializable]
    internal sealed partial class <#= e.Name #>Do : <#= "AbstractModel" #>
    {
        internal <#= e.Name #>Do() 
        {
<#
        foreach(EntityDetail ed in GetEntityDetails(e.Name).Where(u => u.Enum != null))
        {#>
            this.<#= ed.Attribute #>Value = new <#= ed.Enum #>();
<#
        }
#>
        }
        <#
        foreach(EntityDetail ed in GetEntityDetails(e.Name))
        {
            if (ed.IsIdentity == null)
            {
#>

<#= CreateDoProperty(ed) #><#
            }
        }#>
    }
}
<#
        manager.EndBlock();
    }
}
manager.Process(true); 
#>