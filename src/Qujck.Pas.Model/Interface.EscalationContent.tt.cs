//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Interface.DataObjects;

namespace Qujck.Pas.Model.Interface
{
    [Serializable]
    public sealed partial class EscalationContent : AbstractInterfaceEntity
    {
        internal EscalationContentDo initialValues { get; private set; }
        internal EscalationContentDo updatedValues { get; private set; }
        internal Action<EscalationContentDo, string> loadMissingValue { private get; set; }

        public EscalationContent()
        {
            this.initialValues = new EscalationContentDo();
            this.updatedValues = new EscalationContentDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Interface";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "EscalationContent";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "currentAmount";
                yield return "newAmount";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [XmlElement(ElementName="currentAmount")]
        public decimal currentAmount 
	    { 
            get
            {
                if (this.updatedValues.currentAmountHasValue)
                {
                    return this.updatedValues.currentAmount;
                }
                
                if (!this.initialValues.currentAmountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "currentAmount");
                    this.initialValues.currentAmountHasValue = true;
                }

                return this.initialValues.currentAmount;
            }
            set
            {
                this.updatedValues.currentAmount = value;
            }
        }

        [XmlElement(ElementName="newAmount")]
        public decimal newAmount 
	    { 
            get
            {
                if (this.updatedValues.newAmountHasValue)
                {
                    return this.updatedValues.newAmount;
                }
                
                if (!this.initialValues.newAmountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "newAmount");
                    this.initialValues.newAmountHasValue = true;
                }

                return this.initialValues.newAmount;
            }
            set
            {
                this.updatedValues.newAmount = value;
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "currentAmount");
            if (e2 != null)
            {
                this.currentAmount = decimal.Parse(e2.Value);
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "newAmount");
            if (e3 != null)
            {
                this.newAmount = decimal.Parse(e3.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.currentAmountHasValue)
            {
                writer.WriteElementString("currentAmount", this.updatedValues.currentAmount.ToString());
            }
            else if (this.initialValues.currentAmountHasValue)
            {
                writer.WriteElementString("currentAmount", this.initialValues.currentAmount.ToString());
            }

            if (this.updatedValues.newAmountHasValue)
            {
                writer.WriteElementString("newAmount", this.updatedValues.newAmount.ToString());
            }
            else if (this.initialValues.newAmountHasValue)
            {
                writer.WriteElementString("newAmount", this.initialValues.newAmount.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
