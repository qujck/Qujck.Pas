//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Standing.DataObjects;

namespace Qujck.Pas.Model.Standing
{
    [Serializable]
    public sealed partial class RiskRate : AbstractStandingEntity, ICode
    {
        internal RiskRateDo initialValues { get; private set; }
        internal RiskRateDo updatedValues { get; private set; }
        internal Action<RiskRateDo, string> loadMissingValue { private get; set; }

        public RiskRate()
        {
            this.initialValues = new RiskRateDo();
            this.updatedValues = new RiskRateDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Standing";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "RiskRate";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "code";
                yield return "yearMonth";
                yield return "sex";
                yield return "smoker";
                yield return "termInMonths";
                yield return "rate";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="code")]
        public string code 
	    { 
            get
            {
                if (this.updatedValues.codeHasValue)
                {
                    return this.updatedValues.code;
                }
                
                if (!this.initialValues.codeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "code");
                    this.initialValues.codeHasValue = true;
                }

                return this.initialValues.code;
            }
            set
            {
                this.updatedValues.code = value;
            }
        }

        [StringLength(7)]
        [RegularExpression(@"\d{4}-\d{2}")]
        [XmlElement(ElementName="yearMonth")]
        public string yearMonth 
	    { 
            get
            {
                if (this.updatedValues.yearMonthHasValue)
                {
                    return this.updatedValues.yearMonth;
                }
                
                if (!this.initialValues.yearMonthHasValue)
                {
                    this.loadMissingValue(this.initialValues, "yearMonth");
                    this.initialValues.yearMonthHasValue = true;
                }

                return this.initialValues.yearMonth;
            }
            set
            {
                this.updatedValues.yearMonth = value;
            }
        }

        [XmlElement(ElementName="sex")]
        public SexType sex 
	    { 
            get
            {
                if (this.updatedValues.sexHasValue)
                {
                    return this.updatedValues.sex;
                }
                
                if (!this.initialValues.sexHasValue)
                {
                    this.loadMissingValue(this.initialValues, "sex");
                    this.initialValues.sexHasValue = true;
                }

                return this.initialValues.sex;
            }
            set
            {
                this.updatedValues.sex = value;
            }
        }

        [RegularExpression(@"[YN]{1}")]
        [XmlElement(ElementName="smoker")]
        public Indicator smoker 
	    { 
            get
            {
                if (this.updatedValues.smokerHasValue)
                {
                    return this.updatedValues.smoker;
                }
                
                if (!this.initialValues.smokerHasValue)
                {
                    this.loadMissingValue(this.initialValues, "smoker");
                    this.initialValues.smokerHasValue = true;
                }

                return this.initialValues.smoker;
            }
            set
            {
                this.updatedValues.smoker = value;
            }
        }

        [XmlElement(ElementName="termInMonths")]
        public int termInMonths 
	    { 
            get
            {
                if (this.updatedValues.termInMonthsHasValue)
                {
                    return this.updatedValues.termInMonths;
                }
                
                if (!this.initialValues.termInMonthsHasValue)
                {
                    this.loadMissingValue(this.initialValues, "termInMonths");
                    this.initialValues.termInMonthsHasValue = true;
                }

                return this.initialValues.termInMonths;
            }
            set
            {
                this.updatedValues.termInMonths = value;
            }
        }

        [XmlElement(ElementName="rate")]
        public decimal rate 
	    { 
            get
            {
                if (this.updatedValues.rateHasValue)
                {
                    return this.updatedValues.rate;
                }
                
                if (!this.initialValues.rateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "rate");
                    this.initialValues.rateHasValue = true;
                }

                return this.initialValues.rate;
            }
            set
            {
                this.updatedValues.rate = value;
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "code");
            if (e2 != null) 
            {
                this.code = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "yearMonth");
            if (e3 != null) 
            {
                this.yearMonth = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "sex");
            if (e4 != null)
            {
                this.sex = e4.Value;
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "smoker");
            if (e5 != null)
            {
                this.smoker = e5.Value;
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "termInMonths");
            if (e6 != null)
            {
                this.termInMonths = int.Parse(e6.Value);
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "rate");
            if (e7 != null)
            {
                this.rate = decimal.Parse(e7.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.updatedValues.code);
            }
            else if (this.initialValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.initialValues.code);
            }

            if (this.updatedValues.yearMonthHasValue && !string.IsNullOrEmpty(yearMonth))
            {
                writer.WriteElementString("yearMonth", this.updatedValues.yearMonth);
            }
            else if (this.initialValues.yearMonthHasValue && !string.IsNullOrEmpty(yearMonth))
            {
                writer.WriteElementString("yearMonth", this.initialValues.yearMonth);
            }

            if (this.updatedValues.sexHasValue && sex != SexType.Null)
            {
                writer.WriteElementString("sex", this.updatedValues.sex.Value);
            }
            else if (this.initialValues.sexHasValue && sex != SexType.Null)
            {
                writer.WriteElementString("sex", this.initialValues.sex.Value);
            }

            if (this.updatedValues.smokerHasValue && smoker != Indicator.Null)
            {
                writer.WriteElementString("smoker", this.updatedValues.smoker.Value);
            }
            else if (this.initialValues.smokerHasValue && smoker != Indicator.Null)
            {
                writer.WriteElementString("smoker", this.initialValues.smoker.Value);
            }

            if (this.updatedValues.termInMonthsHasValue)
            {
                writer.WriteElementString("termInMonths", this.updatedValues.termInMonths.ToString());
            }
            else if (this.initialValues.termInMonthsHasValue)
            {
                writer.WriteElementString("termInMonths", this.initialValues.termInMonths.ToString());
            }

            if (this.updatedValues.rateHasValue)
            {
                writer.WriteElementString("rate", this.updatedValues.rate.ToString());
            }
            else if (this.initialValues.rateHasValue)
            {
                writer.WriteElementString("rate", this.initialValues.rate.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
