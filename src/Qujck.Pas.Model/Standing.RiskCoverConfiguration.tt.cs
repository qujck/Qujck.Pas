//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Standing.DataObjects;

namespace Qujck.Pas.Model.Standing
{
    [Serializable]
    public sealed partial class RiskCoverConfiguration : AbstractStandingEntity, ICode
    {
        internal RiskCoverConfigurationDo initialValues { get; private set; }
        internal RiskCoverConfigurationDo updatedValues { get; private set; }
        internal Action<RiskCoverConfigurationDo, string> loadMissingValue { private get; set; }

        public RiskCoverConfiguration()
        {
            this.initialValues = new RiskCoverConfigurationDo();
            this.updatedValues = new RiskCoverConfigurationDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Standing";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "RiskCoverConfiguration";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "code";
                yield return "type";
                yield return "basis";
                yield return "minimumAge";
                yield return "maximumAge";
                yield return "minimumBenefitAmount";
                yield return "maximumBenefitAmount";
                yield return "maximumChangePercent";
                yield return "benefitPercentage";
                yield return "calculationBasis";
                yield return "RiskRate_code";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="code")]
        public string code 
	    { 
            get
            {
                if (this.updatedValues.codeHasValue)
                {
                    return this.updatedValues.code;
                }
                
                if (!this.initialValues.codeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "code");
                    this.initialValues.codeHasValue = true;
                }

                return this.initialValues.code;
            }
            set
            {
                this.updatedValues.code = value;
            }
        }

        [XmlElement(ElementName="type")]
        public RiskCoverType type 
	    { 
            get
            {
                if (this.updatedValues.typeHasValue)
                {
                    return this.updatedValues.type;
                }
                
                if (!this.initialValues.typeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "type");
                    this.initialValues.typeHasValue = true;
                }

                return this.initialValues.type;
            }
            set
            {
                this.updatedValues.type = value;
            }
        }

        [XmlElement(ElementName="basis")]
        public RiskCoverBasis basis 
	    { 
            get
            {
                if (this.updatedValues.basisHasValue)
                {
                    return this.updatedValues.basis;
                }
                
                if (!this.initialValues.basisHasValue)
                {
                    this.loadMissingValue(this.initialValues, "basis");
                    this.initialValues.basisHasValue = true;
                }

                return this.initialValues.basis;
            }
            set
            {
                this.updatedValues.basis = value;
            }
        }

        [XmlElement(ElementName="minimumAge")]
        public short? minimumAge 
	    { 
            get
            {
                if (this.updatedValues.minimumAgeHasValue)
                {
                    return this.updatedValues.minimumAge;
                }
                
                if (!this.initialValues.minimumAgeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "minimumAge");
                    this.initialValues.minimumAgeHasValue = true;
                }

                return this.initialValues.minimumAge;
            }
            set
            {
                this.updatedValues.minimumAge = value;
            }
        }

        [XmlElement(ElementName="maximumAge")]
        public short? maximumAge 
	    { 
            get
            {
                if (this.updatedValues.maximumAgeHasValue)
                {
                    return this.updatedValues.maximumAge;
                }
                
                if (!this.initialValues.maximumAgeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maximumAge");
                    this.initialValues.maximumAgeHasValue = true;
                }

                return this.initialValues.maximumAge;
            }
            set
            {
                this.updatedValues.maximumAge = value;
            }
        }

        [XmlElement(ElementName="minimumBenefitAmount")]
        public decimal? minimumBenefitAmount 
	    { 
            get
            {
                if (this.updatedValues.minimumBenefitAmountHasValue)
                {
                    return this.updatedValues.minimumBenefitAmount;
                }
                
                if (!this.initialValues.minimumBenefitAmountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "minimumBenefitAmount");
                    this.initialValues.minimumBenefitAmountHasValue = true;
                }

                return this.initialValues.minimumBenefitAmount;
            }
            set
            {
                this.updatedValues.minimumBenefitAmount = value;
            }
        }

        [XmlElement(ElementName="maximumBenefitAmount")]
        public decimal? maximumBenefitAmount 
	    { 
            get
            {
                if (this.updatedValues.maximumBenefitAmountHasValue)
                {
                    return this.updatedValues.maximumBenefitAmount;
                }
                
                if (!this.initialValues.maximumBenefitAmountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maximumBenefitAmount");
                    this.initialValues.maximumBenefitAmountHasValue = true;
                }

                return this.initialValues.maximumBenefitAmount;
            }
            set
            {
                this.updatedValues.maximumBenefitAmount = value;
            }
        }

        [XmlElement(ElementName="maximumChangePercent")]
        public decimal? maximumChangePercent 
	    { 
            get
            {
                if (this.updatedValues.maximumChangePercentHasValue)
                {
                    return this.updatedValues.maximumChangePercent;
                }
                
                if (!this.initialValues.maximumChangePercentHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maximumChangePercent");
                    this.initialValues.maximumChangePercentHasValue = true;
                }

                return this.initialValues.maximumChangePercent;
            }
            set
            {
                this.updatedValues.maximumChangePercent = value;
            }
        }

        [XmlElement(ElementName="benefitPercentage")]
        public decimal? benefitPercentage 
	    { 
            get
            {
                if (this.updatedValues.benefitPercentageHasValue)
                {
                    return this.updatedValues.benefitPercentage;
                }
                
                if (!this.initialValues.benefitPercentageHasValue)
                {
                    this.loadMissingValue(this.initialValues, "benefitPercentage");
                    this.initialValues.benefitPercentageHasValue = true;
                }

                return this.initialValues.benefitPercentage;
            }
            set
            {
                this.updatedValues.benefitPercentage = value;
            }
        }

        [XmlElement(ElementName="calculationBasis")]
        public RiskCoverCalculationBasis calculationBasis 
	    { 
            get
            {
                if (this.updatedValues.calculationBasisHasValue)
                {
                    return this.updatedValues.calculationBasis;
                }
                
                if (!this.initialValues.calculationBasisHasValue)
                {
                    this.loadMissingValue(this.initialValues, "calculationBasis");
                    this.initialValues.calculationBasisHasValue = true;
                }

                return this.initialValues.calculationBasis;
            }
            set
            {
                this.updatedValues.calculationBasis = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="RiskRate_code")]
        public string RiskRate_code 
	    { 
            get
            {
                if (this.updatedValues.RiskRate_codeHasValue)
                {
                    return this.updatedValues.RiskRate_code;
                }
                
                if (!this.initialValues.RiskRate_codeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "RiskRate_code");
                    this.initialValues.RiskRate_codeHasValue = true;
                }

                return this.initialValues.RiskRate_code;
            }
            set
            {
                this.updatedValues.RiskRate_code = value;
            }
        }

        public bool RiskBenefitConfiguration_RiskCoverConfigurationsAreLoaded { get; private set; }
        internal Func<IEnumerable<RiskBenefitConfiguration_RiskCoverConfiguration>> RiskBenefitConfiguration_RiskCoverConfigurationsQuery { private get; set; }
        public IEnumerable<RiskBenefitConfiguration_RiskCoverConfiguration> RiskBenefitConfiguration_RiskCoverConfigurations
        {
            get
            {
                if (this.RiskBenefitConfiguration_RiskCoverConfigurationsQuery == null)
                {
                    return Enumerable.Empty<RiskBenefitConfiguration_RiskCoverConfiguration>();
                }
                else
                {
                    var result = this.RiskBenefitConfiguration_RiskCoverConfigurationsQuery();
                    if (!this.RiskBenefitConfiguration_RiskCoverConfigurationsAreLoaded)
                    {
                        this.RiskBenefitConfiguration_RiskCoverConfigurationsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "code");
            if (e2 != null) 
            {
                this.code = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "type");
            if (e3 != null)
            {
                this.type = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "basis");
            if (e4 != null)
            {
                this.basis = e4.Value;
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "minimumAge");
            if (e5 != null)
            {
                this.minimumAge = short.Parse(e5.Value);
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "maximumAge");
            if (e6 != null)
            {
                this.maximumAge = short.Parse(e6.Value);
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "minimumBenefitAmount");
            if (e7 != null)
            {
                this.minimumBenefitAmount = decimal.Parse(e7.Value);
            }

            XElement e8 = elements.FirstOrDefault(x => x.Name == "maximumBenefitAmount");
            if (e8 != null)
            {
                this.maximumBenefitAmount = decimal.Parse(e8.Value);
            }

            XElement e9 = elements.FirstOrDefault(x => x.Name == "maximumChangePercent");
            if (e9 != null)
            {
                this.maximumChangePercent = decimal.Parse(e9.Value);
            }

            XElement e10 = elements.FirstOrDefault(x => x.Name == "benefitPercentage");
            if (e10 != null)
            {
                this.benefitPercentage = decimal.Parse(e10.Value);
            }

            XElement e11 = elements.FirstOrDefault(x => x.Name == "calculationBasis");
            if (e11 != null)
            {
                this.calculationBasis = e11.Value;
            }

            XElement e12 = elements.FirstOrDefault(x => x.Name == "RiskRate_code");
            if (e12 != null) 
            {
                this.RiskRate_code = e12.Value;
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.updatedValues.code);
            }
            else if (this.initialValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.initialValues.code);
            }

            if (this.updatedValues.typeHasValue && type != RiskCoverType.Null)
            {
                writer.WriteElementString("type", this.updatedValues.type.Value);
            }
            else if (this.initialValues.typeHasValue && type != RiskCoverType.Null)
            {
                writer.WriteElementString("type", this.initialValues.type.Value);
            }

            if (this.updatedValues.basisHasValue && basis != RiskCoverBasis.Null)
            {
                writer.WriteElementString("basis", this.updatedValues.basis.Value);
            }
            else if (this.initialValues.basisHasValue && basis != RiskCoverBasis.Null)
            {
                writer.WriteElementString("basis", this.initialValues.basis.Value);
            }

            if (this.updatedValues.minimumAgeHasValue && minimumAge != null)
            {
                writer.WriteElementString("minimumAge", this.updatedValues.minimumAge.ToString());
            }
            else if (this.initialValues.minimumAgeHasValue && minimumAge != null)
            {
                writer.WriteElementString("minimumAge", this.initialValues.minimumAge.ToString());
            }

            if (this.updatedValues.maximumAgeHasValue && maximumAge != null)
            {
                writer.WriteElementString("maximumAge", this.updatedValues.maximumAge.ToString());
            }
            else if (this.initialValues.maximumAgeHasValue && maximumAge != null)
            {
                writer.WriteElementString("maximumAge", this.initialValues.maximumAge.ToString());
            }

            if (this.updatedValues.minimumBenefitAmountHasValue && minimumBenefitAmount != null)
            {
                writer.WriteElementString("minimumBenefitAmount", this.updatedValues.minimumBenefitAmount.ToString());
            }
            else if (this.initialValues.minimumBenefitAmountHasValue && minimumBenefitAmount != null)
            {
                writer.WriteElementString("minimumBenefitAmount", this.initialValues.minimumBenefitAmount.ToString());
            }

            if (this.updatedValues.maximumBenefitAmountHasValue && maximumBenefitAmount != null)
            {
                writer.WriteElementString("maximumBenefitAmount", this.updatedValues.maximumBenefitAmount.ToString());
            }
            else if (this.initialValues.maximumBenefitAmountHasValue && maximumBenefitAmount != null)
            {
                writer.WriteElementString("maximumBenefitAmount", this.initialValues.maximumBenefitAmount.ToString());
            }

            if (this.updatedValues.maximumChangePercentHasValue && maximumChangePercent != null)
            {
                writer.WriteElementString("maximumChangePercent", this.updatedValues.maximumChangePercent.ToString());
            }
            else if (this.initialValues.maximumChangePercentHasValue && maximumChangePercent != null)
            {
                writer.WriteElementString("maximumChangePercent", this.initialValues.maximumChangePercent.ToString());
            }

            if (this.updatedValues.benefitPercentageHasValue && benefitPercentage != null)
            {
                writer.WriteElementString("benefitPercentage", this.updatedValues.benefitPercentage.ToString());
            }
            else if (this.initialValues.benefitPercentageHasValue && benefitPercentage != null)
            {
                writer.WriteElementString("benefitPercentage", this.initialValues.benefitPercentage.ToString());
            }

            if (this.updatedValues.calculationBasisHasValue && calculationBasis != RiskCoverCalculationBasis.Null)
            {
                writer.WriteElementString("calculationBasis", this.updatedValues.calculationBasis.Value);
            }
            else if (this.initialValues.calculationBasisHasValue && calculationBasis != RiskCoverCalculationBasis.Null)
            {
                writer.WriteElementString("calculationBasis", this.initialValues.calculationBasis.Value);
            }

            if (this.updatedValues.RiskRate_codeHasValue && !string.IsNullOrEmpty(RiskRate_code))
            {
                writer.WriteElementString("RiskRate_code", this.updatedValues.RiskRate_code);
            }
            else if (this.initialValues.RiskRate_codeHasValue && !string.IsNullOrEmpty(RiskRate_code))
            {
                writer.WriteElementString("RiskRate_code", this.initialValues.RiskRate_code);
            }

            this.AfterWriteXml(writer);
        }
    }
}
