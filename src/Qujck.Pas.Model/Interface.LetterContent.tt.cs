//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Interface.DataObjects;

namespace Qujck.Pas.Model.Interface
{
    [Serializable]
    public sealed partial class LetterContent : AbstractInterfaceEntity
    {
        internal LetterContentDo initialValues { get; private set; }
        internal LetterContentDo updatedValues { get; private set; }
        internal Action<LetterContentDo, string> loadMissingValue { private get; set; }

        public LetterContent()
        {
            this.initialValues = new LetterContentDo();
            this.updatedValues = new LetterContentDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Interface";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "LetterContent";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "LetterWrapper_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [XmlElement(ElementName="LetterWrapper_id")]
        public long LetterWrapper_id 
	    { 
            get
            {
                if (this.updatedValues.LetterWrapper_idHasValue)
                {
                    return this.updatedValues.LetterWrapper_id;
                }
                
                if (!this.initialValues.LetterWrapper_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "LetterWrapper_id");
                    this.initialValues.LetterWrapper_idHasValue = true;
                }

                return this.initialValues.LetterWrapper_id;
            }
            set
            {
                this.updatedValues.LetterWrapper_id = value;
            }
        }

        public bool ContractContentIsLoaded { get; private set; }
        internal Func<ContractContent> ContractContentQuery { private get; set; }
        public ContractContent ContractContent
        {
            get
            {
                if (this.ContractContentQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.ContractContentQuery();
                    if (!this.ContractContentIsLoaded)
                    {
                        this.ContractContentIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        public bool FundUnitTransactionBuyContentsAreLoaded { get; private set; }
        internal Func<IEnumerable<FundUnitTransactionBuyContent>> FundUnitTransactionBuyContentsQuery { private get; set; }
        public IEnumerable<FundUnitTransactionBuyContent> FundUnitTransactionBuyContents
        {
            get
            {
                if (this.FundUnitTransactionBuyContentsQuery == null)
                {
                    return Enumerable.Empty<FundUnitTransactionBuyContent>();
                }
                else
                {
                    var result = this.FundUnitTransactionBuyContentsQuery();
                    if (!this.FundUnitTransactionBuyContentsAreLoaded)
                    {
                        this.FundUnitTransactionBuyContentsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool FundUnitTransactionSellContentsAreLoaded { get; private set; }
        internal Func<IEnumerable<FundUnitTransactionSellContent>> FundUnitTransactionSellContentsQuery { private get; set; }
        public IEnumerable<FundUnitTransactionSellContent> FundUnitTransactionSellContents
        {
            get
            {
                if (this.FundUnitTransactionSellContentsQuery == null)
                {
                    return Enumerable.Empty<FundUnitTransactionSellContent>();
                }
                else
                {
                    var result = this.FundUnitTransactionSellContentsQuery();
                    if (!this.FundUnitTransactionSellContentsAreLoaded)
                    {
                        this.FundUnitTransactionSellContentsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool OwnerContentsAreLoaded { get; private set; }
        internal Func<IEnumerable<OwnerContent>> OwnerContentsQuery { private get; set; }
        public IEnumerable<OwnerContent> OwnerContents
        {
            get
            {
                if (this.OwnerContentsQuery == null)
                {
                    return Enumerable.Empty<OwnerContent>();
                }
                else
                {
                    var result = this.OwnerContentsQuery();
                    if (!this.OwnerContentsAreLoaded)
                    {
                        this.OwnerContentsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool AddressChangeContentIsLoaded { get; private set; }
        internal Func<AddressChangeContent> AddressChangeContentQuery { private get; set; }
        public AddressChangeContent AddressChangeContent
        {
            get
            {
                if (this.AddressChangeContentQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.AddressChangeContentQuery();
                    if (!this.AddressChangeContentIsLoaded)
                    {
                        this.AddressChangeContentIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        public bool LifeAssuredContentsAreLoaded { get; private set; }
        internal Func<IEnumerable<LifeAssuredContent>> LifeAssuredContentsQuery { private get; set; }
        public IEnumerable<LifeAssuredContent> LifeAssuredContents
        {
            get
            {
                if (this.LifeAssuredContentsQuery == null)
                {
                    return Enumerable.Empty<LifeAssuredContent>();
                }
                else
                {
                    var result = this.LifeAssuredContentsQuery();
                    if (!this.LifeAssuredContentsAreLoaded)
                    {
                        this.LifeAssuredContentsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool LetterWrapperIsLoaded { get; private set; }
        internal Func<LetterWrapper> LetterWrapperQuery { private get; set; }
        public LetterWrapper LetterWrapper
        {
            get
            {
                if (this.LetterWrapperQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.LetterWrapperQuery();
                    if (!this.LetterWrapperIsLoaded)
                    {
                        this.LetterWrapperIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        public bool FundAllocationContentsAreLoaded { get; private set; }
        internal Func<IEnumerable<FundAllocationContent>> FundAllocationContentsQuery { private get; set; }
        public IEnumerable<FundAllocationContent> FundAllocationContents
        {
            get
            {
                if (this.FundAllocationContentsQuery == null)
                {
                    return Enumerable.Empty<FundAllocationContent>();
                }
                else
                {
                    var result = this.FundAllocationContentsQuery();
                    if (!this.FundAllocationContentsAreLoaded)
                    {
                        this.FundAllocationContentsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool OldAddressContentIsLoaded { get; private set; }
        internal Func<OldAddressContent> OldAddressContentQuery { private get; set; }
        public OldAddressContent OldAddressContent
        {
            get
            {
                if (this.OldAddressContentQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.OldAddressContentQuery();
                    if (!this.OldAddressContentIsLoaded)
                    {
                        this.OldAddressContentIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        public bool MonetaryTransactionContentsAreLoaded { get; private set; }
        internal Func<IEnumerable<MonetaryTransactionContent>> MonetaryTransactionContentsQuery { private get; set; }
        public IEnumerable<MonetaryTransactionContent> MonetaryTransactionContents
        {
            get
            {
                if (this.MonetaryTransactionContentsQuery == null)
                {
                    return Enumerable.Empty<MonetaryTransactionContent>();
                }
                else
                {
                    var result = this.MonetaryTransactionContentsQuery();
                    if (!this.MonetaryTransactionContentsAreLoaded)
                    {
                        this.MonetaryTransactionContentsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool NewAddressContentIsLoaded { get; private set; }
        internal Func<NewAddressContent> NewAddressContentQuery { private get; set; }
        public NewAddressContent NewAddressContent
        {
            get
            {
                if (this.NewAddressContentQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.NewAddressContentQuery();
                    if (!this.NewAddressContentIsLoaded)
                    {
                        this.NewAddressContentIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        public bool FundUnitHoldingContentsAreLoaded { get; private set; }
        internal Func<IEnumerable<FundUnitHoldingContent>> FundUnitHoldingContentsQuery { private get; set; }
        public IEnumerable<FundUnitHoldingContent> FundUnitHoldingContents
        {
            get
            {
                if (this.FundUnitHoldingContentsQuery == null)
                {
                    return Enumerable.Empty<FundUnitHoldingContent>();
                }
                else
                {
                    var result = this.FundUnitHoldingContentsQuery();
                    if (!this.FundUnitHoldingContentsAreLoaded)
                    {
                        this.FundUnitHoldingContentsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool MoneyInContentIsLoaded { get; private set; }
        internal Func<MoneyInContent> MoneyInContentQuery { private get; set; }
        public MoneyInContent MoneyInContent
        {
            get
            {
                if (this.MoneyInContentQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.MoneyInContentQuery();
                    if (!this.MoneyInContentIsLoaded)
                    {
                        this.MoneyInContentIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "LetterWrapper_id");
            if (e2 != null)
            {
                this.LetterWrapper_id = long.Parse(e2.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.LetterWrapper_idHasValue)
            {
                writer.WriteElementString("LetterWrapper_id", this.updatedValues.LetterWrapper_id.ToString());
            }
            else if (this.initialValues.LetterWrapper_idHasValue)
            {
                writer.WriteElementString("LetterWrapper_id", this.initialValues.LetterWrapper_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
