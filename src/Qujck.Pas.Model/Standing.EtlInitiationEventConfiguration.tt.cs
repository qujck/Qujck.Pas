//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Standing.DataObjects;

namespace Qujck.Pas.Model.Standing
{
    [Serializable]
    public sealed partial class EtlInitiationEventConfiguration : AbstractStandingEntity, ICode
    {
        internal EtlInitiationEventConfigurationDo initialValues { get; private set; }
        internal EtlInitiationEventConfigurationDo updatedValues { get; private set; }
        internal Action<EtlInitiationEventConfigurationDo, string> loadMissingValue { private get; set; }

        public EtlInitiationEventConfiguration()
        {
            this.initialValues = new EtlInitiationEventConfigurationDo();
            this.updatedValues = new EtlInitiationEventConfigurationDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Standing";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "EtlInitiationEventConfiguration";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "code";
                yield return "eventType";
                yield return "entityType";
                yield return "pointOfTime";
                yield return "filterLambda";
                yield return "execution";
                yield return "EtlConfigurationHeader_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="code")]
        public string code 
	    { 
            get
            {
                if (this.updatedValues.codeHasValue)
                {
                    return this.updatedValues.code;
                }
                
                if (!this.initialValues.codeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "code");
                    this.initialValues.codeHasValue = true;
                }

                return this.initialValues.code;
            }
            set
            {
                this.updatedValues.code = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="eventType")]
        public string eventType 
	    { 
            get
            {
                if (this.updatedValues.eventTypeHasValue)
                {
                    return this.updatedValues.eventType;
                }
                
                if (!this.initialValues.eventTypeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "eventType");
                    this.initialValues.eventTypeHasValue = true;
                }

                return this.initialValues.eventType;
            }
            set
            {
                this.updatedValues.eventType = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="entityType")]
        public string entityType 
	    { 
            get
            {
                if (this.updatedValues.entityTypeHasValue)
                {
                    return this.updatedValues.entityType;
                }
                
                if (!this.initialValues.entityTypeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "entityType");
                    this.initialValues.entityTypeHasValue = true;
                }

                return this.initialValues.entityType;
            }
            set
            {
                this.updatedValues.entityType = value;
            }
        }

        [XmlElement(ElementName="pointOfTime")]
        public EtlEventRaisePointOfTime pointOfTime 
	    { 
            get
            {
                if (this.updatedValues.pointOfTimeHasValue)
                {
                    return this.updatedValues.pointOfTime;
                }
                
                if (!this.initialValues.pointOfTimeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "pointOfTime");
                    this.initialValues.pointOfTimeHasValue = true;
                }

                return this.initialValues.pointOfTime;
            }
            set
            {
                this.updatedValues.pointOfTime = value;
            }
        }

        [XmlElement(ElementName="filterLambda")]
        public string filterLambda 
	    { 
            get
            {
                if (this.updatedValues.filterLambdaHasValue)
                {
                    return this.updatedValues.filterLambda;
                }
                
                if (!this.initialValues.filterLambdaHasValue)
                {
                    this.loadMissingValue(this.initialValues, "filterLambda");
                    this.initialValues.filterLambdaHasValue = true;
                }

                return this.initialValues.filterLambda;
            }
            set
            {
                this.updatedValues.filterLambda = value;
            }
        }

        [XmlElement(ElementName="execution")]
        public EtlExecutionType execution 
	    { 
            get
            {
                if (this.updatedValues.executionHasValue)
                {
                    return this.updatedValues.execution;
                }
                
                if (!this.initialValues.executionHasValue)
                {
                    this.loadMissingValue(this.initialValues, "execution");
                    this.initialValues.executionHasValue = true;
                }

                return this.initialValues.execution;
            }
            set
            {
                this.updatedValues.execution = value;
            }
        }

        [XmlElement(ElementName="EtlConfigurationHeader_id")]
        public long EtlConfigurationHeader_id 
	    { 
            get
            {
                if (this.updatedValues.EtlConfigurationHeader_idHasValue)
                {
                    return this.updatedValues.EtlConfigurationHeader_id;
                }
                
                if (!this.initialValues.EtlConfigurationHeader_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "EtlConfigurationHeader_id");
                    this.initialValues.EtlConfigurationHeader_idHasValue = true;
                }

                return this.initialValues.EtlConfigurationHeader_id;
            }
            set
            {
                this.updatedValues.EtlConfigurationHeader_id = value;
            }
        }

        public bool EtlConfigurationHeaderIsLoaded { get; private set; }
        internal Func<EtlConfigurationHeader> EtlConfigurationHeaderQuery { private get; set; }
        public EtlConfigurationHeader EtlConfigurationHeader
        {
            get
            {
                if (this.EtlConfigurationHeaderQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.EtlConfigurationHeaderQuery();
                    if (!this.EtlConfigurationHeaderIsLoaded)
                    {
                        this.EtlConfigurationHeaderIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "code");
            if (e2 != null) 
            {
                this.code = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "eventType");
            if (e3 != null) 
            {
                this.eventType = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "entityType");
            if (e4 != null) 
            {
                this.entityType = e4.Value;
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "pointOfTime");
            if (e5 != null)
            {
                this.pointOfTime = e5.Value;
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "filterLambda");
            if (e6 != null) 
            {
                this.filterLambda = e6.Value;
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "execution");
            if (e7 != null)
            {
                this.execution = e7.Value;
            }

            XElement e8 = elements.FirstOrDefault(x => x.Name == "EtlConfigurationHeader_id");
            if (e8 != null)
            {
                this.EtlConfigurationHeader_id = long.Parse(e8.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.updatedValues.code);
            }
            else if (this.initialValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.initialValues.code);
            }

            if (this.updatedValues.eventTypeHasValue && !string.IsNullOrEmpty(eventType))
            {
                writer.WriteElementString("eventType", this.updatedValues.eventType);
            }
            else if (this.initialValues.eventTypeHasValue && !string.IsNullOrEmpty(eventType))
            {
                writer.WriteElementString("eventType", this.initialValues.eventType);
            }

            if (this.updatedValues.entityTypeHasValue && !string.IsNullOrEmpty(entityType))
            {
                writer.WriteElementString("entityType", this.updatedValues.entityType);
            }
            else if (this.initialValues.entityTypeHasValue && !string.IsNullOrEmpty(entityType))
            {
                writer.WriteElementString("entityType", this.initialValues.entityType);
            }

            if (this.updatedValues.pointOfTimeHasValue && pointOfTime != EtlEventRaisePointOfTime.Null)
            {
                writer.WriteElementString("pointOfTime", this.updatedValues.pointOfTime.Value);
            }
            else if (this.initialValues.pointOfTimeHasValue && pointOfTime != EtlEventRaisePointOfTime.Null)
            {
                writer.WriteElementString("pointOfTime", this.initialValues.pointOfTime.Value);
            }

            if (this.updatedValues.filterLambdaHasValue && !string.IsNullOrEmpty(filterLambda))
            {
                writer.WriteElementString("filterLambda", this.updatedValues.filterLambda);
            }
            else if (this.initialValues.filterLambdaHasValue && !string.IsNullOrEmpty(filterLambda))
            {
                writer.WriteElementString("filterLambda", this.initialValues.filterLambda);
            }

            if (this.updatedValues.executionHasValue && execution != EtlExecutionType.Null)
            {
                writer.WriteElementString("execution", this.updatedValues.execution.Value);
            }
            else if (this.initialValues.executionHasValue && execution != EtlExecutionType.Null)
            {
                writer.WriteElementString("execution", this.initialValues.execution.Value);
            }

            if (this.updatedValues.EtlConfigurationHeader_idHasValue)
            {
                writer.WriteElementString("EtlConfigurationHeader_id", this.updatedValues.EtlConfigurationHeader_id.ToString());
            }
            else if (this.initialValues.EtlConfigurationHeader_idHasValue)
            {
                writer.WriteElementString("EtlConfigurationHeader_id", this.initialValues.EtlConfigurationHeader_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
