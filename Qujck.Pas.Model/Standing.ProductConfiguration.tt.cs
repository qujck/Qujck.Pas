//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Standing.DataObjects;

namespace Qujck.Pas.Model.Standing
{
    [Serializable]
    public sealed partial class ProductConfiguration : AbstractStandingEntity, ICode
    {
        internal ProductConfigurationDo initialValues { get; private set; }
        internal ProductConfigurationDo updatedValues { get; private set; }
        internal Action<ProductConfigurationDo, string> loadMissingValue { private get; set; }

        public ProductConfiguration()
        {
            this.initialValues = new ProductConfigurationDo();
            this.updatedValues = new ProductConfigurationDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Standing";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "ProductConfiguration";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "code";
                yield return "type";
                yield return "subType";
                yield return "name";
                yield return "status";
                yield return "minimumNoOfApplicants";
                yield return "maximumNoOfApplicants";
                yield return "minimumApplicantAge";
                yield return "maximumApplicantAge";
                yield return "coolingOffDays";
                yield return "shortfall";
                yield return "statementFrequency";
                yield return "fundBasedChargePercentage";
                yield return "fundBasedChargeFrequency";
                yield return "riskCoverChargeFrequency";
                yield return "numberOfWakeUpLetters";
                yield return "wakeUpLetterFrequency";
                yield return "minimumTerm";
                yield return "maximumTerm";
                yield return "Brand_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="code")]
        public string code 
	    { 
            get
            {
                if (this.updatedValues.codeHasValue)
                {
                    return this.updatedValues.code;
                }
                
                if (!this.initialValues.codeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "code");
                    this.initialValues.codeHasValue = true;
                }

                return this.initialValues.code;
            }
            set
            {
                this.updatedValues.code = value;
            }
        }

        [XmlElement(ElementName="type")]
        public ProductType type 
	    { 
            get
            {
                if (this.updatedValues.typeHasValue)
                {
                    return this.updatedValues.type;
                }
                
                if (!this.initialValues.typeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "type");
                    this.initialValues.typeHasValue = true;
                }

                return this.initialValues.type;
            }
            set
            {
                this.updatedValues.type = value;
            }
        }

        [XmlElement(ElementName="subType")]
        public ProductSubType subType 
	    { 
            get
            {
                if (this.updatedValues.subTypeHasValue)
                {
                    return this.updatedValues.subType;
                }
                
                if (!this.initialValues.subTypeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "subType");
                    this.initialValues.subTypeHasValue = true;
                }

                return this.initialValues.subType;
            }
            set
            {
                this.updatedValues.subType = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="name")]
        public string name 
	    { 
            get
            {
                if (this.updatedValues.nameHasValue)
                {
                    return this.updatedValues.name;
                }
                
                if (!this.initialValues.nameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "name");
                    this.initialValues.nameHasValue = true;
                }

                return this.initialValues.name;
            }
            set
            {
                this.updatedValues.name = value;
            }
        }

        [XmlElement(ElementName="status")]
        public ProductState status 
	    { 
            get
            {
                if (this.updatedValues.statusHasValue)
                {
                    return this.updatedValues.status;
                }
                
                if (!this.initialValues.statusHasValue)
                {
                    this.loadMissingValue(this.initialValues, "status");
                    this.initialValues.statusHasValue = true;
                }

                return this.initialValues.status;
            }
            set
            {
                this.updatedValues.status = value;
            }
        }

        [XmlElement(ElementName="minimumNoOfApplicants")]
        public short minimumNoOfApplicants 
	    { 
            get
            {
                if (this.updatedValues.minimumNoOfApplicantsHasValue)
                {
                    return this.updatedValues.minimumNoOfApplicants;
                }
                
                if (!this.initialValues.minimumNoOfApplicantsHasValue)
                {
                    this.loadMissingValue(this.initialValues, "minimumNoOfApplicants");
                    this.initialValues.minimumNoOfApplicantsHasValue = true;
                }

                return this.initialValues.minimumNoOfApplicants;
            }
            set
            {
                this.updatedValues.minimumNoOfApplicants = value;
            }
        }

        [XmlElement(ElementName="maximumNoOfApplicants")]
        public short maximumNoOfApplicants 
	    { 
            get
            {
                if (this.updatedValues.maximumNoOfApplicantsHasValue)
                {
                    return this.updatedValues.maximumNoOfApplicants;
                }
                
                if (!this.initialValues.maximumNoOfApplicantsHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maximumNoOfApplicants");
                    this.initialValues.maximumNoOfApplicantsHasValue = true;
                }

                return this.initialValues.maximumNoOfApplicants;
            }
            set
            {
                this.updatedValues.maximumNoOfApplicants = value;
            }
        }

        [XmlElement(ElementName="minimumApplicantAge")]
        public short minimumApplicantAge 
	    { 
            get
            {
                if (this.updatedValues.minimumApplicantAgeHasValue)
                {
                    return this.updatedValues.minimumApplicantAge;
                }
                
                if (!this.initialValues.minimumApplicantAgeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "minimumApplicantAge");
                    this.initialValues.minimumApplicantAgeHasValue = true;
                }

                return this.initialValues.minimumApplicantAge;
            }
            set
            {
                this.updatedValues.minimumApplicantAge = value;
            }
        }

        [XmlElement(ElementName="maximumApplicantAge")]
        public short maximumApplicantAge 
	    { 
            get
            {
                if (this.updatedValues.maximumApplicantAgeHasValue)
                {
                    return this.updatedValues.maximumApplicantAge;
                }
                
                if (!this.initialValues.maximumApplicantAgeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maximumApplicantAge");
                    this.initialValues.maximumApplicantAgeHasValue = true;
                }

                return this.initialValues.maximumApplicantAge;
            }
            set
            {
                this.updatedValues.maximumApplicantAge = value;
            }
        }

        [XmlElement(ElementName="coolingOffDays")]
        public short coolingOffDays 
	    { 
            get
            {
                if (this.updatedValues.coolingOffDaysHasValue)
                {
                    return this.updatedValues.coolingOffDays;
                }
                
                if (!this.initialValues.coolingOffDaysHasValue)
                {
                    this.loadMissingValue(this.initialValues, "coolingOffDays");
                    this.initialValues.coolingOffDaysHasValue = true;
                }

                return this.initialValues.coolingOffDays;
            }
            set
            {
                this.updatedValues.coolingOffDays = value;
            }
        }

        [RegularExpression(@"[YN]{1}")]
        [XmlElement(ElementName="shortfall")]
        public Indicator shortfall 
	    { 
            get
            {
                if (this.updatedValues.shortfallHasValue)
                {
                    return this.updatedValues.shortfall;
                }
                
                if (!this.initialValues.shortfallHasValue)
                {
                    this.loadMissingValue(this.initialValues, "shortfall");
                    this.initialValues.shortfallHasValue = true;
                }

                return this.initialValues.shortfall;
            }
            set
            {
                this.updatedValues.shortfall = value;
            }
        }

        [XmlElement(ElementName="statementFrequency")]
        public Frequency statementFrequency 
	    { 
            get
            {
                if (this.updatedValues.statementFrequencyHasValue)
                {
                    return this.updatedValues.statementFrequency;
                }
                
                if (!this.initialValues.statementFrequencyHasValue)
                {
                    this.loadMissingValue(this.initialValues, "statementFrequency");
                    this.initialValues.statementFrequencyHasValue = true;
                }

                return this.initialValues.statementFrequency;
            }
            set
            {
                this.updatedValues.statementFrequency = value;
            }
        }

        [XmlElement(ElementName="fundBasedChargePercentage")]
        public decimal? fundBasedChargePercentage 
	    { 
            get
            {
                if (this.updatedValues.fundBasedChargePercentageHasValue)
                {
                    return this.updatedValues.fundBasedChargePercentage;
                }
                
                if (!this.initialValues.fundBasedChargePercentageHasValue)
                {
                    this.loadMissingValue(this.initialValues, "fundBasedChargePercentage");
                    this.initialValues.fundBasedChargePercentageHasValue = true;
                }

                return this.initialValues.fundBasedChargePercentage;
            }
            set
            {
                this.updatedValues.fundBasedChargePercentage = value;
            }
        }

        [XmlElement(ElementName="fundBasedChargeFrequency")]
        public Frequency fundBasedChargeFrequency 
	    { 
            get
            {
                if (this.updatedValues.fundBasedChargeFrequencyHasValue)
                {
                    return this.updatedValues.fundBasedChargeFrequency;
                }
                
                if (!this.initialValues.fundBasedChargeFrequencyHasValue)
                {
                    this.loadMissingValue(this.initialValues, "fundBasedChargeFrequency");
                    this.initialValues.fundBasedChargeFrequencyHasValue = true;
                }

                return this.initialValues.fundBasedChargeFrequency;
            }
            set
            {
                this.updatedValues.fundBasedChargeFrequency = value;
            }
        }

        [XmlElement(ElementName="riskCoverChargeFrequency")]
        public Frequency riskCoverChargeFrequency 
	    { 
            get
            {
                if (this.updatedValues.riskCoverChargeFrequencyHasValue)
                {
                    return this.updatedValues.riskCoverChargeFrequency;
                }
                
                if (!this.initialValues.riskCoverChargeFrequencyHasValue)
                {
                    this.loadMissingValue(this.initialValues, "riskCoverChargeFrequency");
                    this.initialValues.riskCoverChargeFrequencyHasValue = true;
                }

                return this.initialValues.riskCoverChargeFrequency;
            }
            set
            {
                this.updatedValues.riskCoverChargeFrequency = value;
            }
        }

        [XmlElement(ElementName="numberOfWakeUpLetters")]
        public short? numberOfWakeUpLetters 
	    { 
            get
            {
                if (this.updatedValues.numberOfWakeUpLettersHasValue)
                {
                    return this.updatedValues.numberOfWakeUpLetters;
                }
                
                if (!this.initialValues.numberOfWakeUpLettersHasValue)
                {
                    this.loadMissingValue(this.initialValues, "numberOfWakeUpLetters");
                    this.initialValues.numberOfWakeUpLettersHasValue = true;
                }

                return this.initialValues.numberOfWakeUpLetters;
            }
            set
            {
                this.updatedValues.numberOfWakeUpLetters = value;
            }
        }

        [XmlElement(ElementName="wakeUpLetterFrequency")]
        public Frequency wakeUpLetterFrequency 
	    { 
            get
            {
                if (this.updatedValues.wakeUpLetterFrequencyHasValue)
                {
                    return this.updatedValues.wakeUpLetterFrequency;
                }
                
                if (!this.initialValues.wakeUpLetterFrequencyHasValue)
                {
                    this.loadMissingValue(this.initialValues, "wakeUpLetterFrequency");
                    this.initialValues.wakeUpLetterFrequencyHasValue = true;
                }

                return this.initialValues.wakeUpLetterFrequency;
            }
            set
            {
                this.updatedValues.wakeUpLetterFrequency = value;
            }
        }

        [XmlElement(ElementName="minimumTerm")]
        public short? minimumTerm 
	    { 
            get
            {
                if (this.updatedValues.minimumTermHasValue)
                {
                    return this.updatedValues.minimumTerm;
                }
                
                if (!this.initialValues.minimumTermHasValue)
                {
                    this.loadMissingValue(this.initialValues, "minimumTerm");
                    this.initialValues.minimumTermHasValue = true;
                }

                return this.initialValues.minimumTerm;
            }
            set
            {
                this.updatedValues.minimumTerm = value;
            }
        }

        [XmlElement(ElementName="maximumTerm")]
        public short? maximumTerm 
	    { 
            get
            {
                if (this.updatedValues.maximumTermHasValue)
                {
                    return this.updatedValues.maximumTerm;
                }
                
                if (!this.initialValues.maximumTermHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maximumTerm");
                    this.initialValues.maximumTermHasValue = true;
                }

                return this.initialValues.maximumTerm;
            }
            set
            {
                this.updatedValues.maximumTerm = value;
            }
        }

        [XmlElement(ElementName="Brand_id")]
        public long Brand_id 
	    { 
            get
            {
                if (this.updatedValues.Brand_idHasValue)
                {
                    return this.updatedValues.Brand_id;
                }
                
                if (!this.initialValues.Brand_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Brand_id");
                    this.initialValues.Brand_idHasValue = true;
                }

                return this.initialValues.Brand_id;
            }
            set
            {
                this.updatedValues.Brand_id = value;
            }
        }

        public bool BrandIsLoaded { get; private set; }
        internal Func<Brand> BrandQuery { private get; set; }
        public Brand Brand
        {
            get
            {
                if (this.BrandQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.BrandQuery();
                    if (!this.BrandIsLoaded)
                    {
                        this.BrandIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        public bool ProductConfiguration_InvestmentBenefitConfigurationsAreLoaded { get; private set; }
        internal Func<IEnumerable<ProductConfiguration_InvestmentBenefitConfiguration>> ProductConfiguration_InvestmentBenefitConfigurationsQuery { private get; set; }
        public IEnumerable<ProductConfiguration_InvestmentBenefitConfiguration> ProductConfiguration_InvestmentBenefitConfigurations
        {
            get
            {
                if (this.ProductConfiguration_InvestmentBenefitConfigurationsQuery == null)
                {
                    return Enumerable.Empty<ProductConfiguration_InvestmentBenefitConfiguration>();
                }
                else
                {
                    var result = this.ProductConfiguration_InvestmentBenefitConfigurationsQuery();
                    if (!this.ProductConfiguration_InvestmentBenefitConfigurationsAreLoaded)
                    {
                        this.ProductConfiguration_InvestmentBenefitConfigurationsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool ProductConfiguration_MoneyInConfigurationsAreLoaded { get; private set; }
        internal Func<IEnumerable<ProductConfiguration_MoneyInConfiguration>> ProductConfiguration_MoneyInConfigurationsQuery { private get; set; }
        public IEnumerable<ProductConfiguration_MoneyInConfiguration> ProductConfiguration_MoneyInConfigurations
        {
            get
            {
                if (this.ProductConfiguration_MoneyInConfigurationsQuery == null)
                {
                    return Enumerable.Empty<ProductConfiguration_MoneyInConfiguration>();
                }
                else
                {
                    var result = this.ProductConfiguration_MoneyInConfigurationsQuery();
                    if (!this.ProductConfiguration_MoneyInConfigurationsAreLoaded)
                    {
                        this.ProductConfiguration_MoneyInConfigurationsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool ProductConfiguration_RiskBenefitConfigurationsAreLoaded { get; private set; }
        internal Func<IEnumerable<ProductConfiguration_RiskBenefitConfiguration>> ProductConfiguration_RiskBenefitConfigurationsQuery { private get; set; }
        public IEnumerable<ProductConfiguration_RiskBenefitConfiguration> ProductConfiguration_RiskBenefitConfigurations
        {
            get
            {
                if (this.ProductConfiguration_RiskBenefitConfigurationsQuery == null)
                {
                    return Enumerable.Empty<ProductConfiguration_RiskBenefitConfiguration>();
                }
                else
                {
                    var result = this.ProductConfiguration_RiskBenefitConfigurationsQuery();
                    if (!this.ProductConfiguration_RiskBenefitConfigurationsAreLoaded)
                    {
                        this.ProductConfiguration_RiskBenefitConfigurationsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "code");
            if (e2 != null) 
            {
                this.code = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "type");
            if (e3 != null)
            {
                this.type = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "subType");
            if (e4 != null)
            {
                this.subType = e4.Value;
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "name");
            if (e5 != null) 
            {
                this.name = e5.Value;
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "status");
            if (e6 != null)
            {
                this.status = e6.Value;
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "minimumNoOfApplicants");
            if (e7 != null)
            {
                this.minimumNoOfApplicants = short.Parse(e7.Value);
            }

            XElement e8 = elements.FirstOrDefault(x => x.Name == "maximumNoOfApplicants");
            if (e8 != null)
            {
                this.maximumNoOfApplicants = short.Parse(e8.Value);
            }

            XElement e9 = elements.FirstOrDefault(x => x.Name == "minimumApplicantAge");
            if (e9 != null)
            {
                this.minimumApplicantAge = short.Parse(e9.Value);
            }

            XElement e10 = elements.FirstOrDefault(x => x.Name == "maximumApplicantAge");
            if (e10 != null)
            {
                this.maximumApplicantAge = short.Parse(e10.Value);
            }

            XElement e11 = elements.FirstOrDefault(x => x.Name == "coolingOffDays");
            if (e11 != null)
            {
                this.coolingOffDays = short.Parse(e11.Value);
            }

            XElement e12 = elements.FirstOrDefault(x => x.Name == "shortfall");
            if (e12 != null)
            {
                this.shortfall = e12.Value;
            }

            XElement e13 = elements.FirstOrDefault(x => x.Name == "statementFrequency");
            if (e13 != null)
            {
                this.statementFrequency = e13.Value;
            }

            XElement e14 = elements.FirstOrDefault(x => x.Name == "fundBasedChargePercentage");
            if (e14 != null)
            {
                this.fundBasedChargePercentage = decimal.Parse(e14.Value);
            }

            XElement e15 = elements.FirstOrDefault(x => x.Name == "fundBasedChargeFrequency");
            if (e15 != null)
            {
                this.fundBasedChargeFrequency = e15.Value;
            }

            XElement e16 = elements.FirstOrDefault(x => x.Name == "riskCoverChargeFrequency");
            if (e16 != null)
            {
                this.riskCoverChargeFrequency = e16.Value;
            }

            XElement e17 = elements.FirstOrDefault(x => x.Name == "numberOfWakeUpLetters");
            if (e17 != null)
            {
                this.numberOfWakeUpLetters = short.Parse(e17.Value);
            }

            XElement e18 = elements.FirstOrDefault(x => x.Name == "wakeUpLetterFrequency");
            if (e18 != null)
            {
                this.wakeUpLetterFrequency = e18.Value;
            }

            XElement e19 = elements.FirstOrDefault(x => x.Name == "minimumTerm");
            if (e19 != null)
            {
                this.minimumTerm = short.Parse(e19.Value);
            }

            XElement e20 = elements.FirstOrDefault(x => x.Name == "maximumTerm");
            if (e20 != null)
            {
                this.maximumTerm = short.Parse(e20.Value);
            }

            XElement e21 = elements.FirstOrDefault(x => x.Name == "Brand_id");
            if (e21 != null)
            {
                this.Brand_id = long.Parse(e21.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.updatedValues.code);
            }
            else if (this.initialValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.initialValues.code);
            }

            if (this.updatedValues.typeHasValue && type != ProductType.Null)
            {
                writer.WriteElementString("type", this.updatedValues.type.Value);
            }
            else if (this.initialValues.typeHasValue && type != ProductType.Null)
            {
                writer.WriteElementString("type", this.initialValues.type.Value);
            }

            if (this.updatedValues.subTypeHasValue && subType != ProductSubType.Null)
            {
                writer.WriteElementString("subType", this.updatedValues.subType.Value);
            }
            else if (this.initialValues.subTypeHasValue && subType != ProductSubType.Null)
            {
                writer.WriteElementString("subType", this.initialValues.subType.Value);
            }

            if (this.updatedValues.nameHasValue && !string.IsNullOrEmpty(name))
            {
                writer.WriteElementString("name", this.updatedValues.name);
            }
            else if (this.initialValues.nameHasValue && !string.IsNullOrEmpty(name))
            {
                writer.WriteElementString("name", this.initialValues.name);
            }

            if (this.updatedValues.statusHasValue && status != ProductState.Null)
            {
                writer.WriteElementString("status", this.updatedValues.status.Value);
            }
            else if (this.initialValues.statusHasValue && status != ProductState.Null)
            {
                writer.WriteElementString("status", this.initialValues.status.Value);
            }

            if (this.updatedValues.minimumNoOfApplicantsHasValue)
            {
                writer.WriteElementString("minimumNoOfApplicants", this.updatedValues.minimumNoOfApplicants.ToString());
            }
            else if (this.initialValues.minimumNoOfApplicantsHasValue)
            {
                writer.WriteElementString("minimumNoOfApplicants", this.initialValues.minimumNoOfApplicants.ToString());
            }

            if (this.updatedValues.maximumNoOfApplicantsHasValue)
            {
                writer.WriteElementString("maximumNoOfApplicants", this.updatedValues.maximumNoOfApplicants.ToString());
            }
            else if (this.initialValues.maximumNoOfApplicantsHasValue)
            {
                writer.WriteElementString("maximumNoOfApplicants", this.initialValues.maximumNoOfApplicants.ToString());
            }

            if (this.updatedValues.minimumApplicantAgeHasValue)
            {
                writer.WriteElementString("minimumApplicantAge", this.updatedValues.minimumApplicantAge.ToString());
            }
            else if (this.initialValues.minimumApplicantAgeHasValue)
            {
                writer.WriteElementString("minimumApplicantAge", this.initialValues.minimumApplicantAge.ToString());
            }

            if (this.updatedValues.maximumApplicantAgeHasValue)
            {
                writer.WriteElementString("maximumApplicantAge", this.updatedValues.maximumApplicantAge.ToString());
            }
            else if (this.initialValues.maximumApplicantAgeHasValue)
            {
                writer.WriteElementString("maximumApplicantAge", this.initialValues.maximumApplicantAge.ToString());
            }

            if (this.updatedValues.coolingOffDaysHasValue)
            {
                writer.WriteElementString("coolingOffDays", this.updatedValues.coolingOffDays.ToString());
            }
            else if (this.initialValues.coolingOffDaysHasValue)
            {
                writer.WriteElementString("coolingOffDays", this.initialValues.coolingOffDays.ToString());
            }

            if (this.updatedValues.shortfallHasValue && shortfall != Indicator.Null)
            {
                writer.WriteElementString("shortfall", this.updatedValues.shortfall.Value);
            }
            else if (this.initialValues.shortfallHasValue && shortfall != Indicator.Null)
            {
                writer.WriteElementString("shortfall", this.initialValues.shortfall.Value);
            }

            if (this.updatedValues.statementFrequencyHasValue && statementFrequency != Frequency.Null)
            {
                writer.WriteElementString("statementFrequency", this.updatedValues.statementFrequency.Value);
            }
            else if (this.initialValues.statementFrequencyHasValue && statementFrequency != Frequency.Null)
            {
                writer.WriteElementString("statementFrequency", this.initialValues.statementFrequency.Value);
            }

            if (this.updatedValues.fundBasedChargePercentageHasValue && fundBasedChargePercentage != null)
            {
                writer.WriteElementString("fundBasedChargePercentage", this.updatedValues.fundBasedChargePercentage.ToString());
            }
            else if (this.initialValues.fundBasedChargePercentageHasValue && fundBasedChargePercentage != null)
            {
                writer.WriteElementString("fundBasedChargePercentage", this.initialValues.fundBasedChargePercentage.ToString());
            }

            if (this.updatedValues.fundBasedChargeFrequencyHasValue && fundBasedChargeFrequency != Frequency.Null)
            {
                writer.WriteElementString("fundBasedChargeFrequency", this.updatedValues.fundBasedChargeFrequency.Value);
            }
            else if (this.initialValues.fundBasedChargeFrequencyHasValue && fundBasedChargeFrequency != Frequency.Null)
            {
                writer.WriteElementString("fundBasedChargeFrequency", this.initialValues.fundBasedChargeFrequency.Value);
            }

            if (this.updatedValues.riskCoverChargeFrequencyHasValue && riskCoverChargeFrequency != Frequency.Null)
            {
                writer.WriteElementString("riskCoverChargeFrequency", this.updatedValues.riskCoverChargeFrequency.Value);
            }
            else if (this.initialValues.riskCoverChargeFrequencyHasValue && riskCoverChargeFrequency != Frequency.Null)
            {
                writer.WriteElementString("riskCoverChargeFrequency", this.initialValues.riskCoverChargeFrequency.Value);
            }

            if (this.updatedValues.numberOfWakeUpLettersHasValue && numberOfWakeUpLetters != null)
            {
                writer.WriteElementString("numberOfWakeUpLetters", this.updatedValues.numberOfWakeUpLetters.ToString());
            }
            else if (this.initialValues.numberOfWakeUpLettersHasValue && numberOfWakeUpLetters != null)
            {
                writer.WriteElementString("numberOfWakeUpLetters", this.initialValues.numberOfWakeUpLetters.ToString());
            }

            if (this.updatedValues.wakeUpLetterFrequencyHasValue && wakeUpLetterFrequency != Frequency.Null)
            {
                writer.WriteElementString("wakeUpLetterFrequency", this.updatedValues.wakeUpLetterFrequency.Value);
            }
            else if (this.initialValues.wakeUpLetterFrequencyHasValue && wakeUpLetterFrequency != Frequency.Null)
            {
                writer.WriteElementString("wakeUpLetterFrequency", this.initialValues.wakeUpLetterFrequency.Value);
            }

            if (this.updatedValues.minimumTermHasValue && minimumTerm != null)
            {
                writer.WriteElementString("minimumTerm", this.updatedValues.minimumTerm.ToString());
            }
            else if (this.initialValues.minimumTermHasValue && minimumTerm != null)
            {
                writer.WriteElementString("minimumTerm", this.initialValues.minimumTerm.ToString());
            }

            if (this.updatedValues.maximumTermHasValue && maximumTerm != null)
            {
                writer.WriteElementString("maximumTerm", this.updatedValues.maximumTerm.ToString());
            }
            else if (this.initialValues.maximumTermHasValue && maximumTerm != null)
            {
                writer.WriteElementString("maximumTerm", this.initialValues.maximumTerm.ToString());
            }

            if (this.updatedValues.Brand_idHasValue)
            {
                writer.WriteElementString("Brand_id", this.updatedValues.Brand_id.ToString());
            }
            else if (this.initialValues.Brand_idHasValue)
            {
                writer.WriteElementString("Brand_id", this.initialValues.Brand_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
