//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Interface.DataObjects;

namespace Qujck.Pas.Model.Interface
{
    [Serializable]
    public sealed partial class BacsIn : AbstractInterfaceEntity
    {
        internal BacsInDo initialValues { get; private set; }
        internal BacsInDo updatedValues { get; private set; }
        internal Action<BacsInDo, string> loadMissingValue { private get; set; }

        public BacsIn()
        {
            this.initialValues = new BacsInDo();
            this.updatedValues = new BacsInDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Interface";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "BacsIn";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "destinationAccountName";
                yield return "destinationSortCode";
                yield return "destinationAccountNumber";
                yield return "amount";
                yield return "reference";
                yield return "transactionType";
                yield return "MoneyIn_id";
                yield return "Billing_id";
                yield return "Contract_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(35)]
        [XmlElement(ElementName="destinationAccountName")]
        public string destinationAccountName 
	    { 
            get
            {
                if (this.updatedValues.destinationAccountNameHasValue)
                {
                    return this.updatedValues.destinationAccountName;
                }
                
                if (!this.initialValues.destinationAccountNameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "destinationAccountName");
                    this.initialValues.destinationAccountNameHasValue = true;
                }

                return this.initialValues.destinationAccountName;
            }
            set
            {
                this.updatedValues.destinationAccountName = value;
            }
        }

        [StringLength(6)]
        [RegularExpression(@"\d{6}")]
        [XmlElement(ElementName="destinationSortCode")]
        public string destinationSortCode 
	    { 
            get
            {
                if (this.updatedValues.destinationSortCodeHasValue)
                {
                    return this.updatedValues.destinationSortCode;
                }
                
                if (!this.initialValues.destinationSortCodeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "destinationSortCode");
                    this.initialValues.destinationSortCodeHasValue = true;
                }

                return this.initialValues.destinationSortCode;
            }
            set
            {
                this.updatedValues.destinationSortCode = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="destinationAccountNumber")]
        public string destinationAccountNumber 
	    { 
            get
            {
                if (this.updatedValues.destinationAccountNumberHasValue)
                {
                    return this.updatedValues.destinationAccountNumber;
                }
                
                if (!this.initialValues.destinationAccountNumberHasValue)
                {
                    this.loadMissingValue(this.initialValues, "destinationAccountNumber");
                    this.initialValues.destinationAccountNumberHasValue = true;
                }

                return this.initialValues.destinationAccountNumber;
            }
            set
            {
                this.updatedValues.destinationAccountNumber = value;
            }
        }

        [XmlElement(ElementName="amount")]
        public decimal amount 
	    { 
            get
            {
                if (this.updatedValues.amountHasValue)
                {
                    return this.updatedValues.amount;
                }
                
                if (!this.initialValues.amountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "amount");
                    this.initialValues.amountHasValue = true;
                }

                return this.initialValues.amount;
            }
            set
            {
                this.updatedValues.amount = value;
            }
        }

        [StringLength(35)]
        [XmlElement(ElementName="reference")]
        public string reference 
	    { 
            get
            {
                if (this.updatedValues.referenceHasValue)
                {
                    return this.updatedValues.reference;
                }
                
                if (!this.initialValues.referenceHasValue)
                {
                    this.loadMissingValue(this.initialValues, "reference");
                    this.initialValues.referenceHasValue = true;
                }

                return this.initialValues.reference;
            }
            set
            {
                this.updatedValues.reference = value;
            }
        }

        [XmlElement(ElementName="transactionType")]
        public TransactionType transactionType 
	    { 
            get
            {
                if (this.updatedValues.transactionTypeHasValue)
                {
                    return this.updatedValues.transactionType;
                }
                
                if (!this.initialValues.transactionTypeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "transactionType");
                    this.initialValues.transactionTypeHasValue = true;
                }

                return this.initialValues.transactionType;
            }
            set
            {
                this.updatedValues.transactionType = value;
            }
        }

        [XmlElement(ElementName="MoneyIn_id")]
        public long MoneyIn_id 
	    { 
            get
            {
                if (this.updatedValues.MoneyIn_idHasValue)
                {
                    return this.updatedValues.MoneyIn_id;
                }
                
                if (!this.initialValues.MoneyIn_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "MoneyIn_id");
                    this.initialValues.MoneyIn_idHasValue = true;
                }

                return this.initialValues.MoneyIn_id;
            }
            set
            {
                this.updatedValues.MoneyIn_id = value;
            }
        }

        [XmlElement(ElementName="Billing_id")]
        public long Billing_id 
	    { 
            get
            {
                if (this.updatedValues.Billing_idHasValue)
                {
                    return this.updatedValues.Billing_id;
                }
                
                if (!this.initialValues.Billing_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Billing_id");
                    this.initialValues.Billing_idHasValue = true;
                }

                return this.initialValues.Billing_id;
            }
            set
            {
                this.updatedValues.Billing_id = value;
            }
        }

        [XmlElement(ElementName="Contract_id")]
        public long Contract_id 
	    { 
            get
            {
                if (this.updatedValues.Contract_idHasValue)
                {
                    return this.updatedValues.Contract_id;
                }
                
                if (!this.initialValues.Contract_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Contract_id");
                    this.initialValues.Contract_idHasValue = true;
                }

                return this.initialValues.Contract_id;
            }
            set
            {
                this.updatedValues.Contract_id = value;
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "destinationAccountName");
            if (e2 != null) 
            {
                this.destinationAccountName = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "destinationSortCode");
            if (e3 != null) 
            {
                this.destinationSortCode = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "destinationAccountNumber");
            if (e4 != null) 
            {
                this.destinationAccountNumber = e4.Value;
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "amount");
            if (e5 != null)
            {
                this.amount = decimal.Parse(e5.Value);
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "reference");
            if (e6 != null) 
            {
                this.reference = e6.Value;
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "transactionType");
            if (e7 != null)
            {
                this.transactionType = e7.Value;
            }

            XElement e8 = elements.FirstOrDefault(x => x.Name == "MoneyIn_id");
            if (e8 != null)
            {
                this.MoneyIn_id = long.Parse(e8.Value);
            }

            XElement e9 = elements.FirstOrDefault(x => x.Name == "Billing_id");
            if (e9 != null)
            {
                this.Billing_id = long.Parse(e9.Value);
            }

            XElement e10 = elements.FirstOrDefault(x => x.Name == "Contract_id");
            if (e10 != null)
            {
                this.Contract_id = long.Parse(e10.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.destinationAccountNameHasValue && !string.IsNullOrEmpty(destinationAccountName))
            {
                writer.WriteElementString("destinationAccountName", this.updatedValues.destinationAccountName);
            }
            else if (this.initialValues.destinationAccountNameHasValue && !string.IsNullOrEmpty(destinationAccountName))
            {
                writer.WriteElementString("destinationAccountName", this.initialValues.destinationAccountName);
            }

            if (this.updatedValues.destinationSortCodeHasValue && !string.IsNullOrEmpty(destinationSortCode))
            {
                writer.WriteElementString("destinationSortCode", this.updatedValues.destinationSortCode);
            }
            else if (this.initialValues.destinationSortCodeHasValue && !string.IsNullOrEmpty(destinationSortCode))
            {
                writer.WriteElementString("destinationSortCode", this.initialValues.destinationSortCode);
            }

            if (this.updatedValues.destinationAccountNumberHasValue && !string.IsNullOrEmpty(destinationAccountNumber))
            {
                writer.WriteElementString("destinationAccountNumber", this.updatedValues.destinationAccountNumber);
            }
            else if (this.initialValues.destinationAccountNumberHasValue && !string.IsNullOrEmpty(destinationAccountNumber))
            {
                writer.WriteElementString("destinationAccountNumber", this.initialValues.destinationAccountNumber);
            }

            if (this.updatedValues.amountHasValue)
            {
                writer.WriteElementString("amount", this.updatedValues.amount.ToString());
            }
            else if (this.initialValues.amountHasValue)
            {
                writer.WriteElementString("amount", this.initialValues.amount.ToString());
            }

            if (this.updatedValues.referenceHasValue && !string.IsNullOrEmpty(reference))
            {
                writer.WriteElementString("reference", this.updatedValues.reference);
            }
            else if (this.initialValues.referenceHasValue && !string.IsNullOrEmpty(reference))
            {
                writer.WriteElementString("reference", this.initialValues.reference);
            }

            if (this.updatedValues.transactionTypeHasValue && transactionType != TransactionType.Null)
            {
                writer.WriteElementString("transactionType", this.updatedValues.transactionType.Value);
            }
            else if (this.initialValues.transactionTypeHasValue && transactionType != TransactionType.Null)
            {
                writer.WriteElementString("transactionType", this.initialValues.transactionType.Value);
            }

            if (this.updatedValues.MoneyIn_idHasValue)
            {
                writer.WriteElementString("MoneyIn_id", this.updatedValues.MoneyIn_id.ToString());
            }
            else if (this.initialValues.MoneyIn_idHasValue)
            {
                writer.WriteElementString("MoneyIn_id", this.initialValues.MoneyIn_id.ToString());
            }

            if (this.updatedValues.Billing_idHasValue)
            {
                writer.WriteElementString("Billing_id", this.updatedValues.Billing_id.ToString());
            }
            else if (this.initialValues.Billing_idHasValue)
            {
                writer.WriteElementString("Billing_id", this.initialValues.Billing_id.ToString());
            }

            if (this.updatedValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.updatedValues.Contract_id.ToString());
            }
            else if (this.initialValues.Contract_idHasValue)
            {
                writer.WriteElementString("Contract_id", this.initialValues.Contract_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
