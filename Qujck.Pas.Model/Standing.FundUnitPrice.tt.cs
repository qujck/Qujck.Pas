//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Standing.DataObjects;

namespace Qujck.Pas.Model.Standing
{
    [Serializable]
    public sealed partial class FundUnitPrice : AbstractStandingEntity
    {
        internal FundUnitPriceDo initialValues { get; private set; }
        internal FundUnitPriceDo updatedValues { get; private set; }
        internal Action<FundUnitPriceDo, string> loadMissingValue { private get; set; }

        public FundUnitPrice()
        {
            this.initialValues = new FundUnitPriceDo();
            this.updatedValues = new FundUnitPriceDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Standing";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "FundUnitPrice";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "value";
                yield return "valueCcy";
                yield return "valueTime";
                yield return "valueDate";
                yield return "FundUnit_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [XmlElement(ElementName="value")]
        public decimal value 
	    { 
            get
            {
                if (this.updatedValues.valueHasValue)
                {
                    return this.updatedValues.value;
                }
                
                if (!this.initialValues.valueHasValue)
                {
                    this.loadMissingValue(this.initialValues, "value");
                    this.initialValues.valueHasValue = true;
                }

                return this.initialValues.value;
            }
            set
            {
                this.updatedValues.value = value;
            }
        }

        [XmlElement(ElementName="valueCcy")]
        public Currency valueCcy 
	    { 
            get
            {
                if (this.updatedValues.valueCcyHasValue)
                {
                    return this.updatedValues.valueCcy;
                }
                
                if (!this.initialValues.valueCcyHasValue)
                {
                    this.loadMissingValue(this.initialValues, "valueCcy");
                    this.initialValues.valueCcyHasValue = true;
                }

                return this.initialValues.valueCcy;
            }
            set
            {
                this.updatedValues.valueCcy = value;
            }
        }

        [XmlElement(ElementName="valueTime")]
        public System.TimeSpan? valueTime 
	    { 
            get
            {
                if (this.updatedValues.valueTimeHasValue)
                {
                    return this.updatedValues.valueTime;
                }
                
                if (!this.initialValues.valueTimeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "valueTime");
                    this.initialValues.valueTimeHasValue = true;
                }

                return this.initialValues.valueTime;
            }
            set
            {
                this.updatedValues.valueTime = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="valueDate")]
        public System.DateTime valueDate 
	    { 
            get
            {
                if (this.updatedValues.valueDateHasValue)
                {
                    return this.updatedValues.valueDate;
                }
                
                if (!this.initialValues.valueDateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "valueDate");
                    this.initialValues.valueDateHasValue = true;
                }

                return this.initialValues.valueDate;
            }
            set
            {
                this.updatedValues.valueDate = value;
            }
        }

        [XmlElement(ElementName="FundUnit_id")]
        public long FundUnit_id 
	    { 
            get
            {
                if (this.updatedValues.FundUnit_idHasValue)
                {
                    return this.updatedValues.FundUnit_id;
                }
                
                if (!this.initialValues.FundUnit_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "FundUnit_id");
                    this.initialValues.FundUnit_idHasValue = true;
                }

                return this.initialValues.FundUnit_id;
            }
            set
            {
                this.updatedValues.FundUnit_id = value;
            }
        }

        public bool FundUnitIsLoaded { get; private set; }
        internal Func<FundUnit> FundUnitQuery { private get; set; }
        public FundUnit FundUnit
        {
            get
            {
                if (this.FundUnitQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.FundUnitQuery();
                    if (!this.FundUnitIsLoaded)
                    {
                        this.FundUnitIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "value");
            if (e2 != null)
            {
                this.value = decimal.Parse(e2.Value);
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "valueCcy");
            if (e3 != null)
            {
                this.valueCcy = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "valueTime");
            if (e4 != null)
            {
                this.valueTime = System.TimeSpan.Parse(e4.Value);
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "valueDate");
            if (e5 != null)
            {
                this.valueDate = System.DateTime.Parse(e5.Value);
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "FundUnit_id");
            if (e6 != null)
            {
                this.FundUnit_id = long.Parse(e6.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.valueHasValue)
            {
                writer.WriteElementString("value", this.updatedValues.value.ToString());
            }
            else if (this.initialValues.valueHasValue)
            {
                writer.WriteElementString("value", this.initialValues.value.ToString());
            }

            if (this.updatedValues.valueCcyHasValue && valueCcy != Currency.Null)
            {
                writer.WriteElementString("valueCcy", this.updatedValues.valueCcy.Value);
            }
            else if (this.initialValues.valueCcyHasValue && valueCcy != Currency.Null)
            {
                writer.WriteElementString("valueCcy", this.initialValues.valueCcy.Value);
            }

            if (this.updatedValues.valueTimeHasValue && valueTime != null)
            {
                writer.WriteElementString("valueTime", this.updatedValues.valueTime.ToString());
            }
            else if (this.initialValues.valueTimeHasValue && valueTime != null)
            {
                writer.WriteElementString("valueTime", this.initialValues.valueTime.ToString());
            }

            if (this.updatedValues.valueDateHasValue)
            {
                writer.WriteElementString("valueDate", this.updatedValues.valueDate.ToString());
            }
            else if (this.initialValues.valueDateHasValue)
            {
                writer.WriteElementString("valueDate", this.initialValues.valueDate.ToString());
            }

            if (this.updatedValues.FundUnit_idHasValue)
            {
                writer.WriteElementString("FundUnit_id", this.updatedValues.FundUnit_id.ToString());
            }
            else if (this.initialValues.FundUnit_idHasValue)
            {
                writer.WriteElementString("FundUnit_id", this.initialValues.FundUnit_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
