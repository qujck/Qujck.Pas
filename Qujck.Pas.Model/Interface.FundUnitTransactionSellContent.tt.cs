//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Interface.DataObjects;

namespace Qujck.Pas.Model.Interface
{
    [Serializable]
    public sealed partial class FundUnitTransactionSellContent : AbstractInterfaceEntity
    {
        internal FundUnitTransactionSellContentDo initialValues { get; private set; }
        internal FundUnitTransactionSellContentDo updatedValues { get; private set; }
        internal Action<FundUnitTransactionSellContentDo, string> loadMissingValue { private get; set; }

        public FundUnitTransactionSellContent()
        {
            this.initialValues = new FundUnitTransactionSellContentDo();
            this.updatedValues = new FundUnitTransactionSellContentDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Interface";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "FundUnitTransactionSellContent";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "Fund_name";
                yield return "numberOfUnits";
                yield return "value";
                yield return "amount";
                yield return "valueDate";
                yield return "LetterContent_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="Fund_name")]
        public string Fund_name 
	    { 
            get
            {
                if (this.updatedValues.Fund_nameHasValue)
                {
                    return this.updatedValues.Fund_name;
                }
                
                if (!this.initialValues.Fund_nameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Fund_name");
                    this.initialValues.Fund_nameHasValue = true;
                }

                return this.initialValues.Fund_name;
            }
            set
            {
                this.updatedValues.Fund_name = value;
            }
        }

        [XmlElement(ElementName="numberOfUnits")]
        public decimal? numberOfUnits 
	    { 
            get
            {
                if (this.updatedValues.numberOfUnitsHasValue)
                {
                    return this.updatedValues.numberOfUnits;
                }
                
                if (!this.initialValues.numberOfUnitsHasValue)
                {
                    this.loadMissingValue(this.initialValues, "numberOfUnits");
                    this.initialValues.numberOfUnitsHasValue = true;
                }

                return this.initialValues.numberOfUnits;
            }
            set
            {
                this.updatedValues.numberOfUnits = value;
            }
        }

        [XmlElement(ElementName="value")]
        public decimal? value 
	    { 
            get
            {
                if (this.updatedValues.valueHasValue)
                {
                    return this.updatedValues.value;
                }
                
                if (!this.initialValues.valueHasValue)
                {
                    this.loadMissingValue(this.initialValues, "value");
                    this.initialValues.valueHasValue = true;
                }

                return this.initialValues.value;
            }
            set
            {
                this.updatedValues.value = value;
            }
        }

        [XmlElement(ElementName="amount")]
        public decimal? amount 
	    { 
            get
            {
                if (this.updatedValues.amountHasValue)
                {
                    return this.updatedValues.amount;
                }
                
                if (!this.initialValues.amountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "amount");
                    this.initialValues.amountHasValue = true;
                }

                return this.initialValues.amount;
            }
            set
            {
                this.updatedValues.amount = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="valueDate")]
        public System.DateTime? valueDate 
	    { 
            get
            {
                if (this.updatedValues.valueDateHasValue)
                {
                    return this.updatedValues.valueDate;
                }
                
                if (!this.initialValues.valueDateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "valueDate");
                    this.initialValues.valueDateHasValue = true;
                }

                return this.initialValues.valueDate;
            }
            set
            {
                this.updatedValues.valueDate = value;
            }
        }

        [XmlElement(ElementName="LetterContent_id")]
        public long LetterContent_id 
	    { 
            get
            {
                if (this.updatedValues.LetterContent_idHasValue)
                {
                    return this.updatedValues.LetterContent_id;
                }
                
                if (!this.initialValues.LetterContent_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "LetterContent_id");
                    this.initialValues.LetterContent_idHasValue = true;
                }

                return this.initialValues.LetterContent_id;
            }
            set
            {
                this.updatedValues.LetterContent_id = value;
            }
        }

        public bool LetterContentIsLoaded { get; private set; }
        internal Func<LetterContent> LetterContentQuery { private get; set; }
        public LetterContent LetterContent
        {
            get
            {
                if (this.LetterContentQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.LetterContentQuery();
                    if (!this.LetterContentIsLoaded)
                    {
                        this.LetterContentIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "Fund_name");
            if (e2 != null) 
            {
                this.Fund_name = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "numberOfUnits");
            if (e3 != null)
            {
                this.numberOfUnits = decimal.Parse(e3.Value);
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "value");
            if (e4 != null)
            {
                this.value = decimal.Parse(e4.Value);
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "amount");
            if (e5 != null)
            {
                this.amount = decimal.Parse(e5.Value);
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "valueDate");
            if (e6 != null)
            {
                this.valueDate = System.DateTime.Parse(e6.Value);
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "LetterContent_id");
            if (e7 != null)
            {
                this.LetterContent_id = long.Parse(e7.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.Fund_nameHasValue && !string.IsNullOrEmpty(Fund_name))
            {
                writer.WriteElementString("Fund_name", this.updatedValues.Fund_name);
            }
            else if (this.initialValues.Fund_nameHasValue && !string.IsNullOrEmpty(Fund_name))
            {
                writer.WriteElementString("Fund_name", this.initialValues.Fund_name);
            }

            if (this.updatedValues.numberOfUnitsHasValue && numberOfUnits != null)
            {
                writer.WriteElementString("numberOfUnits", this.updatedValues.numberOfUnits.ToString());
            }
            else if (this.initialValues.numberOfUnitsHasValue && numberOfUnits != null)
            {
                writer.WriteElementString("numberOfUnits", this.initialValues.numberOfUnits.ToString());
            }

            if (this.updatedValues.valueHasValue && value != null)
            {
                writer.WriteElementString("value", this.updatedValues.value.ToString());
            }
            else if (this.initialValues.valueHasValue && value != null)
            {
                writer.WriteElementString("value", this.initialValues.value.ToString());
            }

            if (this.updatedValues.amountHasValue && amount != null)
            {
                writer.WriteElementString("amount", this.updatedValues.amount.ToString());
            }
            else if (this.initialValues.amountHasValue && amount != null)
            {
                writer.WriteElementString("amount", this.initialValues.amount.ToString());
            }

            if (this.updatedValues.valueDateHasValue && valueDate != null)
            {
                writer.WriteElementString("valueDate", this.updatedValues.valueDate.ToString());
            }
            else if (this.initialValues.valueDateHasValue && valueDate != null)
            {
                writer.WriteElementString("valueDate", this.initialValues.valueDate.ToString());
            }

            if (this.updatedValues.LetterContent_idHasValue)
            {
                writer.WriteElementString("LetterContent_id", this.updatedValues.LetterContent_id.ToString());
            }
            else if (this.initialValues.LetterContent_idHasValue)
            {
                writer.WriteElementString("LetterContent_id", this.initialValues.LetterContent_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
