//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Interface.DataObjects;

namespace Qujck.Pas.Model.Interface
{
    [Serializable]
    public sealed partial class MaturityContent : AbstractInterfaceEntity
    {
        internal MaturityContentDo initialValues { get; private set; }
        internal MaturityContentDo updatedValues { get; private set; }
        internal Action<MaturityContentDo, string> loadMissingValue { private get; set; }

        public MaturityContent()
        {
            this.initialValues = new MaturityContentDo();
            this.updatedValues = new MaturityContentDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Interface";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "MaturityContent";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "effectiveDate";
                yield return "numberOfWakeUpLetters";
                yield return "paymentMethod";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [DisplayFormat(DataFormatString="{0:d}", ApplyFormatInEditMode=true)]
        [XmlElement(ElementName="effectiveDate")]
        public System.DateTime? effectiveDate 
	    { 
            get
            {
                if (this.updatedValues.effectiveDateHasValue)
                {
                    return this.updatedValues.effectiveDate;
                }
                
                if (!this.initialValues.effectiveDateHasValue)
                {
                    this.loadMissingValue(this.initialValues, "effectiveDate");
                    this.initialValues.effectiveDateHasValue = true;
                }

                return this.initialValues.effectiveDate;
            }
            set
            {
                this.updatedValues.effectiveDate = value;
            }
        }

        [XmlElement(ElementName="numberOfWakeUpLetters")]
        public short? numberOfWakeUpLetters 
	    { 
            get
            {
                if (this.updatedValues.numberOfWakeUpLettersHasValue)
                {
                    return this.updatedValues.numberOfWakeUpLetters;
                }
                
                if (!this.initialValues.numberOfWakeUpLettersHasValue)
                {
                    this.loadMissingValue(this.initialValues, "numberOfWakeUpLetters");
                    this.initialValues.numberOfWakeUpLettersHasValue = true;
                }

                return this.initialValues.numberOfWakeUpLetters;
            }
            set
            {
                this.updatedValues.numberOfWakeUpLetters = value;
            }
        }

        [XmlElement(ElementName="paymentMethod")]
        public PaymentMethod paymentMethod 
	    { 
            get
            {
                if (this.updatedValues.paymentMethodHasValue)
                {
                    return this.updatedValues.paymentMethod;
                }
                
                if (!this.initialValues.paymentMethodHasValue)
                {
                    this.loadMissingValue(this.initialValues, "paymentMethod");
                    this.initialValues.paymentMethodHasValue = true;
                }

                return this.initialValues.paymentMethod;
            }
            set
            {
                this.updatedValues.paymentMethod = value;
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "effectiveDate");
            if (e2 != null)
            {
                this.effectiveDate = System.DateTime.Parse(e2.Value);
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "numberOfWakeUpLetters");
            if (e3 != null)
            {
                this.numberOfWakeUpLetters = short.Parse(e3.Value);
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "paymentMethod");
            if (e4 != null)
            {
                this.paymentMethod = e4.Value;
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.effectiveDateHasValue && effectiveDate != null)
            {
                writer.WriteElementString("effectiveDate", this.updatedValues.effectiveDate.ToString());
            }
            else if (this.initialValues.effectiveDateHasValue && effectiveDate != null)
            {
                writer.WriteElementString("effectiveDate", this.initialValues.effectiveDate.ToString());
            }

            if (this.updatedValues.numberOfWakeUpLettersHasValue && numberOfWakeUpLetters != null)
            {
                writer.WriteElementString("numberOfWakeUpLetters", this.updatedValues.numberOfWakeUpLetters.ToString());
            }
            else if (this.initialValues.numberOfWakeUpLettersHasValue && numberOfWakeUpLetters != null)
            {
                writer.WriteElementString("numberOfWakeUpLetters", this.initialValues.numberOfWakeUpLetters.ToString());
            }

            if (this.updatedValues.paymentMethodHasValue && paymentMethod != PaymentMethod.Null)
            {
                writer.WriteElementString("paymentMethod", this.updatedValues.paymentMethod.Value);
            }
            else if (this.initialValues.paymentMethodHasValue && paymentMethod != PaymentMethod.Null)
            {
                writer.WriteElementString("paymentMethod", this.initialValues.paymentMethod.Value);
            }

            this.AfterWriteXml(writer);
        }
    }
}
