//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Policy.DataObjects;

namespace Qujck.Pas.Model.Policy
{
    [Serializable]
    public sealed partial class Organisation : AbstractPolicyEntity
    {
        internal OrganisationDo initialValues { get; private set; }
        internal OrganisationDo updatedValues { get; private set; }
        internal Action<OrganisationDo, string> loadMissingValue { private get; set; }

        public Organisation()
        {
            this.initialValues = new OrganisationDo();
            this.updatedValues = new OrganisationDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Policy";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "Organisation";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "name";
                yield return "registeredCompanyNumber";
                yield return "fsaReferenceNumber";
                yield return "fsaName";
                yield return "Party_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="name")]
        public string name 
	    { 
            get
            {
                if (this.updatedValues.nameHasValue)
                {
                    return this.updatedValues.name;
                }
                
                if (!this.initialValues.nameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "name");
                    this.initialValues.nameHasValue = true;
                }

                return this.initialValues.name;
            }
            set
            {
                this.updatedValues.name = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="registeredCompanyNumber")]
        public string registeredCompanyNumber 
	    { 
            get
            {
                if (this.updatedValues.registeredCompanyNumberHasValue)
                {
                    return this.updatedValues.registeredCompanyNumber;
                }
                
                if (!this.initialValues.registeredCompanyNumberHasValue)
                {
                    this.loadMissingValue(this.initialValues, "registeredCompanyNumber");
                    this.initialValues.registeredCompanyNumberHasValue = true;
                }

                return this.initialValues.registeredCompanyNumber;
            }
            set
            {
                this.updatedValues.registeredCompanyNumber = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="fsaReferenceNumber")]
        public string fsaReferenceNumber 
	    { 
            get
            {
                if (this.updatedValues.fsaReferenceNumberHasValue)
                {
                    return this.updatedValues.fsaReferenceNumber;
                }
                
                if (!this.initialValues.fsaReferenceNumberHasValue)
                {
                    this.loadMissingValue(this.initialValues, "fsaReferenceNumber");
                    this.initialValues.fsaReferenceNumberHasValue = true;
                }

                return this.initialValues.fsaReferenceNumber;
            }
            set
            {
                this.updatedValues.fsaReferenceNumber = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="fsaName")]
        public string fsaName 
	    { 
            get
            {
                if (this.updatedValues.fsaNameHasValue)
                {
                    return this.updatedValues.fsaName;
                }
                
                if (!this.initialValues.fsaNameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "fsaName");
                    this.initialValues.fsaNameHasValue = true;
                }

                return this.initialValues.fsaName;
            }
            set
            {
                this.updatedValues.fsaName = value;
            }
        }

        [XmlElement(ElementName="Party_id")]
        public long Party_id 
	    { 
            get
            {
                if (this.updatedValues.Party_idHasValue)
                {
                    return this.updatedValues.Party_id;
                }
                
                if (!this.initialValues.Party_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Party_id");
                    this.initialValues.Party_idHasValue = true;
                }

                return this.initialValues.Party_id;
            }
            set
            {
                this.updatedValues.Party_id = value;
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "name");
            if (e2 != null) 
            {
                this.name = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "registeredCompanyNumber");
            if (e3 != null) 
            {
                this.registeredCompanyNumber = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "fsaReferenceNumber");
            if (e4 != null) 
            {
                this.fsaReferenceNumber = e4.Value;
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "fsaName");
            if (e5 != null) 
            {
                this.fsaName = e5.Value;
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "Party_id");
            if (e6 != null)
            {
                this.Party_id = long.Parse(e6.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.nameHasValue && !string.IsNullOrEmpty(name))
            {
                writer.WriteElementString("name", this.updatedValues.name);
            }
            else if (this.initialValues.nameHasValue && !string.IsNullOrEmpty(name))
            {
                writer.WriteElementString("name", this.initialValues.name);
            }

            if (this.updatedValues.registeredCompanyNumberHasValue && !string.IsNullOrEmpty(registeredCompanyNumber))
            {
                writer.WriteElementString("registeredCompanyNumber", this.updatedValues.registeredCompanyNumber);
            }
            else if (this.initialValues.registeredCompanyNumberHasValue && !string.IsNullOrEmpty(registeredCompanyNumber))
            {
                writer.WriteElementString("registeredCompanyNumber", this.initialValues.registeredCompanyNumber);
            }

            if (this.updatedValues.fsaReferenceNumberHasValue && !string.IsNullOrEmpty(fsaReferenceNumber))
            {
                writer.WriteElementString("fsaReferenceNumber", this.updatedValues.fsaReferenceNumber);
            }
            else if (this.initialValues.fsaReferenceNumberHasValue && !string.IsNullOrEmpty(fsaReferenceNumber))
            {
                writer.WriteElementString("fsaReferenceNumber", this.initialValues.fsaReferenceNumber);
            }

            if (this.updatedValues.fsaNameHasValue && !string.IsNullOrEmpty(fsaName))
            {
                writer.WriteElementString("fsaName", this.updatedValues.fsaName);
            }
            else if (this.initialValues.fsaNameHasValue && !string.IsNullOrEmpty(fsaName))
            {
                writer.WriteElementString("fsaName", this.initialValues.fsaName);
            }

            if (this.updatedValues.Party_idHasValue)
            {
                writer.WriteElementString("Party_id", this.updatedValues.Party_id.ToString());
            }
            else if (this.initialValues.Party_idHasValue)
            {
                writer.WriteElementString("Party_id", this.initialValues.Party_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
