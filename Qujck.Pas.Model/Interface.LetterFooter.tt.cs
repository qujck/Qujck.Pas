//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Interface.DataObjects;

namespace Qujck.Pas.Model.Interface
{
    [Serializable]
    public sealed partial class LetterFooter : AbstractInterfaceEntity
    {
        internal LetterFooterDo initialValues { get; private set; }
        internal LetterFooterDo updatedValues { get; private set; }
        internal Action<LetterFooterDo, string> loadMissingValue { private get; set; }

        public LetterFooter()
        {
            this.initialValues = new LetterFooterDo();
            this.updatedValues = new LetterFooterDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Interface";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "LetterFooter";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "companyName";
                yield return "addressLine1";
                yield return "addressLine2";
                yield return "addressLine3";
                yield return "postCode";
                yield return "country";
                yield return "telephone";
                yield return "emailAddress";
                yield return "signatoryName";
                yield return "signatoryDepartment";
                yield return "signatoryTelephone";
                yield return "LetterWrapper_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="companyName")]
        public string companyName 
	    { 
            get
            {
                if (this.updatedValues.companyNameHasValue)
                {
                    return this.updatedValues.companyName;
                }
                
                if (!this.initialValues.companyNameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "companyName");
                    this.initialValues.companyNameHasValue = true;
                }

                return this.initialValues.companyName;
            }
            set
            {
                this.updatedValues.companyName = value;
            }
        }

        [StringLength(35)]
        [XmlElement(ElementName="addressLine1")]
        public string addressLine1 
	    { 
            get
            {
                if (this.updatedValues.addressLine1HasValue)
                {
                    return this.updatedValues.addressLine1;
                }
                
                if (!this.initialValues.addressLine1HasValue)
                {
                    this.loadMissingValue(this.initialValues, "addressLine1");
                    this.initialValues.addressLine1HasValue = true;
                }

                return this.initialValues.addressLine1;
            }
            set
            {
                this.updatedValues.addressLine1 = value;
            }
        }

        [StringLength(35)]
        [XmlElement(ElementName="addressLine2")]
        public string addressLine2 
	    { 
            get
            {
                if (this.updatedValues.addressLine2HasValue)
                {
                    return this.updatedValues.addressLine2;
                }
                
                if (!this.initialValues.addressLine2HasValue)
                {
                    this.loadMissingValue(this.initialValues, "addressLine2");
                    this.initialValues.addressLine2HasValue = true;
                }

                return this.initialValues.addressLine2;
            }
            set
            {
                this.updatedValues.addressLine2 = value;
            }
        }

        [StringLength(35)]
        [XmlElement(ElementName="addressLine3")]
        public string addressLine3 
	    { 
            get
            {
                if (this.updatedValues.addressLine3HasValue)
                {
                    return this.updatedValues.addressLine3;
                }
                
                if (!this.initialValues.addressLine3HasValue)
                {
                    this.loadMissingValue(this.initialValues, "addressLine3");
                    this.initialValues.addressLine3HasValue = true;
                }

                return this.initialValues.addressLine3;
            }
            set
            {
                this.updatedValues.addressLine3 = value;
            }
        }

        [StringLength(50)]
        [RegularExpression(@"[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9][A-Z-[CIKMOV]]{2}|(BFPO \d{1,4})")]
        [XmlElement(ElementName="postCode")]
        public string postCode 
	    { 
            get
            {
                if (this.updatedValues.postCodeHasValue)
                {
                    return this.updatedValues.postCode;
                }
                
                if (!this.initialValues.postCodeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "postCode");
                    this.initialValues.postCodeHasValue = true;
                }

                return this.initialValues.postCode;
            }
            set
            {
                this.updatedValues.postCode = value;
            }
        }

        [StringLength(35)]
        [XmlElement(ElementName="country")]
        public string country 
	    { 
            get
            {
                if (this.updatedValues.countryHasValue)
                {
                    return this.updatedValues.country;
                }
                
                if (!this.initialValues.countryHasValue)
                {
                    this.loadMissingValue(this.initialValues, "country");
                    this.initialValues.countryHasValue = true;
                }

                return this.initialValues.country;
            }
            set
            {
                this.updatedValues.country = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="telephone")]
        public string telephone 
	    { 
            get
            {
                if (this.updatedValues.telephoneHasValue)
                {
                    return this.updatedValues.telephone;
                }
                
                if (!this.initialValues.telephoneHasValue)
                {
                    this.loadMissingValue(this.initialValues, "telephone");
                    this.initialValues.telephoneHasValue = true;
                }

                return this.initialValues.telephone;
            }
            set
            {
                this.updatedValues.telephone = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="emailAddress")]
        public string emailAddress 
	    { 
            get
            {
                if (this.updatedValues.emailAddressHasValue)
                {
                    return this.updatedValues.emailAddress;
                }
                
                if (!this.initialValues.emailAddressHasValue)
                {
                    this.loadMissingValue(this.initialValues, "emailAddress");
                    this.initialValues.emailAddressHasValue = true;
                }

                return this.initialValues.emailAddress;
            }
            set
            {
                this.updatedValues.emailAddress = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="signatoryName")]
        public string signatoryName 
	    { 
            get
            {
                if (this.updatedValues.signatoryNameHasValue)
                {
                    return this.updatedValues.signatoryName;
                }
                
                if (!this.initialValues.signatoryNameHasValue)
                {
                    this.loadMissingValue(this.initialValues, "signatoryName");
                    this.initialValues.signatoryNameHasValue = true;
                }

                return this.initialValues.signatoryName;
            }
            set
            {
                this.updatedValues.signatoryName = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="signatoryDepartment")]
        public string signatoryDepartment 
	    { 
            get
            {
                if (this.updatedValues.signatoryDepartmentHasValue)
                {
                    return this.updatedValues.signatoryDepartment;
                }
                
                if (!this.initialValues.signatoryDepartmentHasValue)
                {
                    this.loadMissingValue(this.initialValues, "signatoryDepartment");
                    this.initialValues.signatoryDepartmentHasValue = true;
                }

                return this.initialValues.signatoryDepartment;
            }
            set
            {
                this.updatedValues.signatoryDepartment = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="signatoryTelephone")]
        public string signatoryTelephone 
	    { 
            get
            {
                if (this.updatedValues.signatoryTelephoneHasValue)
                {
                    return this.updatedValues.signatoryTelephone;
                }
                
                if (!this.initialValues.signatoryTelephoneHasValue)
                {
                    this.loadMissingValue(this.initialValues, "signatoryTelephone");
                    this.initialValues.signatoryTelephoneHasValue = true;
                }

                return this.initialValues.signatoryTelephone;
            }
            set
            {
                this.updatedValues.signatoryTelephone = value;
            }
        }

        [XmlElement(ElementName="LetterWrapper_id")]
        public long LetterWrapper_id 
	    { 
            get
            {
                if (this.updatedValues.LetterWrapper_idHasValue)
                {
                    return this.updatedValues.LetterWrapper_id;
                }
                
                if (!this.initialValues.LetterWrapper_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "LetterWrapper_id");
                    this.initialValues.LetterWrapper_idHasValue = true;
                }

                return this.initialValues.LetterWrapper_id;
            }
            set
            {
                this.updatedValues.LetterWrapper_id = value;
            }
        }

        public bool LetterWrapperIsLoaded { get; private set; }
        internal Func<LetterWrapper> LetterWrapperQuery { private get; set; }
        public LetterWrapper LetterWrapper
        {
            get
            {
                if (this.LetterWrapperQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.LetterWrapperQuery();
                    if (!this.LetterWrapperIsLoaded)
                    {
                        this.LetterWrapperIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "companyName");
            if (e2 != null) 
            {
                this.companyName = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "addressLine1");
            if (e3 != null) 
            {
                this.addressLine1 = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "addressLine2");
            if (e4 != null) 
            {
                this.addressLine2 = e4.Value;
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "addressLine3");
            if (e5 != null) 
            {
                this.addressLine3 = e5.Value;
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "postCode");
            if (e6 != null) 
            {
                this.postCode = e6.Value;
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "country");
            if (e7 != null) 
            {
                this.country = e7.Value;
            }

            XElement e8 = elements.FirstOrDefault(x => x.Name == "telephone");
            if (e8 != null) 
            {
                this.telephone = e8.Value;
            }

            XElement e9 = elements.FirstOrDefault(x => x.Name == "emailAddress");
            if (e9 != null) 
            {
                this.emailAddress = e9.Value;
            }

            XElement e10 = elements.FirstOrDefault(x => x.Name == "signatoryName");
            if (e10 != null) 
            {
                this.signatoryName = e10.Value;
            }

            XElement e11 = elements.FirstOrDefault(x => x.Name == "signatoryDepartment");
            if (e11 != null) 
            {
                this.signatoryDepartment = e11.Value;
            }

            XElement e12 = elements.FirstOrDefault(x => x.Name == "signatoryTelephone");
            if (e12 != null) 
            {
                this.signatoryTelephone = e12.Value;
            }

            XElement e13 = elements.FirstOrDefault(x => x.Name == "LetterWrapper_id");
            if (e13 != null)
            {
                this.LetterWrapper_id = long.Parse(e13.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.companyNameHasValue && !string.IsNullOrEmpty(companyName))
            {
                writer.WriteElementString("companyName", this.updatedValues.companyName);
            }
            else if (this.initialValues.companyNameHasValue && !string.IsNullOrEmpty(companyName))
            {
                writer.WriteElementString("companyName", this.initialValues.companyName);
            }

            if (this.updatedValues.addressLine1HasValue && !string.IsNullOrEmpty(addressLine1))
            {
                writer.WriteElementString("addressLine1", this.updatedValues.addressLine1);
            }
            else if (this.initialValues.addressLine1HasValue && !string.IsNullOrEmpty(addressLine1))
            {
                writer.WriteElementString("addressLine1", this.initialValues.addressLine1);
            }

            if (this.updatedValues.addressLine2HasValue && !string.IsNullOrEmpty(addressLine2))
            {
                writer.WriteElementString("addressLine2", this.updatedValues.addressLine2);
            }
            else if (this.initialValues.addressLine2HasValue && !string.IsNullOrEmpty(addressLine2))
            {
                writer.WriteElementString("addressLine2", this.initialValues.addressLine2);
            }

            if (this.updatedValues.addressLine3HasValue && !string.IsNullOrEmpty(addressLine3))
            {
                writer.WriteElementString("addressLine3", this.updatedValues.addressLine3);
            }
            else if (this.initialValues.addressLine3HasValue && !string.IsNullOrEmpty(addressLine3))
            {
                writer.WriteElementString("addressLine3", this.initialValues.addressLine3);
            }

            if (this.updatedValues.postCodeHasValue && !string.IsNullOrEmpty(postCode))
            {
                writer.WriteElementString("postCode", this.updatedValues.postCode);
            }
            else if (this.initialValues.postCodeHasValue && !string.IsNullOrEmpty(postCode))
            {
                writer.WriteElementString("postCode", this.initialValues.postCode);
            }

            if (this.updatedValues.countryHasValue && !string.IsNullOrEmpty(country))
            {
                writer.WriteElementString("country", this.updatedValues.country);
            }
            else if (this.initialValues.countryHasValue && !string.IsNullOrEmpty(country))
            {
                writer.WriteElementString("country", this.initialValues.country);
            }

            if (this.updatedValues.telephoneHasValue && !string.IsNullOrEmpty(telephone))
            {
                writer.WriteElementString("telephone", this.updatedValues.telephone);
            }
            else if (this.initialValues.telephoneHasValue && !string.IsNullOrEmpty(telephone))
            {
                writer.WriteElementString("telephone", this.initialValues.telephone);
            }

            if (this.updatedValues.emailAddressHasValue && !string.IsNullOrEmpty(emailAddress))
            {
                writer.WriteElementString("emailAddress", this.updatedValues.emailAddress);
            }
            else if (this.initialValues.emailAddressHasValue && !string.IsNullOrEmpty(emailAddress))
            {
                writer.WriteElementString("emailAddress", this.initialValues.emailAddress);
            }

            if (this.updatedValues.signatoryNameHasValue && !string.IsNullOrEmpty(signatoryName))
            {
                writer.WriteElementString("signatoryName", this.updatedValues.signatoryName);
            }
            else if (this.initialValues.signatoryNameHasValue && !string.IsNullOrEmpty(signatoryName))
            {
                writer.WriteElementString("signatoryName", this.initialValues.signatoryName);
            }

            if (this.updatedValues.signatoryDepartmentHasValue && !string.IsNullOrEmpty(signatoryDepartment))
            {
                writer.WriteElementString("signatoryDepartment", this.updatedValues.signatoryDepartment);
            }
            else if (this.initialValues.signatoryDepartmentHasValue && !string.IsNullOrEmpty(signatoryDepartment))
            {
                writer.WriteElementString("signatoryDepartment", this.initialValues.signatoryDepartment);
            }

            if (this.updatedValues.signatoryTelephoneHasValue && !string.IsNullOrEmpty(signatoryTelephone))
            {
                writer.WriteElementString("signatoryTelephone", this.updatedValues.signatoryTelephone);
            }
            else if (this.initialValues.signatoryTelephoneHasValue && !string.IsNullOrEmpty(signatoryTelephone))
            {
                writer.WriteElementString("signatoryTelephone", this.initialValues.signatoryTelephone);
            }

            if (this.updatedValues.LetterWrapper_idHasValue)
            {
                writer.WriteElementString("LetterWrapper_id", this.updatedValues.LetterWrapper_id.ToString());
            }
            else if (this.initialValues.LetterWrapper_idHasValue)
            {
                writer.WriteElementString("LetterWrapper_id", this.initialValues.LetterWrapper_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
