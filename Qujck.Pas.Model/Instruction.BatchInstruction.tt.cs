//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Instruction.DataObjects;

namespace Qujck.Pas.Model.Instruction
{
    [Serializable]
    public sealed partial class BatchInstruction : AbstractInstructionEntity
    {
        internal BatchInstructionDo initialValues { get; private set; }
        internal BatchInstructionDo updatedValues { get; private set; }
        internal Action<BatchInstructionDo, string> loadMissingValue { private get; set; }

        public BatchInstruction()
        {
            this.initialValues = new BatchInstructionDo();
            this.updatedValues = new BatchInstructionDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Instruction";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "BatchInstruction";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "referenceType";
                yield return "requestType";
                yield return "startTime";
                yield return "endTime";
                yield return "status";
                yield return "Batch_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(100)]
        [XmlElement(ElementName="referenceType")]
        public string referenceType 
	    { 
            get
            {
                if (this.updatedValues.referenceTypeHasValue)
                {
                    return this.updatedValues.referenceType;
                }
                
                if (!this.initialValues.referenceTypeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "referenceType");
                    this.initialValues.referenceTypeHasValue = true;
                }

                return this.initialValues.referenceType;
            }
            set
            {
                this.updatedValues.referenceType = value;
            }
        }

        [XmlElement(ElementName="requestType")]
        public BatchRequestType requestType 
	    { 
            get
            {
                if (this.updatedValues.requestTypeHasValue)
                {
                    return this.updatedValues.requestType;
                }
                
                if (!this.initialValues.requestTypeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "requestType");
                    this.initialValues.requestTypeHasValue = true;
                }

                return this.initialValues.requestType;
            }
            set
            {
                this.updatedValues.requestType = value;
            }
        }

        /// <summary>
        /// Time on the server when processing begins
        /// <summary>
        [XmlElement(ElementName="startTime")]
        public System.TimeSpan startTime 
	    { 
            get
            {
                if (this.updatedValues.startTimeHasValue)
                {
                    return this.updatedValues.startTime;
                }
                
                if (!this.initialValues.startTimeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "startTime");
                    this.initialValues.startTimeHasValue = true;
                }

                return this.initialValues.startTime;
            }
            set
            {
                this.updatedValues.startTime = value;
            }
        }

        [XmlElement(ElementName="endTime")]
        public System.TimeSpan? endTime 
	    { 
            get
            {
                if (this.updatedValues.endTimeHasValue)
                {
                    return this.updatedValues.endTime;
                }
                
                if (!this.initialValues.endTimeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "endTime");
                    this.initialValues.endTimeHasValue = true;
                }

                return this.initialValues.endTime;
            }
            set
            {
                this.updatedValues.endTime = value;
            }
        }

        /// <summary>
        /// Current status of the instruction
        /// <summary>
        [XmlElement(ElementName="status")]
        public BatchState status 
	    { 
            get
            {
                if (this.updatedValues.statusHasValue)
                {
                    return this.updatedValues.status;
                }
                
                if (!this.initialValues.statusHasValue)
                {
                    this.loadMissingValue(this.initialValues, "status");
                    this.initialValues.statusHasValue = true;
                }

                return this.initialValues.status;
            }
            set
            {
                this.updatedValues.status = value;
            }
        }

        [XmlElement(ElementName="Batch_id")]
        public long Batch_id 
	    { 
            get
            {
                if (this.updatedValues.Batch_idHasValue)
                {
                    return this.updatedValues.Batch_id;
                }
                
                if (!this.initialValues.Batch_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "Batch_id");
                    this.initialValues.Batch_idHasValue = true;
                }

                return this.initialValues.Batch_id;
            }
            set
            {
                this.updatedValues.Batch_id = value;
            }
        }

        public bool BatchIsLoaded { get; private set; }
        internal Func<Batch> BatchQuery { private get; set; }
        public Batch Batch
        {
            get
            {
                if (this.BatchQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.BatchQuery();
                    if (!this.BatchIsLoaded)
                    {
                        this.BatchIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        public bool BatchInstructionEndsAreLoaded { get; private set; }
        internal Func<IEnumerable<BatchInstructionEnd>> BatchInstructionEndsQuery { private get; set; }
        public IEnumerable<BatchInstructionEnd> BatchInstructionEnds
        {
            get
            {
                if (this.BatchInstructionEndsQuery == null)
                {
                    return Enumerable.Empty<BatchInstructionEnd>();
                }
                else
                {
                    var result = this.BatchInstructionEndsQuery();
                    if (!this.BatchInstructionEndsAreLoaded)
                    {
                        this.BatchInstructionEndsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool BatchSchedulersAreLoaded { get; private set; }
        internal Func<IEnumerable<BatchScheduler>> BatchSchedulersQuery { private get; set; }
        public IEnumerable<BatchScheduler> BatchSchedulers
        {
            get
            {
                if (this.BatchSchedulersQuery == null)
                {
                    return Enumerable.Empty<BatchScheduler>();
                }
                else
                {
                    var result = this.BatchSchedulersQuery();
                    if (!this.BatchSchedulersAreLoaded)
                    {
                        this.BatchSchedulersAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "referenceType");
            if (e2 != null) 
            {
                this.referenceType = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "requestType");
            if (e3 != null)
            {
                this.requestType = e3.Value;
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "startTime");
            if (e4 != null)
            {
                this.startTime = System.TimeSpan.Parse(e4.Value);
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "endTime");
            if (e5 != null)
            {
                this.endTime = System.TimeSpan.Parse(e5.Value);
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "status");
            if (e6 != null)
            {
                this.status = e6.Value;
            }

            XElement e7 = elements.FirstOrDefault(x => x.Name == "Batch_id");
            if (e7 != null)
            {
                this.Batch_id = long.Parse(e7.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.referenceTypeHasValue && !string.IsNullOrEmpty(referenceType))
            {
                writer.WriteElementString("referenceType", this.updatedValues.referenceType);
            }
            else if (this.initialValues.referenceTypeHasValue && !string.IsNullOrEmpty(referenceType))
            {
                writer.WriteElementString("referenceType", this.initialValues.referenceType);
            }

            if (this.updatedValues.requestTypeHasValue && requestType != BatchRequestType.Null)
            {
                writer.WriteElementString("requestType", this.updatedValues.requestType.Value);
            }
            else if (this.initialValues.requestTypeHasValue && requestType != BatchRequestType.Null)
            {
                writer.WriteElementString("requestType", this.initialValues.requestType.Value);
            }

            if (this.updatedValues.startTimeHasValue)
            {
                writer.WriteElementString("startTime", this.updatedValues.startTime.ToString());
            }
            else if (this.initialValues.startTimeHasValue)
            {
                writer.WriteElementString("startTime", this.initialValues.startTime.ToString());
            }

            if (this.updatedValues.endTimeHasValue && endTime != null)
            {
                writer.WriteElementString("endTime", this.updatedValues.endTime.ToString());
            }
            else if (this.initialValues.endTimeHasValue && endTime != null)
            {
                writer.WriteElementString("endTime", this.initialValues.endTime.ToString());
            }

            if (this.updatedValues.statusHasValue && status != BatchState.Null)
            {
                writer.WriteElementString("status", this.updatedValues.status.Value);
            }
            else if (this.initialValues.statusHasValue && status != BatchState.Null)
            {
                writer.WriteElementString("status", this.initialValues.status.Value);
            }

            if (this.updatedValues.Batch_idHasValue)
            {
                writer.WriteElementString("Batch_id", this.updatedValues.Batch_id.ToString());
            }
            else if (this.initialValues.Batch_idHasValue)
            {
                writer.WriteElementString("Batch_id", this.initialValues.Batch_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
