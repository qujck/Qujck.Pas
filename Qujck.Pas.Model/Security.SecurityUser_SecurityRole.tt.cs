//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Security.DataObjects;

namespace Qujck.Pas.Model.Security
{
    [Serializable]
    public sealed partial class SecurityUser_SecurityRole : AbstractSecurityEntity
    {
        internal SecurityUser_SecurityRoleDo initialValues { get; private set; }
        internal SecurityUser_SecurityRoleDo updatedValues { get; private set; }
        internal Action<SecurityUser_SecurityRoleDo, string> loadMissingValue { private get; set; }

        public SecurityUser_SecurityRole()
        {
            this.initialValues = new SecurityUser_SecurityRoleDo();
            this.updatedValues = new SecurityUser_SecurityRoleDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Security";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "SecurityUser_SecurityRole";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "SecurityRole_id";
                yield return "SecurityUser_id";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [XmlElement(ElementName="SecurityRole_id")]
        public long SecurityRole_id 
	    { 
            get
            {
                if (this.updatedValues.SecurityRole_idHasValue)
                {
                    return this.updatedValues.SecurityRole_id;
                }
                
                if (!this.initialValues.SecurityRole_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "SecurityRole_id");
                    this.initialValues.SecurityRole_idHasValue = true;
                }

                return this.initialValues.SecurityRole_id;
            }
            set
            {
                this.updatedValues.SecurityRole_id = value;
            }
        }

        [XmlElement(ElementName="SecurityUser_id")]
        public long SecurityUser_id 
	    { 
            get
            {
                if (this.updatedValues.SecurityUser_idHasValue)
                {
                    return this.updatedValues.SecurityUser_id;
                }
                
                if (!this.initialValues.SecurityUser_idHasValue)
                {
                    this.loadMissingValue(this.initialValues, "SecurityUser_id");
                    this.initialValues.SecurityUser_idHasValue = true;
                }

                return this.initialValues.SecurityUser_id;
            }
            set
            {
                this.updatedValues.SecurityUser_id = value;
            }
        }

        public bool SecurityRoleIsLoaded { get; private set; }
        internal Func<SecurityRole> SecurityRoleQuery { private get; set; }
        public SecurityRole SecurityRole
        {
            get
            {
                if (this.SecurityRoleQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.SecurityRoleQuery();
                    if (!this.SecurityRoleIsLoaded)
                    {
                        this.SecurityRoleIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        public bool SecurityUserIsLoaded { get; private set; }
        internal Func<SecurityUser> SecurityUserQuery { private get; set; }
        public SecurityUser SecurityUser
        {
            get
            {
                if (this.SecurityUserQuery == null)
                {
                    return null;
                }
                else
                {
                    var result = this.SecurityUserQuery();
                    if (!this.SecurityUserIsLoaded)
                    {
                        this.SecurityUserIsLoaded = result != null;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "SecurityRole_id");
            if (e2 != null)
            {
                this.SecurityRole_id = long.Parse(e2.Value);
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "SecurityUser_id");
            if (e3 != null)
            {
                this.SecurityUser_id = long.Parse(e3.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.SecurityRole_idHasValue)
            {
                writer.WriteElementString("SecurityRole_id", this.updatedValues.SecurityRole_id.ToString());
            }
            else if (this.initialValues.SecurityRole_idHasValue)
            {
                writer.WriteElementString("SecurityRole_id", this.initialValues.SecurityRole_id.ToString());
            }

            if (this.updatedValues.SecurityUser_idHasValue)
            {
                writer.WriteElementString("SecurityUser_id", this.updatedValues.SecurityUser_id.ToString());
            }
            else if (this.initialValues.SecurityUser_idHasValue)
            {
                writer.WriteElementString("SecurityUser_id", this.initialValues.SecurityUser_id.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
