//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;
using Qujck.Pas.Core.Enumerations;
using Qujck.Pas.Model.Standing.DataObjects;

namespace Qujck.Pas.Model.Standing
{
    [Serializable]
    public sealed partial class MoneyInConfiguration : AbstractStandingEntity, ICode
    {
        internal MoneyInConfigurationDo initialValues { get; private set; }
        internal MoneyInConfigurationDo updatedValues { get; private set; }
        internal Action<MoneyInConfigurationDo, string> loadMissingValue { private get; set; }

        public MoneyInConfiguration()
        {
            this.initialValues = new MoneyInConfigurationDo();
            this.updatedValues = new MoneyInConfigurationDo();
            this.loadMissingValue = (a, b) => { };
        }

        [XmlIgnore]
        internal override string schema
        {
            get
            {
                return "Standing";
            }
        }

        [XmlIgnore]
        internal override string table
        {
            get
            {
                return "MoneyInConfiguration";
            }
        }

        [XmlIgnore]
        internal override IEnumerable<string> columns
        {
            get
            {
                yield return "id";
                yield return "code";
                yield return "minimumSingleContributionAmount";
                yield return "maximumSingleContributionAmount";
                yield return "minimumRegularContributionAmount";
                yield return "maximumRegularContributionAmount";
            }
        }

        public override long id
        {
            get
            {
                return this.initialValues.id;
            }
            set
            {
                this.initialValues.id = value;
            }
        }

        [StringLength(25)]
        [XmlElement(ElementName="code")]
        public string code 
	    { 
            get
            {
                if (this.updatedValues.codeHasValue)
                {
                    return this.updatedValues.code;
                }
                
                if (!this.initialValues.codeHasValue)
                {
                    this.loadMissingValue(this.initialValues, "code");
                    this.initialValues.codeHasValue = true;
                }

                return this.initialValues.code;
            }
            set
            {
                this.updatedValues.code = value;
            }
        }

        [XmlElement(ElementName="minimumSingleContributionAmount")]
        public decimal minimumSingleContributionAmount 
	    { 
            get
            {
                if (this.updatedValues.minimumSingleContributionAmountHasValue)
                {
                    return this.updatedValues.minimumSingleContributionAmount;
                }
                
                if (!this.initialValues.minimumSingleContributionAmountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "minimumSingleContributionAmount");
                    this.initialValues.minimumSingleContributionAmountHasValue = true;
                }

                return this.initialValues.minimumSingleContributionAmount;
            }
            set
            {
                this.updatedValues.minimumSingleContributionAmount = value;
            }
        }

        [XmlElement(ElementName="maximumSingleContributionAmount")]
        public decimal maximumSingleContributionAmount 
	    { 
            get
            {
                if (this.updatedValues.maximumSingleContributionAmountHasValue)
                {
                    return this.updatedValues.maximumSingleContributionAmount;
                }
                
                if (!this.initialValues.maximumSingleContributionAmountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maximumSingleContributionAmount");
                    this.initialValues.maximumSingleContributionAmountHasValue = true;
                }

                return this.initialValues.maximumSingleContributionAmount;
            }
            set
            {
                this.updatedValues.maximumSingleContributionAmount = value;
            }
        }

        [XmlElement(ElementName="minimumRegularContributionAmount")]
        public decimal minimumRegularContributionAmount 
	    { 
            get
            {
                if (this.updatedValues.minimumRegularContributionAmountHasValue)
                {
                    return this.updatedValues.minimumRegularContributionAmount;
                }
                
                if (!this.initialValues.minimumRegularContributionAmountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "minimumRegularContributionAmount");
                    this.initialValues.minimumRegularContributionAmountHasValue = true;
                }

                return this.initialValues.minimumRegularContributionAmount;
            }
            set
            {
                this.updatedValues.minimumRegularContributionAmount = value;
            }
        }

        [XmlElement(ElementName="maximumRegularContributionAmount")]
        public decimal maximumRegularContributionAmount 
	    { 
            get
            {
                if (this.updatedValues.maximumRegularContributionAmountHasValue)
                {
                    return this.updatedValues.maximumRegularContributionAmount;
                }
                
                if (!this.initialValues.maximumRegularContributionAmountHasValue)
                {
                    this.loadMissingValue(this.initialValues, "maximumRegularContributionAmount");
                    this.initialValues.maximumRegularContributionAmountHasValue = true;
                }

                return this.initialValues.maximumRegularContributionAmount;
            }
            set
            {
                this.updatedValues.maximumRegularContributionAmount = value;
            }
        }

        public bool MoneyInConfiguration_FundsAreLoaded { get; private set; }
        internal Func<IEnumerable<MoneyInConfiguration_Fund>> MoneyInConfiguration_FundsQuery { private get; set; }
        public IEnumerable<MoneyInConfiguration_Fund> MoneyInConfiguration_Funds
        {
            get
            {
                if (this.MoneyInConfiguration_FundsQuery == null)
                {
                    return Enumerable.Empty<MoneyInConfiguration_Fund>();
                }
                else
                {
                    var result = this.MoneyInConfiguration_FundsQuery();
                    if (!this.MoneyInConfiguration_FundsAreLoaded)
                    {
                        this.MoneyInConfiguration_FundsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        public bool ProductConfiguration_MoneyInConfigurationsAreLoaded { get; private set; }
        internal Func<IEnumerable<ProductConfiguration_MoneyInConfiguration>> ProductConfiguration_MoneyInConfigurationsQuery { private get; set; }
        public IEnumerable<ProductConfiguration_MoneyInConfiguration> ProductConfiguration_MoneyInConfigurations
        {
            get
            {
                if (this.ProductConfiguration_MoneyInConfigurationsQuery == null)
                {
                    return Enumerable.Empty<ProductConfiguration_MoneyInConfiguration>();
                }
                else
                {
                    var result = this.ProductConfiguration_MoneyInConfigurationsQuery();
                    if (!this.ProductConfiguration_MoneyInConfigurationsAreLoaded)
                    {
                        this.ProductConfiguration_MoneyInConfigurationsAreLoaded = result.Count() > 0;
                    }

                    return result;
                }
            }
        }

        partial void BeforeDeserialize(IQueryable<XElement> elements);
        partial void AfterDeserialize(IQueryable<XElement> elements);

        public override void Deserialize(IQueryable<XElement> elements)
        {
            this.BeforeDeserialize(elements);

            XElement e1 = elements.FirstOrDefault(x => x.Name == "id");
            if (e1 != null)
            {
                this.id = long.Parse(e1.Value);
            }

            XElement e2 = elements.FirstOrDefault(x => x.Name == "code");
            if (e2 != null) 
            {
                this.code = e2.Value;
            }

            XElement e3 = elements.FirstOrDefault(x => x.Name == "minimumSingleContributionAmount");
            if (e3 != null)
            {
                this.minimumSingleContributionAmount = decimal.Parse(e3.Value);
            }

            XElement e4 = elements.FirstOrDefault(x => x.Name == "maximumSingleContributionAmount");
            if (e4 != null)
            {
                this.maximumSingleContributionAmount = decimal.Parse(e4.Value);
            }

            XElement e5 = elements.FirstOrDefault(x => x.Name == "minimumRegularContributionAmount");
            if (e5 != null)
            {
                this.minimumRegularContributionAmount = decimal.Parse(e5.Value);
            }

            XElement e6 = elements.FirstOrDefault(x => x.Name == "maximumRegularContributionAmount");
            if (e6 != null)
            {
                this.maximumRegularContributionAmount = decimal.Parse(e6.Value);
            }

            this.AfterDeserialize(elements);
        }

        partial void BeforeWriteXml(System.Xml.XmlWriter writer);
        partial void AfterWriteXml(System.Xml.XmlWriter writer);

        public override void WriteXml(System.Xml.XmlWriter writer)
        {
            this.BeforeWriteXml(writer);

            writer.WriteElementString("id", this.initialValues.id.ToString());

            if (this.updatedValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.updatedValues.code);
            }
            else if (this.initialValues.codeHasValue && !string.IsNullOrEmpty(code))
            {
                writer.WriteElementString("code", this.initialValues.code);
            }

            if (this.updatedValues.minimumSingleContributionAmountHasValue)
            {
                writer.WriteElementString("minimumSingleContributionAmount", this.updatedValues.minimumSingleContributionAmount.ToString());
            }
            else if (this.initialValues.minimumSingleContributionAmountHasValue)
            {
                writer.WriteElementString("minimumSingleContributionAmount", this.initialValues.minimumSingleContributionAmount.ToString());
            }

            if (this.updatedValues.maximumSingleContributionAmountHasValue)
            {
                writer.WriteElementString("maximumSingleContributionAmount", this.updatedValues.maximumSingleContributionAmount.ToString());
            }
            else if (this.initialValues.maximumSingleContributionAmountHasValue)
            {
                writer.WriteElementString("maximumSingleContributionAmount", this.initialValues.maximumSingleContributionAmount.ToString());
            }

            if (this.updatedValues.minimumRegularContributionAmountHasValue)
            {
                writer.WriteElementString("minimumRegularContributionAmount", this.updatedValues.minimumRegularContributionAmount.ToString());
            }
            else if (this.initialValues.minimumRegularContributionAmountHasValue)
            {
                writer.WriteElementString("minimumRegularContributionAmount", this.initialValues.minimumRegularContributionAmount.ToString());
            }

            if (this.updatedValues.maximumRegularContributionAmountHasValue)
            {
                writer.WriteElementString("maximumRegularContributionAmount", this.updatedValues.maximumRegularContributionAmount.ToString());
            }
            else if (this.initialValues.maximumRegularContributionAmountHasValue)
            {
                writer.WriteElementString("maximumRegularContributionAmount", this.initialValues.maximumRegularContributionAmount.ToString());
            }

            this.AfterWriteXml(writer);
        }
    }
}
